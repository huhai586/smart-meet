[{"filePath":"/Users/huhai/WebstormProjects/smart-meet/.prettierrc.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/auto-sync-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/data-persistence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/data-persistence/indexed-db-provider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/data-persistence/memory-storage-provider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/data-persistence/storage-factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/data-persistence/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/handle-tab-close.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_removeInfo' is defined but never used.","line":40,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { autoSyncService } from \"./auto-sync-service\";\nimport dayjs from \"dayjs\";\n\n// 存储Meet标签页信息的对象\nconst meetTabs = {};\n\n// 监听标签页更新，收集Meet标签页信息\nchrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {\n    if (tab.url && tab.url.includes('meet.google.com') && changeInfo.status === 'complete') {\n        console.log('Google Meet 页面加载完成:', tabId);\n        meetTabs[tabId] = {\n            url: tab.url,\n            meetingId: extractMeetingId(tab.url),\n            lastActive: Date.now(),\n            title: tab.title || '会议'\n        };\n    }\n});\n\n// 从内容脚本接收会议信息更新\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'update_meeting_info' && sender.tab && sender.tab.id) {\n        // 更新标签页信息\n        if (meetTabs[sender.tab.id]) {\n            meetTabs[sender.tab.id] = {\n                ...meetTabs[sender.tab.id],\n                ...message.data,\n                lastUpdated: Date.now()\n            };\n            console.log('更新了会议信息:', meetTabs[sender.tab.id]);\n        }\n        \n        if (sendResponse) {\n            sendResponse({ success: true });\n        }\n    }\n});\n\n// 监听标签页关闭事件\nchrome.tabs.onRemoved.addListener(function(tabId, _removeInfo) {\n    if (meetTabs[tabId]) {\n        console.log('Google Meet 标签页被关闭:', tabId);\n        console.log('关闭的会议信息:', meetTabs[tabId]);\n        \n        // 执行同步操作\n        syncMeetingDataToGoogleDrive(meetTabs[tabId]);\n        \n        // 清理记录\n        delete meetTabs[tabId];\n    }\n});\n\n// 从URL中提取会议ID\nfunction extractMeetingId(url) {\n    try {\n        const meetUrl = new URL(url);\n        // 处理形如 /abc-defg-hij 的路径\n        const pathParts = meetUrl.pathname.split('/');\n        return pathParts[pathParts.length - 1] || 'unknown';\n    } catch (e) {\n        console.error('提取会议ID时出错:', e);\n        return 'unknown';\n    }\n}\n\n// 同步会议数据到Google Drive\nasync function syncMeetingDataToGoogleDrive(meetingInfo) {\n    try {\n        console.log('准备同步会议数据到Google Drive:', meetingInfo);\n        \n        // 获取今天的日期，格式为YYYY-MM-DD\n        const today = dayjs().format('YYYY-MM-DD');\n        \n        // 使用autoSyncService进行同步\n        const result = await autoSyncService.autoSync(today);\n        \n        if (result) {\n            console.log('同步成功，会议数据已保存到Google Drive');\n            // 显示成功通知\n            chrome.notifications.create({\n                type: 'basic',\n                iconUrl: 'assets/icon-48.png',\n                title: '会议记录已同步',\n                message: `${meetingInfo.title || '会议'} 的记录已自动同步到Google Drive`,\n                priority: 0\n            });\n        } else {\n            console.warn('同步失败');\n            // 显示失败通知\n            chrome.notifications.create({\n                type: 'basic',\n                iconUrl: 'assets/icon-48.png',\n                title: '会议记录同步失败',\n                message: '无法同步会议记录到Google Drive，请手动同步',\n                priority: 1\n            });\n        }\n        \n        return result;\n    } catch (error) {\n        console.error('同步会议数据时出错:', error);\n        \n        // 显示错误通知\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: 'assets/icon-48.png',\n            title: '同步出错',\n            message: '同步会议记录时发生错误，请手动同步',\n            priority: 1\n        });\n        \n        return false;\n    }\n}\n\n\nexport {};\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/message-handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/set-badge-text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/sync-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/tab-tracking.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_removeInfo' is defined but never used.","line":63,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 标签页跟踪模块\n * 负责跟踪 Google Meet 标签页的生命周期并在标签页关闭时触发同步\n */\n\nimport { syncMeetingData } from './sync-manager';\n\n// 存储Meet标签页信息的对象\nconst meetTabs: Record<number, MeetTabInfo> = {};\n\n// Google Meet 标签页信息接口\nexport interface MeetTabInfo {\n    url: string;\n    meetingId: string;\n    title: string;\n    lastActive: number;\n    lastUpdated?: number;\n    [key: string]: unknown; // 允许额外属性\n}\n\ninterface MeetingData {\n    [key: string]: unknown;\n}\n\n/**\n * 初始化标签页跟踪\n */\nexport function initTabTracking() {\n    console.log('初始化标签页跟踪...');\n\n    // 监听标签页更新，收集Meet标签页信息\n    chrome.tabs.onUpdated.addListener(handleTabUpdated);\n    \n    // 监听标签页关闭事件\n    chrome.tabs.onRemoved.addListener(handleTabRemoved);\n    \n    // 监听内部会议信息更新事件\n    chrome.runtime.onMessage.addListener((message) => {\n        if (message.action === 'internal_meeting_info_updated' && message.tabId) {\n            updateMeetingInfo(message.tabId, message.data);\n        }\n    });\n}\n\n/**\n * 处理标签页更新事件\n */\nfunction handleTabUpdated(tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) {\n    if (tab.url && tab.url.includes('meet.google.com') && changeInfo.status === 'complete') {\n        console.log('Google Meet 页面加载完成:', tabId);\n        meetTabs[tabId] = {\n            url: tab.url,\n            meetingId: extractMeetingId(tab.url),\n            lastActive: Date.now(),\n            title: tab.title || '会议'\n        };\n    }\n}\n\n/**\n * 处理标签页关闭事件\n */\nfunction handleTabRemoved(tabId: number, _removeInfo: chrome.tabs.TabRemoveInfo) {\n    if (meetTabs[tabId]) {\n        console.log('Google Meet 标签页被关闭:', tabId);\n        console.log('关闭的会议信息:', meetTabs[tabId]);\n        \n        // 执行同步操作\n        syncMeetingData(meetTabs[tabId]);\n        \n        // 清理记录\n        delete meetTabs[tabId];\n    }\n}\n\n/**\n * 更新会议信息\n */\nfunction updateMeetingInfo(tabId: number, data: MeetingData) {\n    if (meetTabs[tabId]) {\n        meetTabs[tabId] = {\n            ...meetTabs[tabId],\n            ...data,\n            lastUpdated: Date.now()\n        };\n        console.log('更新了会议信息:', meetTabs[tabId]);\n    }\n}\n\n/**\n * 从URL中提取会议ID\n */\nfunction extractMeetingId(url: string): string {\n    try {\n        const meetUrl = new URL(url);\n        // 处理形如 /abc-defg-hij 的路径\n        const pathParts = meetUrl.pathname.split('/');\n        return pathParts[pathParts.length - 1] || 'unknown';\n    } catch (e) {\n        console.error('提取会议ID时出错:', e);\n        return 'unknown';\n    }\n}\n\n/**\n * 获取指定标签页的会议信息\n */\nexport function getMeetTabInfo(tabId: number): MeetTabInfo | undefined {\n    return meetTabs[tabId];\n}\n\n/**\n * 获取所有会议标签页信息\n */\nexport function getAllMeetTabs(): Record<number, MeetTabInfo> {\n    return { ...meetTabs }; // 返回副本，避免外部修改\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/utils/language-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/background/utils/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/Account.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[607,610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[607,610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Card, List, Button, Upload, Spin, message, Modal, Empty, Popconfirm } from 'antd';\nimport { FolderOutlined, UploadOutlined, DeleteOutlined, CloudDownloadOutlined } from '@ant-design/icons';\nimport { DriveService } from \"~utils/google-drive\";\nimport { StorageFactory } from '~background/data-persistence/storage-factory';\nimport dayjs from 'dayjs';\nimport { openSidePanel } from \"~utils/open-side-panel\";\n\nconst Account = () => {\n    const [backupFiles, setBackupFiles] = useState<any[]>([]);\n    const [, setBackupFolder] = useState<any | null>(null);\n    const [loading, setLoading] = useState(false);\n    const [deletingFileId, setDeletingFileId] = useState<string | null>(null);\n    const [loadingFileId, setLoadingFileId] = useState<string | null>(null);\n    const driveService = DriveService.getInstance();\n\n    const loadBackupFolder = useCallback(async () => {\n        try {\n            setLoading(true);\n            const folder = await driveService.getBackupFolder();\n            setBackupFolder(folder);\n\n            if (folder) {\n                const files = await driveService.listBackupFiles();\n                setBackupFiles(files);\n            }\n        } catch (error) {\n            console.error('Error loading backup folder:', error);\n        } finally {\n            setLoading(false);\n        }\n    }, [driveService]);\n\n    useEffect(() => {\n        loadBackupFolder();\n    }, [loadBackupFolder]);\n\n    const handleUpload = async (file: File) => {\n        try {\n            setLoading(true);\n            const success = await driveService.uploadFile(file);\n            if (success) {\n                message.success('File uploaded successfully to backup folder');\n                // 刷新文件列表\n                loadBackupFolder();\n            }\n        } catch (error) {\n            console.error('Error uploading file:', error);\n        } finally {\n            setLoading(false);\n        }\n        return false; // 阻止自动上传\n    };\n\n    const handleDeleteFile = async (fileId: string) => {\n        try {\n            setDeletingFileId(fileId);\n            const success = await driveService.deleteFile(fileId);\n            if (success) {\n                message.success('File deleted successfully');\n                // 从列表中移除已删除的文件\n                setBackupFiles(backupFiles.filter(file => file.id !== fileId));\n            }\n        } catch (error) {\n            console.error('Error deleting file:', error);\n        } finally {\n            setDeletingFileId(null);\n        }\n    };\n\n    const handleLoadFile = async (fileId: string, fileName: string) => {\n        try {\n            setLoadingFileId(fileId);\n\n            // 从文件名中提取日期（假设文件名格式为 YYYY-MM-DD.json）\n            const dateMatch = fileName.match(/(\\d{4}-\\d{2}-\\d{2})\\.json/);\n            if (!dateMatch) {\n                message.error('Invalid backup file name format. Expected YYYY-MM-DD.json');\n                return;\n            }\n\n            const dateStr = dateMatch[1];\n            const date = dayjs(dateStr);\n\n            // 下载文件内容\n            const fileContent = await driveService.downloadFile(fileId);\n\n            // 获取存储提供者\n            const storage = StorageFactory.getInstance().getProvider();\n\n            // 确认是否覆盖本地记录\n            Modal.confirm({\n                title: 'Restore Backup',\n                content: `This will overwrite any existing chat records for ${dateStr}. Continue?`,\n                onOk: async () => {\n                    try {\n                        // 设置当前日期以确保记录被正确存储\n                        await storage.setCurrentDate(date);\n\n                        // 只恢复特定日期的记录\n                        if (Array.isArray(fileContent)) {\n                            // 使用后台消息处理器恢复记录，并传递日期参数\n                            chrome.runtime.sendMessage({\n                                action: 'restoreRecords',\n                                data: fileContent,\n                                date: date.valueOf() // 转换为时间戳\n                            });\n\n                            message.success(`Successfully restored chat records for ${dateStr}`);\n\n                            // 打开侧边面板\n                            try {\n                                await openSidePanel();\n                            } catch (error) {\n                                console.error('Failed to open sidepanel after restore:', error);\n                            }\n                        } else {\n                            message.error('Invalid backup file format');\n                        }\n                    } catch (error) {\n                        console.error('Error restoring records:', error);\n                        message.error('Failed to restore chat records');\n                    }\n                },\n                okText: 'Yes, Overwrite',\n                cancelText: 'Cancel',\n            });\n        } catch (error) {\n            console.error('Error loading file:', error);\n            message.error('Failed to load backup file');\n        } finally {\n            setLoadingFileId(null);\n        }\n    };\n\n    return (\n        <Card title=\"Your backup file in Google Drive\" extra={<Button icon={<FolderOutlined />} onClick={loadBackupFolder}>Refresh</Button>}>\n            <div style={{ marginBottom: 16 }}>\n                <Upload\n                    beforeUpload={handleUpload}\n                    showUploadList={false}\n                    disabled={loading}\n                >\n                    <Button icon={<UploadOutlined />}>Upload File</Button>\n                </Upload>\n            </div>\n\n            <Spin spinning={loading}>\n                <h3>Backup Files</h3>\n                {backupFiles.length > 0 ? (\n                    <List\n                        dataSource={backupFiles}\n                        renderItem={(file) => (\n                            <List.Item\n                                actions={[\n                                    <Button\n                                        key=\"load\"\n                                        type=\"primary\"\n                                        icon={<CloudDownloadOutlined />}\n                                        onClick={() => handleLoadFile(file.id, file.name)}\n                                        loading={loadingFileId === file.id}\n                                    >\n                                        Load\n                                    </Button>,\n                                    <Popconfirm\n                                        key=\"delete\"\n                                        title=\"Delete file\"\n                                        description={`Are you sure you want to delete \"${file.name}\"?`}\n                                        onConfirm={() => handleDeleteFile(file.id)}\n                                        okText=\"Yes\"\n                                        cancelText=\"No\"\n                                    >\n                                        <Button\n                                            type=\"text\"\n                                            danger\n                                            icon={<DeleteOutlined />}\n                                            loading={deletingFileId === file.id}\n                                        >\n                                            Delete\n                                        </Button>\n                                    </Popconfirm>\n                                ]}\n                            >\n                                <List.Item.Meta\n                                    title={file.name}\n                                    description={`Type: ${file.mimeType} | Modified: ${new Date(file.modifiedTime).toLocaleString()}`}\n                                />\n                            </List.Item>\n                        )}\n                    />\n                ) : (\n                    <Empty description=\"No backup files found\" />\n                )}\n            </Spin>\n        </Card>\n    );\n};\n\nexport default Account;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/GlobalDatePicker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1561,1564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1561,1564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport { DatePicker, Button } from 'antd';\nimport { CalendarOutlined } from '@ant-design/icons';\nimport { useDateContext } from '../contexts/DateContext';\nimport dayjs from 'dayjs';\nimport './GlobalDatePicker.scss';\nimport useTranscripts from '../hooks/useTranscripts';\n\nconst GlobalDatePicker = () => {\n    const { selectedDate, setSelectedDate } = useDateContext();\n    const [] = useTranscripts();\n    const [datesWithMessages, setDatesWithMessages] = useState(new Set<string>());\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        console.warn('GlobalDatePicker.js', 'get-days-with-messages');\n        chrome.runtime.sendMessage({\n            action: 'get-days-with-messages',\n        });\n    }, []);\n\n    const handleDateChange = (date: dayjs.Dayjs | null) => {\n        const newDate = date || dayjs();\n        setSelectedDate(newDate);\n        setOpen(false); // Close the popover after selection\n        // 通知后台更新当前日期\n        chrome.runtime.sendMessage({\n            action: 'set-current-date',\n            date: newDate\n        });\n    };\n\n    const dateRender = (current: dayjs.Dayjs) => {\n        const date = current.format('YYYY-MM-DD');\n        const hasMessages = datesWithMessages.has(date);\n        return (\n            <div className=\"ant-picker-cell-inner\">\n                {current.date()}\n                {hasMessages && <span className=\"message-dot\" />}\n            </div>\n        );\n    };\n\n    useEffect(() => {\n        const handleMessage = (message: any) => {\n            const {action, data} = message;\n            if (action === 'days-with-messages') {\n                console.log('GlobalDatePicker.js', 'days-with-messages', data);\n                setDatesWithMessages(new Set(data));\n            }\n        }\n        chrome.runtime.onMessage.addListener(handleMessage);\n        return () => {\n            chrome.runtime.onMessage.removeListener(handleMessage);\n        }\n    },[])\n\n    // Format display text: MM/DD format\n    const displayText = useMemo(() => {\n        return selectedDate.format('MM/DD');\n    }, [selectedDate]);\n\n    return (\n        <div className=\"global-date-picker-compact\">\n            <Button \n                type=\"text\" \n                className=\"date-display-button\"\n                icon={<CalendarOutlined />}\n                onClick={() => setOpen(true)}\n            >\n                <span className=\"date-text\">{displayText}</span>\n            </Button>\n            <DatePicker\n                value={selectedDate}\n                onChange={handleDateChange}\n                allowClear={false}\n                placeholder=\"Select date\"\n                cellRender={dateRender}\n                open={open}\n                onOpenChange={setOpen}\n                dropdownClassName=\"global-date-picker-dropdown\"\n                style={{ \n                    position: 'absolute',\n                    visibility: 'hidden',\n                    pointerEvents: 'none',\n                    width: 0,\n                    height: 0\n                }}\n            />\n        </div>\n    );\n};\n\nexport default GlobalDatePicker;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/GuideAnimation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/Loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/LocalStorageViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_handlePanelChange' is assigned a value but never used.","line":152,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_handleTabChange' is assigned a value but never used.","line":157,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_headerRender' is assigned a value but never used.","line":162,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_type' is defined but never used.","line":162,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_onChange' is defined but never used.","line":162,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_renderDayView' is assigned a value but never used.","line":186,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Card, Calendar, Badge, Modal, List, Typography, Empty, Spin, Button, Radio, Space } from 'antd';\nimport { DatabaseOutlined, LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { StorageFactory } from \"~background/data-persistence/storage-factory\";\nimport type { Captions } from \"google-meeting-captions-resolver\";\nimport type { CalendarMode } from 'antd/es/calendar/generateCalendar';\n\nconst { Title, Text } = Typography;\n\ninterface ExtendedTranscript extends Captions {\n  timestamp: number;\n  activeSpeaker: string;\n  talkContent: string;\n}\n\nconst LocalStorageViewer = () => {\n  const [datesWithMessages, setDatesWithMessages] = useState<Set<string>>(new Set());\n  const [selectedDate, setSelectedDate] = useState<Dayjs | null>(null);\n  const [messages, setMessages] = useState<ExtendedTranscript[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentDate, setCurrentDate] = useState<Dayjs>(dayjs());\n  const [viewMode, setViewMode] = useState<CalendarMode>('month');\n  const [activeTab, setActiveTab] = useState<string>('calendar');\n  const [dayViewMessages, setDayViewMessages] = useState<ExtendedTranscript[]>([]);\n  const [dayViewLoading, setDayViewLoading] = useState(false);\n\n  useEffect(() => {\n    loadDatesWithMessages();\n  }, []);\n\n  useEffect(() => {\n    if (activeTab === 'day') {\n      loadDayViewMessages(currentDate);\n    }\n  }, [activeTab, currentDate, loadDayViewMessages]);\n\n  const loadDatesWithMessages = async () => {\n    try {\n      setLoading(true);\n      const storage = StorageFactory.getInstance().getProvider();\n      const dates = await storage.getDaysWithMessages();\n      console.log('Dates with messages:', dates);\n      setDatesWithMessages(new Set(dates));\n    } catch (error) {\n      console.error('Failed to load dates:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadDayViewMessages = useCallback(async (date: Dayjs) => {\n    const dateStr = date.format('YYYY-MM-DD');\n    if (datesWithMessages.has(dateStr)) {\n      try {\n        setDayViewLoading(true);\n        const storage = StorageFactory.getInstance().getProvider();\n        const records = await storage.getRecords(date);\n\n        const validRecords = records.filter(record => {\n          const isValid = record &&\n            typeof record.timestamp === 'number' &&\n            typeof record.activeSpeaker === 'string' &&\n            typeof record.talkContent === 'string';\n\n          if (!isValid) {\n            console.warn('Invalid record:', record);\n          }\n          return isValid;\n        }).map(record => ({\n          ...record,\n          activeSpeaker: record.activeSpeaker || 'Unknown Speaker',\n          talkContent: record.talkContent || '',\n        }));\n\n        setDayViewMessages(validRecords as ExtendedTranscript[]);\n      } catch (error) {\n        console.error('Failed to load day view messages:', error);\n      } finally {\n        setDayViewLoading(false);\n      }\n    } else {\n      setDayViewMessages([]);\n    }\n  }, [datesWithMessages]);\n\n  const handleDateSelect = async (date: Dayjs) => {\n    setCurrentDate(date);\n    \n    if (activeTab === 'day') {\n      loadDayViewMessages(date);\n      return;\n    }\n    \n    const dateStr = date.format('YYYY-MM-DD');\n    if (datesWithMessages.has(dateStr)) {\n      try {\n        setLoading(true);\n        setSelectedDate(date);\n        const storage = StorageFactory.getInstance().getProvider();\n        const records = await storage.getRecords(date);\n        console.log('Retrieved records:', records);\n\n        const validRecords = records.filter(record => {\n          const isValid = record &&\n            typeof record.timestamp === 'number' &&\n            typeof record.activeSpeaker === 'string' &&\n            typeof record.talkContent === 'string';\n\n          if (!isValid) {\n            console.warn('Invalid record:', record);\n          }\n          return isValid;\n        }).map(record => ({\n          ...record,\n          activeSpeaker: record.activeSpeaker || 'Unknown Speaker',\n          talkContent: record.talkContent || '',\n        }));\n\n        console.log('Processed records:', validRecords);\n        setMessages(validRecords as ExtendedTranscript[]);\n        setModalVisible(true);\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const formatTime = (timestamp: number) => {\n    return dayjs(timestamp).format('HH:mm:ss');\n  };\n\n  const handlePrevMonth = () => {\n    setCurrentDate(currentDate.subtract(1, 'month'));\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(currentDate.add(1, 'month'));\n  };\n\n  const handlePrevDay = () => {\n    setCurrentDate(currentDate.subtract(1, 'day'));\n  };\n\n  const handleNextDay = () => {\n    setCurrentDate(currentDate.add(1, 'day'));\n  };\n\n  const _handlePanelChange = (date: Dayjs, mode: CalendarMode) => {\n    setCurrentDate(date);\n    setViewMode(mode);\n  };\n\n  const _handleTabChange = (key: string) => {\n    setActiveTab(key);\n  };\n\n  // 自定义日历头部，添加月份切换按钮\n  const _headerRender = ({ value, _type, _onChange, onTypeChange }) => {\n    const current = value.clone();\n    \n    return (\n      <div style={{ padding: '8px 0', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Space>\n          <Button icon={<LeftOutlined />} onClick={handlePrevMonth} />\n          <Button>{current.format('YYYY-MM')}</Button>\n          <Button icon={<RightOutlined />} onClick={handleNextMonth} />\n        </Space>\n        \n        <Radio.Group \n          value={viewMode} \n          onChange={(e) => onTypeChange(e.target.value)}\n          optionType=\"button\" \n          buttonStyle=\"solid\"\n        >\n          <Radio.Button value=\"month\">Month</Radio.Button>\n          <Radio.Button value=\"year\">Year</Radio.Button>\n        </Radio.Group>\n      </div>\n    );\n  };\n\n  const _renderDayView = () => {\n    return (\n      <div style={{ padding: '16px' }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n          <Space>\n            <Button icon={<LeftOutlined />} onClick={handlePrevDay} />\n            <Button>{currentDate.format('YYYY-MM-DD')}</Button>\n            <Button icon={<RightOutlined />} onClick={handleNextDay} />\n          </Space>\n          \n          <Text type=\"secondary\">\n            {datesWithMessages.has(currentDate.format('YYYY-MM-DD')) \n              ? 'Chat records available for this date' \n              : 'No chat records for this date'}\n          </Text>\n        </div>\n        \n        <Spin spinning={dayViewLoading}>\n          {dayViewMessages.length > 0 ? (\n            <List\n              itemLayout=\"vertical\"\n              dataSource={dayViewMessages}\n              renderItem={(message) => (\n                <List.Item style={{ padding: '8px 0' }}>\n                  <List.Item.Meta\n                    title={<Text strong>{message.activeSpeaker}</Text>}\n                    description={formatTime(message.timestamp)}\n                    style={{ marginBottom: '4px' }}\n                  />\n                  <div style={{\n                    backgroundColor: '#f5f5f5',\n                    padding: '8px',\n                    borderRadius: '4px',\n                    marginTop: '4px',\n                    fontSize: '14px'\n                  }}>\n                    {message.talkContent}\n                  </div>\n                </List.Item>\n              )}\n              style={{\n                maxHeight: '70vh',\n                overflowY: 'auto',\n                padding: '0 8px'\n              }}\n            />\n          ) : (\n            <Empty description={`No messages for ${currentDate.format('YYYY-MM-DD')}`} />\n          )}\n        </Spin>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ padding: \"8px\", maxWidth: \"100%\", margin: \"0\" }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n        <Title level={3} style={{ margin: 0 }}>\n          Chat History Calendar\n        </Title>\n        <Button \n          type=\"primary\"\n          onClick={loadDatesWithMessages}\n          loading={loading}\n          icon={<DatabaseOutlined />}\n        >\n          Refresh\n        </Button>\n      </div>\n\n      <Card bodyStyle={{ padding: \"12px\" }}>\n        <Spin spinning={loading}>\n          <Calendar\n            fullscreen={false}\n            dateCellRender={(date) => {\n              const dateStr = date.format('YYYY-MM-DD');\n              if (datesWithMessages.has(dateStr)) {\n                return (\n                  <div style={{\n                    height: '100%',\n                    background: 'rgba(26, 115, 232, 0.1)',\n                    border: '1px solid #1a73e8',\n                    borderRadius: '4px',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                  }}>\n                    <div>{date.date()}</div>\n                    <Badge status=\"processing\" text=\"Chat Records\" style={{ fontSize: '11px' }} />\n                  </div>\n                );\n              }\n              return date.date();\n            }}\n            onSelect={handleDateSelect}\n            style={{ \n              backgroundColor: 'white',\n              padding: '12px',\n              borderRadius: '8px',\n            }}\n          />\n        </Spin>\n      </Card>\n\n      <Modal\n        title={`Chat History - ${selectedDate?.format('YYYY-MM-DD')}`}\n        open={modalVisible}\n        onCancel={() => setModalVisible(false)}\n        footer={null}\n        width=\"80%\"\n        style={{ top: 20 }}\n        bodyStyle={{ padding: '12px' }}\n      >\n        {messages.length > 0 ? (\n          <List\n            itemLayout=\"vertical\"\n            dataSource={messages}\n            renderItem={(message) => (\n              <List.Item style={{ padding: '8px 0' }}>\n                <List.Item.Meta\n                  title={<Text strong>{message.activeSpeaker}</Text>}\n                  description={formatTime(message.timestamp)}\n                  style={{ marginBottom: '4px' }}\n                />\n                <div style={{ \n                  backgroundColor: '#f5f5f5',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  marginTop: '4px',\n                  fontSize: '14px'\n                }}>\n                  {message.talkContent}\n                </div>\n              </List.Item>\n            )}\n            style={{ \n              maxHeight: '70vh',\n              overflowY: 'auto',\n              padding: '0 8px'\n            }}\n          />\n        ) : (\n          <Empty description=\"No messages found for this date\" />\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default LocalStorageViewer;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/UILanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/backup-and-restore.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_props' is defined but never used.","line":18,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":41,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button, Upload } from 'antd';\nimport { CloudUploadOutlined, CloudDownloadOutlined } from '@ant-design/icons';\nimport getMeetingCaptions from '../utils/getCaptions';\nimport save from '../utils/save';\nimport getFileData from '../utils/get-file-data';\nimport isRestoreDataValid from '../utils/is-resetore-data-valid';\nimport type { Transcript } from '../hooks/useTranscripts';\nimport { useI18n } from '../utils/i18n';\nimport { useDateContext } from '../contexts/DateContext';\nimport messageManager from '../utils/message-manager';\n\ninterface BackupAndRestoreInterface {\n    onBackup?: () => void;\n    onRestore?: () => void;\n}\n\nconst BackupAndRestore = (_props: BackupAndRestoreInterface) => {\n    const { t } = useI18n();\n    const { selectedDate } = useDateContext();\n\n    const backup = () => {\n        getMeetingCaptions(selectedDate).then((res) => {\n            save(JSON.stringify(res), 'captions.json');\n        })\n    }\n    const handleUploadChange = (res) => {\n        getFileData(res.file).then((fileString: string) => {\n            isRestoreDataValid(fileString).then((captions: Transcript[]) => {\n                console.log('import data', captions)\n                if (captions.length > 0) {\n                    chrome.runtime.sendMessage({\n                        action: 'restoreRecords',\n                        data: captions\n                    });\n                    messageManager.success(t('success'));\n                } else {\n                    messageManager.error(t('no_meeting_data'));\n                }\n\n            }).catch((_e) => {\n                messageManager.error(t('error'));\n            })\n        }).catch((e) => {\n            messageManager.error(e.message)\n        });\n    }\n\n    return (\n        <div>\n            <div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>\n                <Button\n                    type=\"primary\"\n                    icon={<CloudDownloadOutlined />}\n                    onClick={backup}\n                    size=\"small\"\n                >\n                    {t('backup')}\n                </Button>\n                <Upload\n                    accept=\".json\"\n                    beforeUpload={() => false}\n                    onChange={handleUploadChange}\n                    showUploadList={false}\n                >\n                    <Button\n                        icon={<CloudUploadOutlined />}\n                        size=\"small\"\n                    >\n                        {t('restore')}\n                    </Button>\n                </Upload>\n            </div>\n        </div>\n    );\n};\n\nexport default BackupAndRestore;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/CaptionContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/FilterSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/SearchBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[251,254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[251,254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[525,528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[525,528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button, Input } from 'antd';\nimport { SearchOutlined, UpOutlined, DownOutlined, CloseOutlined } from '@ant-design/icons';\n\ninterface SearchBarProps {\n  searchText: string;\n  searchVisible: boolean;\n  searchResults: any[];\n  currentMatch: number;\n  onSearchTextChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSearch: () => void;\n  onPrevMatch: () => void;\n  onNextMatch: () => void;\n  onToggleSearch: () => void;\n  onClearSearch: () => void;\n  searchInputRef: React.RefObject<any>;\n}\n\nconst SearchBar: React.FC<SearchBarProps> = ({\n  searchText,\n  searchVisible,\n  searchResults,\n  currentMatch,\n  onSearchTextChange,\n  onSearch,\n  onPrevMatch,\n  onNextMatch,\n  onToggleSearch,\n  onClearSearch,\n  searchInputRef\n}) => {\n  return (\n    <div className={`search-bar ${searchVisible ? 'visible' : ''}`}>\n      <div className=\"search-input-container\">\n        <SearchOutlined className=\"search-icon\" />\n        <Input\n          ref={searchInputRef}\n          placeholder=\"Search in messages...\"\n          value={searchText}\n          onChange={onSearchTextChange}\n          onPressEnter={onSearch}\n          className=\"search-input\"\n          autoFocus={searchVisible}\n          suffix={\n            searchText ? (\n              <CloseOutlined\n                onClick={onClearSearch}\n                className=\"clear-icon\"\n              />\n            ) : null\n          }\n        />\n        <span className=\"match-counter\">\n          {searchResults.length > 0 ? `${currentMatch}/${searchResults.length}` : ''}\n        </span>\n        <Button\n          icon={<UpOutlined />}\n          onClick={onPrevMatch}\n          className=\"nav-button\"\n          disabled={searchResults.length === 0}\n        />\n        <Button\n          icon={<DownOutlined />}\n          onClick={onNextMatch}\n          className=\"nav-button\"\n          disabled={searchResults.length === 0}\n        />\n        <Button\n          icon={<CloseOutlined />}\n          onClick={onToggleSearch}\n          className=\"close-button\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(SearchBar); ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/caption.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/captionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/captions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/components/AIAnswerSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/components/AutoTranslationSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/components/CaptionActionButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/components/CaptionHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/components/CaptionTimestamp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/filterUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[837,840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[837,840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[860,863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[860,863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\nimport dayjs from 'dayjs';\n\n/**\n * 创建一个记忆化的查找映射，用于快速检查值是否存在\n * @param values 值数组\n * @returns 查找映射对象\n */\nexport const createLookupMap = <T extends string | number>(values: T[]): Record<T, boolean> => {\n  const map: Record<T, boolean> = {} as Record<T, boolean>;\n  for (let i = 0; i < values.length; i++) {\n    map[values[i]] = true;\n  }\n  return map;\n};\n\n/**\n * 根据日期格式化时间戳\n * @param timestamp 时间戳\n * @param format 日期格式\n * @returns 格式化后的日期字符串\n */\nexport const formatDate = (timestamp: number | string, format = 'YYYY-MM-DD'): string => {\n  return dayjs(timestamp).format(format);\n};\n\n/**\n * 自定义Hook: 高效筛选转录数据\n * @param transcripts 原始转录数据\n * @param selectedDate 选中的日期\n * @param filterSpeakers 筛选的发言人\n * @param selectedMeeting 选中的会议\n * @returns 筛选后的数据\n */\nexport const useTranscriptFilter = (\n  transcripts: any[],\n  selectedDate: any,\n  filterSpeakers: string[],\n  selectedMeeting: string\n) => {\n  // 创建发言人查找映射\n  const speakerLookup = useMemo(() => {\n    return filterSpeakers.length > 0 ? createLookupMap(filterSpeakers) : null;\n  }, [filterSpeakers]);\n\n  // 日期格式化\n  const targetDate = useMemo(() => {\n    return selectedDate ? selectedDate.format('YYYY-MM-DD') : null;\n  }, [selectedDate]);\n\n  // 一次性筛选所有条件\n  return useMemo(() => {\n    // 如果没有任何筛选条件，直接返回原始数据\n    if (!targetDate && !speakerLookup && !selectedMeeting) {\n      return transcripts;\n    }\n\n    // 使用 for 循环代替 filter 方法，减少函数调用和数组创建\n    const result = [];\n    const len = transcripts.length;\n    \n    for (let i = 0; i < len; i++) {\n      const transcript = transcripts[i];\n      \n      // 日期筛选\n      if (targetDate) {\n        const transcriptDate = formatDate(transcript.timestamp);\n        if (transcriptDate !== targetDate) continue;\n      }\n      \n      // 发言人筛选\n      if (speakerLookup && !speakerLookup[transcript.activeSpeaker]) {\n        continue;\n      }\n      \n      // 会议名称筛选\n      if (selectedMeeting && transcript.meetingName !== selectedMeeting) {\n        continue;\n      }\n      \n      // 通过所有筛选条件，添加到结果\n      result.push(transcript);\n    }\n    \n    return result;\n  }, [transcripts, targetDate, speakerLookup, selectedMeeting]);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/useAIInteraction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/useCaptionText.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/useFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/useLanguageDetection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/useSearch.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearSearch'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [clearSearch]","fix":{"range":[1029,1031],"text":"[clearSearch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport type { RefObject, ChangeEvent } from 'react';\nimport { findAndHighlightMatches, clearHighlights, scrollToMatch } from '../searchUtils';\n\n/**\n * 处理字幕搜索的自定义Hook\n */\nexport const useSearch = (containerRef: RefObject<HTMLElement>) => {\n  const [searchText, setSearchText] = useState('');\n  const [searchResults, setSearchResults] = useState<HTMLElement[]>([]);\n  const [currentMatch, setCurrentMatch] = useState(0);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchVisible, setSearchVisible] = useState(false);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // 切换搜索框显示状态\n  const toggleSearch = useCallback(() => {\n    setSearchVisible(prev => {\n      const newState = !prev;\n      if (newState) {\n        // 当搜索框显示时，聚焦输入框\n        setTimeout(() => {\n          searchInputRef.current?.focus();\n        }, 100);\n      } else {\n        // 当搜索框隐藏时，清除搜索和高亮\n        clearSearch();\n      }\n      return newState;\n    });\n  }, []);\n\n  // 处理搜索文本变化\n  const handleSearchTextChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value);\n    // 确保输入框保持焦点\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, []);\n\n  // 清除搜索\n  const clearSearch = useCallback(() => {\n    setSearchText('');\n    setSearchResults([]);\n    setCurrentMatch(0);\n    setIsSearchActive(false);\n\n    // 使用工具函数清除高亮\n    if (containerRef.current) {\n      clearHighlights(containerRef.current);\n    }\n\n    // 清除后保持输入框焦点\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [containerRef]);\n\n  // 搜索功能\n  const handleSearch = useCallback(() => {\n    if (!searchText.trim() || !containerRef.current) {\n      setSearchResults([]);\n      setCurrentMatch(0);\n      setIsSearchActive(false);\n      return;\n    }\n\n    setIsSearchActive(true);\n\n    // 使用工具函数查找并高亮匹配项\n    const results = findAndHighlightMatches(containerRef.current, searchText);\n    setSearchResults(results as HTMLElement[]); // 类型断言为HTMLElement[]\n\n    // 如果有匹配项，滚动到第一个匹配项\n    if (results.length > 0) {\n      setCurrentMatch(1);\n      scrollToMatch(results[0] as HTMLElement); // 类型断言\n    }\n\n    // 确保搜索后输入框仍然保持焦点\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [searchText, containerRef]);\n\n  // 导航到下一个匹配项\n  const goToNextMatch = useCallback(() => {\n    if (searchResults.length === 0) return;\n\n    const nextMatch = currentMatch % searchResults.length + 1;\n    setCurrentMatch(nextMatch);\n    scrollToMatch(searchResults[nextMatch - 1]);\n\n    // 保持输入框焦点\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [currentMatch, searchResults]);\n\n  // 导航到上一个匹配项\n  const goToPrevMatch = useCallback(() => {\n    if (searchResults.length === 0) return;\n\n    let prevMatch = currentMatch - 1;\n    if (prevMatch === 0) prevMatch = searchResults.length;\n    setCurrentMatch(prevMatch);\n    scrollToMatch(searchResults[prevMatch - 1]);\n\n    // 保持输入框焦点\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [currentMatch, searchResults]);\n\n  // 当搜索文本变化时，重置搜索结果\n  useEffect(() => {\n    if (!searchText.trim()) {\n      setSearchResults([]);\n      setCurrentMatch(0);\n      setIsSearchActive(false);\n    }\n  }, [searchText]);\n\n  // 处理键盘事件\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Ctrl+F 或 Command+F 打开搜索\n      if ((e.ctrlKey || e.metaKey) && e.key === 'f') {\n        e.preventDefault();\n        setSearchVisible(true);\n        setTimeout(() => {\n          searchInputRef.current?.focus();\n        }, 100);\n      }\n\n      // Escape 关闭搜索\n      if (e.key === 'Escape' && searchVisible) {\n        setSearchVisible(false);\n        clearSearch();\n      }\n\n      // Enter 执行搜索\n      if (e.key === 'Enter' && searchVisible && document.activeElement === searchInputRef.current) {\n        e.preventDefault();\n        handleSearch();\n      }\n\n      // F3 或 Enter 查找下一个\n      if ((e.key === 'F3' || (e.key === 'Enter' && e.shiftKey === false)) && isSearchActive) {\n        e.preventDefault();\n        goToNextMatch();\n      }\n\n      // Shift+F3 或 Shift+Enter 查找上一个\n      if ((e.key === 'F3' && e.shiftKey) || (e.key === 'Enter' && e.shiftKey) && isSearchActive) {\n        e.preventDefault();\n        goToPrevMatch();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [searchVisible, isSearchActive, handleSearch, goToNextMatch, goToPrevMatch, clearSearch]);\n\n  return {\n    searchText,\n    searchVisible,\n    searchResults,\n    currentMatch,\n    isSearchActive,\n    searchInputRef,\n    handleSearchTextChange,\n    handleSearch,\n    goToNextMatch,\n    goToPrevMatch,\n    toggleSearch,\n    clearSearch\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/hooks/useTranslation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clickableElement' is assigned a value but never used.","line":68,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { getCurrentTranslationProvider } from '../../../hooks/useTranslationProvider';\nimport { translateByGoogle, translateByMicrosoft, translateByAI } from '../../../utils/translators';\nimport { setTranslatedWords } from '../../../utils/translate';\nimport messageManager from '../../../utils/message-manager';\n\nexport const useTranslation = () => {\n    // Success and error message handlers\n    const success = useCallback((res: string) => {\n        messageManager.success(res, 5);\n    }, []);\n\n    const error = useCallback((res: string) => {\n        messageManager.error(res, 5);\n    }, []);\n\n    // Generic translation function\n    const translateText = useCallback(async (text: string): Promise<string> => {\n        const provider = await getCurrentTranslationProvider();\n        console.log(`[translateText] Using provider: ${provider}`);\n        \n        switch (provider) {\n            case 'google':\n                return await translateByGoogle(text);\n            case 'microsoft':\n                return await translateByMicrosoft(text);\n            case 'ai':\n            default:\n                return await translateByAI(text);\n        }\n    }, []);\n\n    // Handle word click translation\n    const handleWordClick = useCallback(async (\n        event: React.MouseEvent,\n        fallbackContent: string\n    ) => {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        const target = event.target as HTMLElement;\n        \n        // Check if clicked element is a word span or highlighted b tag\n        let clickableElement = target;\n        let word = '';\n        \n        // If clicked on highlighted b tag, find parent clickable-word span\n        if (target.classList.contains('highlight')) {\n            let parent = target.parentElement;\n            while (parent && !parent.classList.contains('clickable-word')) {\n                parent = parent.parentElement;\n            }\n            if (parent && parent.classList.contains('clickable-word')) {\n                clickableElement = parent;\n                word = parent.getAttribute('data-word') || '';\n            } else {\n                word = target.textContent || '';\n            }\n        } else if (target.classList.contains('clickable-word')) {\n            word = target.getAttribute('data-word') || '';\n        } else {\n            // Look up for clickable-word parent element\n            let parent = target.parentElement;\n            while (parent && !parent.classList.contains('clickable-word')) {\n                parent = parent.parentElement;\n            }\n            if (parent && parent.classList.contains('clickable-word')) {\n                clickableElement = parent;\n                word = parent.getAttribute('data-word') || '';\n            }\n        }\n        \n        if (word && word.trim()) {\n            try {\n                console.log(`Clicked word: ${word}`);\n                // Save the word to translation history first\n                setTranslatedWords(word.replace(\".\", ''));\n                \n                const translatedText = await translateText(word);\n                success(`${word} → ${translatedText}`);\n                \n            } catch (err) {\n                console.error('Unexpected error in handleWordClick:', err);\n                const errorMessage = typeof err === 'string' ? err : \n                                   err?.message || 'Translation failed';\n                error(errorMessage);\n            }\n        } else {\n            // If no word found, translate the entire sentence\n            try {\n                const translatedText = await translateText(fallbackContent);\n                success(translatedText);\n            } catch (err) {\n                console.error('Unexpected error in handleWordClick sentence translation:', err);\n                const errorMessage = typeof err === 'string' ? err : \n                                   err?.message || 'Translation failed';\n                error(errorMessage);\n            }\n        }\n    }, [translateText, success, error]);\n\n    // Handle text selection translation\n    const handleTextSelection = useCallback(async () => {\n        const selection = window.getSelection();\n        const selectedText = selection?.toString().trim();\n\n        if (selectedText && selectedText.length > 0) {\n            try {\n                console.log(`Selected text: ${selectedText}`);\n                const translatedText = await translateText(selectedText);\n                success(`${selectedText} → ${translatedText}`);\n            } catch (err) {\n                console.error('Unexpected error in handleTextSelection:', err);\n                const errorMessage = typeof err === 'string' ? err : \n                                   err?.message || 'Translation failed';\n                error(errorMessage);\n            }\n        }\n    }, [translateText, success, error]);\n\n    // Handle manual translation\n    const handleManualTranslation = useCallback(async (content: string): Promise<string> => {\n        try {\n            return await translateText(content);\n        } catch (err) {\n            console.error('Translation error:', err);\n            const errorMessage = typeof err === 'string' ? err : \n                               err?.message || 'Translation failed';\n            messageManager.error(errorMessage, 5);\n            throw err;\n        }\n    }, [translateText]);\n\n    return {\n        handleWordClick,\n        handleTextSelection,\n        handleManualTranslation\n    };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/searchUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/captions/utils/scrollUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/common/StyledTitle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'token' is assigned a value but never used.","line":17,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography, theme } from 'antd';\n\nconst { Title, Text } = Typography;\nconst { useToken } = theme;\n\ninterface StyledTitleProps {\n  children: React.ReactNode;\n  subtitle?: string;\n}\n\n/**\n * 统一的标题组件，用于所有选项卡页面\n * 采用与AI Settings相同的左对齐样式\n */\nconst StyledTitle: React.FC<StyledTitleProps> = ({ children, subtitle }) => {\n  const { token } = useToken();\n  \n  return (\n    <div style={{ padding: \"20px 30px\", borderBottom: \"1px solid #f0f0f0\", marginBottom: \"30px\" }}>\n      <Title level={3} style={{ margin: 0, fontWeight: \"bold\", color: \"#333\" }}>\n        {children}\n      </Title>\n      {subtitle && (\n        <Text type=\"secondary\" style={{ fontSize: \"16px\" }}>\n          {subtitle}\n        </Text>\n      )}\n    </div>\n  );\n};\n\nexport default StyledTitle; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/extension.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":2,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is defined but never used.","line":2,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'message' is defined but never used.","line":2,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used.","line":24,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":144,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6793,6796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6793,6796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9345,9348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9345,9348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":301,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11543,11546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11543,11546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PlusOutlined, TagOutlined, GlobalOutlined, CloudSyncOutlined, FileTextOutlined, QuestionCircleOutlined } from \"@ant-design/icons\"\nimport {Alert, Button, Input, Tag, theme, type InputRef, Modal, message, Typography, Divider, Select} from \"antd\"\nimport { TweenOneGroup } from \"rc-tween-one\"\nimport { useEffect, useRef, useState } from \"react\"\nimport dayjs from 'dayjs';\n\nimport { Actions } from \"~components/captions/types\"\nimport askAI from \"../utils/askAI\"\nimport {getDomain, getDomainTags, getSpecificTags} from \"../utils/common\";\nimport BackupAndRestore from \"~components/backup-and-restore\";\nimport { useI18n } from '../utils/i18n';\nimport getMeetingCaptions from '../utils/getCaptions';\nimport { useDateContext } from '../contexts/DateContext';\nimport saveChatLogAsTxt from '../utils/save';\nimport messageManager from '../utils/message-manager';\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\ninterface ExtensionPropsInterface {\n    jumpToCaptions?: () => void;\n}\n\nconst Extension = (props: ExtensionPropsInterface) => {\n    const { t } = useI18n();\n    const [specificTags, setTags] = useState([]);\n    const [domain, setDomain] = useState('');\n    const [modalData, setModalData] = useState([]);\n    const [domainTags, setDomainTags] = useState([]);\n    const [inputVisible, setInputVisible] = useState(false);\n    const [inputValue, setInputValue] = useState('');\n\n    const inputRef = useRef<InputRef>(null);\n    const [highlightWordsByDescriptions, setHighlightWordsByDescriptions] = useState('');\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isExportModalOpen, setIsExportModalOpen] = useState(false);\n    const [meetingNames, setMeetingNames] = useState<string[]>([]);\n    const [selectedExportMeeting, setSelectedExportMeeting] = useState<string>('');\n    const { selectedDate } = useDateContext();\n\n    useEffect(() => {\n        getSpecificTags().then((res: string[]) => {\n            setTags(res);\n        });\n\n        getDomainTags().then((res: string[]) => {\n            setDomainTags(res);\n        });\n\n        getDomain().then((res: string) => {\n            setDomain(res);\n        });\n    }, []);\n\n    useEffect(() => {\n        chrome.storage.local.set({ specificHighlightWords: specificTags }, function() {\n            console.log('specificTags is set to ' + specificTags);\n        });\n        chrome.storage.local.set({ highlightWordsByDescriptions: domainTags }, function() {\n            console.log('domainTags is set to ' + domainTags);\n        });\n        chrome.storage.local.set({ domain: domain }, function() {\n            console.log('domain is set to ' + domain);\n        });\n\n    }, [specificTags, domainTags, domain]);\n\n    useEffect(() => {\n        if (inputVisible) {\n            inputRef.current?.focus();\n        }\n    }, [inputVisible]);\n\n    const handleClose = (removedTag: string) => {\n        const newTags = specificTags.filter((tag) => tag !== removedTag);\n        console.log(newTags);\n        setTags(newTags);\n    };\n\n    const showInput = () => {\n        setInputVisible(true);\n    };\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleInputConfirm = () => {\n        if (inputValue && specificTags.indexOf(inputValue) === -1) {\n            setTags([...specificTags, inputValue]);\n        }\n        setInputVisible(false);\n        setInputValue('');\n    };\n\n    const forMap = (tag: string) => (\n        <span key={tag} style={{ display: 'inline-block' }}>\n      <Tag\n          closable\n          onClose={(e) => {\n              e.preventDefault();\n              handleClose(tag);\n          }}\n      >\n        {tag}\n      </Tag>\n    </span>\n    );\n\n    const removeHighlightWordInDomainTags = (word: string) => {\n        const newDomainTags = domainTags.filter((tag) => tag !== word);\n        setDomainTags(newDomainTags);\n    };\n    const forMapDomain = (tag: string) => (\n        <span key={tag} style={{ display: 'inline-block' }}>\n      <Tag\n          closable\n          onClose={(e) => {\n              e.preventDefault();\n              removeHighlightWordInDomainTags(tag);\n          }}\n      >\n        {tag}\n      </Tag>\n    </span>\n    );\n\n    const tagChild = specificTags.map(forMap);\n    const domainTagChild = domainTags.map(forMapDomain);\n\n\n    const preview = () => {\n        askAI(Actions.DEFAULT, `请直接返回一份Array数据，这个Array的每一个值都是单词或者单词缩写,我对这份数据的要求是: ${highlightWordsByDescriptions}，这份数据所属的行业是${domain}`).then((res) => {\n            console.log('res', res);\n            const stringWithOutJsonSymbol = res.replaceAll('```json', '').replaceAll('```', '');\n            try {\n                const data = JSON.parse(stringWithOutJsonSymbol);\n                if (Array.isArray(data)) {\n                    setModalData([...new Set(data)]);\n                    showModal()\n                } else {\n                    messageManager.error('the response is not json array');\n                }\n            } catch (e) {\n                messageManager.error('the response is not json valid');\n            }\n\n\n        })\n    }\n\n    const showModal = () => {\n        setIsModalOpen(true);\n    };\n\n    const handleOk = () => {\n        setIsModalOpen(false);\n        setDomainTags(modalData);\n    };\n\n    const handleCancel = () => {\n        setIsModalOpen(false);\n    };\n    const removeHighlightWordInModalData = (word: string) => {\n        const newModalData = modalData.filter((tag) => tag !== word);\n        setModalData(newModalData);\n    };\n\n    // 处理导出会议聊天记录为txt文件\n    const handleExportCaptionsText = () => {\n        // 获取当前选择日期的会议记录\n        getMeetingCaptions(selectedDate).then((transcripts) => {\n            // 提取会议名称列表\n            const uniqueMeetingNames = Array.from(new Set(\n                transcripts\n                    .filter(t => dayjs(t.timestamp).format('YYYY-MM-DD') === selectedDate.format('YYYY-MM-DD'))\n                    .map(t => t.meetingName || '')\n                    .filter(name => name.trim() !== '')\n            ));\n            \n            // 如果没有会议记录\n            if (uniqueMeetingNames.length === 0) {\n                messageManager.warning(t('no_meeting_data_for_export') || 'No meeting data available for export');\n                return;\n            }\n            \n            // 如果只有一个会议，直接导出\n            if (uniqueMeetingNames.length === 1) {\n                exportMeetingCaptions(uniqueMeetingNames[0], transcripts);\n            } else {\n                // 如果有多个会议，弹出选择框\n                setMeetingNames(uniqueMeetingNames);\n                setSelectedExportMeeting(uniqueMeetingNames[0]);\n                setIsExportModalOpen(true);\n            }\n        });\n    };\n    \n    // 导出指定会议的聊天记录\n    const exportMeetingCaptions = (meetingName: string, transcripts: any[]) => {\n        // 筛选指定会议和日期的记录\n        const filteredTranscripts = transcripts.filter(t => \n            t.meetingName === meetingName && \n            dayjs(t.timestamp).format('YYYY-MM-DD') === selectedDate.format('YYYY-MM-DD')\n        );\n        \n        if (filteredTranscripts.length === 0) {\n            messageManager.warning(t('no_data_found') || 'No data found for the selected meeting');\n            return;\n        }\n        \n        // 格式化聊天记录为文本\n        let textContent = `Meeting: ${meetingName}\\nDate: ${selectedDate.format('YYYY-MM-DD')}\\n\\n`;\n        filteredTranscripts.forEach(transcript => {\n            const time = dayjs(transcript.timestamp).format('HH:mm:ss');\n            // 直接使用talkContent作为聊天内容\n            const messageContent = transcript.talkContent || '(no content)';\n            textContent += `[${time}] ${transcript.activeSpeaker || 'Unknown'}: ${messageContent}\\n\\n`;\n        });\n        \n        // 导出为TXT文件\n        const fileName = `${meetingName.replace(/[^a-zA-Z0-9]/g, '_')}_${selectedDate.format('YYYY-MM-DD')}.txt`;\n        saveChatLogAsTxt(textContent, fileName);\n        \n        messageManager.success(t('export_success') || 'Export successful');\n    };\n    \n    // 确认导出选择的会议\n    const handleExportConfirm = () => {\n        setIsExportModalOpen(false);\n        if (selectedExportMeeting) {\n            getMeetingCaptions(selectedDate).then((transcripts) => {\n                exportMeetingCaptions(selectedExportMeeting, transcripts);\n            });\n        }\n    };\n\n    return (\n        <div className={'extension-container'}>\n            <div className={'highlight-setting'}>\n                <div className={'highlight-section'}>\n                    <div className={'highlight-header'}>\n                        <TagOutlined style={{ color: '#1a73e8' }} />\n                        <span>{t('specific_highlight_words')}</span>\n                    </div>\n                    <div className={'highlight-description'}>\n                        {t('specific_highlight_desc')}\n                    </div>\n                \n                    <div className={'highlight-content'}>\n                        <TweenOneGroup\n                            appear={false}\n                            enter={{scale: 0.8, opacity: 0, type: 'from', duration: 100}}\n                            leave={{opacity: 0, width: 0, scale: 0, duration: 200}}\n                            onEnd={(e) => {\n                                if (e.type === 'appear' || e.type === 'enter') {\n                                    (e.target as any).style = 'display: inline-block';\n                                }\n                            }}\n                        >\n                            {tagChild}\n                        </TweenOneGroup>\n                        {inputVisible ? (\n                            <Input\n                                ref={inputRef}\n                                type=\"text\"\n                                size=\"small\"\n                                style={{width: 120}}\n                                value={inputValue}\n                                onChange={handleInputChange}\n                                onBlur={handleInputConfirm}\n                                onPressEnter={handleInputConfirm}\n                                className={'add-more'}\n                                placeholder={t('enter_word')}\n                            />\n                        ) : (\n                            <Tag onClick={showInput} className={'add-more'}>\n                                <PlusOutlined /> {t('add_word')}\n                            </Tag>\n                        )}\n                    </div>\n                </div>\n\n                <div className={'highlight-section'}>\n                    <div className={'highlight-header'}>\n                        <GlobalOutlined style={{ color: '#1a73e8' }} />\n                        <span>{t('domain_specific_highlights')}</span>\n                    </div>\n                    <div className={'highlight-description'}>\n                        {t('domain_specific_desc')}\n                    </div>\n                \n                    <div className=\"highlight-content\">\n                        <Title level={5} style={{ marginBottom: '16px', color: '#2d3748' }}>{t('current_domain_tags')}</Title>\n                        <TweenOneGroup\n                            appear={false}\n                            enter={{scale: 0.8, opacity: 0, type: 'from', duration: 100}}\n                            leave={{opacity: 0, width: 0, scale: 0, duration: 200}}\n                            onEnd={(e) => {\n                                if (e.type === 'appear' || e.type === 'enter') {\n                                    (e.target as any).style = 'display: inline-block';\n                                }\n                            }}\n                        >\n                            {domainTagChild}\n                        </TweenOneGroup>\n                        \n                        <Input \n                            className='domain-inputer'\n                            placeholder={t('domain_placeholder')}\n                            value={domain}\n                            onChange={(v) => {setDomain(v.target.value)}}\n                            prefix={<GlobalOutlined style={{ color: '#a0aec0' }} />}\n                        />\n                        \n                        <TextArea\n                            rows={4}\n                            placeholder={t('keywords_placeholder')}\n                            onChange={(v) => { setHighlightWordsByDescriptions(v.target.value)}}\n                            value={highlightWordsByDescriptions}\n                        />\n                        \n                        <div className=\"valid-words\">\n                            <Button \n                                onClick={preview}\n                                icon={<CloudSyncOutlined />}\n                            >\n                                {t('generate_keywords')}\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"highlight-section\">\n                    <div className={'highlight-header'}>\n                        <FileTextOutlined style={{ color: '#1a73e8' }} />\n                        <span>{t('export_captions_text') || 'Export Captions Text'}</span>\n                    </div>\n                    <div className={'highlight-description'}>\n                        {t('export_captions_desc') || 'Export meeting captions as a text file for the selected date.'}\n                    </div>\n                    <div className=\"highlight-content\">\n                        <Button \n                            onClick={handleExportCaptionsText}\n                            type=\"primary\"\n                            icon={<FileTextOutlined />}\n                            className=\"action-button\"\n                        >\n                            {t('export_captions_button') || 'Export as TXT'}\n                        </Button>\n                    </div>\n                </div>\n\n                <div className=\"highlight-section\">\n                    <div className={'highlight-header'}>\n                        <QuestionCircleOutlined style={{ color: '#1a73e8' }} />\n                        <span>{t('help_and_guide') || 'Help & Guide'}</span>\n                    </div>\n                    <div className={'highlight-description'}>\n                        {t('help_guide_desc') || 'View the welcome guide to learn how to use this extension effectively.'}\n                    </div>\n                    <div className=\"highlight-content\">\n                        <Button \n                            onClick={() => {\n                                chrome.tabs.create({\n                                    url: chrome.runtime.getURL('options.html#welcome')\n                                });\n                            }}\n                            type=\"default\"\n                            icon={<QuestionCircleOutlined />}\n                            className=\"action-button\"\n                        >\n                            {t('open_welcome_guide') || 'Open Welcome Guide'}\n                        </Button>\n                    </div>\n                </div>\n\n                <Divider style={{ margin: '32px 0 24px' }} />\n                \n                <div className=\"backup-restore-container\">\n                    <BackupAndRestore />\n                </div>\n\n                <Modal\n                    title={\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                            <TagOutlined style={{ color: '#1a73e8', fontSize: '20px' }} />\n                            <span>{t('preview_keywords')}</span>\n                        </div>\n                    }\n                    open={isModalOpen}\n                    onOk={handleOk}\n                    onCancel={handleCancel}\n                    okText={t('apply_keywords')}\n                    cancelText={t('cancel')}\n                    className=\"extension-modal\"\n                >\n                    <Text type=\"secondary\" style={{ display: 'block', marginBottom: '16px' }}>\n                        {t('review_keywords')}\n                    </Text>\n                    <div>\n                        {modalData.map((tag) => (\n                            <span key={tag}>\n                                <Tag\n                                    closable\n                                    onClose={(e) => {\n                                        e.preventDefault();\n                                        removeHighlightWordInModalData(tag);\n                                    }}\n                                >\n                                    {tag}\n                                </Tag>\n                            </span>\n                        ))}\n                    </div>\n                </Modal>\n\n                <Modal\n                    title={\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                            <FileTextOutlined style={{ color: '#1a73e8', fontSize: '20px' }} />\n                            <span>{t('select_meeting_to_export') || 'Select Meeting to Export'}</span>\n                        </div>\n                    }\n                    open={isExportModalOpen}\n                    onOk={handleExportConfirm}\n                    onCancel={() => setIsExportModalOpen(false)}\n                    okText={t('export') || 'Export'}\n                    cancelText={t('cancel') || 'Cancel'}\n                    className=\"extension-modal\"\n                >\n                    <Text type=\"secondary\" style={{ display: 'block', marginBottom: '16px' }}>\n                        {t('select_meeting_desc') || 'Please select a meeting to export:'}\n                    </Text>\n                    <Select\n                        style={{ width: '100%' }}\n                        value={selectedExportMeeting}\n                        onChange={(value) => setSelectedExportMeeting(value)}\n                        options={meetingNames.map(name => ({ value: name, label: name }))}\n                    />\n                </Modal>\n            </div>\n        </div>\n    )\n};\n\nexport default Extension\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/BackupSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/ConflictModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/FileDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/FileList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/GoogleAccountInfo.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'isAuthenticated', 'loading', and 'user'. Either include them or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loading, user]","fix":{"range":[1282,1284],"text":"[isAuthenticated, loading, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { Button, Avatar, Dropdown, Space, Spin, Typography, message } from 'antd';\nimport { GoogleOutlined, LogoutOutlined } from '@ant-design/icons';\nimport { useGoogleAuth } from '../../contexts/GoogleAuthContext';\nimport styled from 'styled-components';\nimport type { MenuProps } from 'antd';\n\nconst { Text } = Typography;\n\nconst AccountContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 8px 16px;\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  z-index: 1000;\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  border: 1px solid #e0e0e0;\n  min-width: 180px;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  cursor: pointer;\n  padding: 4px 8px;\n  border-radius: 20px;\n  transition: all 0.3s ease;\n  width: 100%;\n  \n  &:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n`;\n\nconst StyledAvatar = styled(Avatar)`\n  cursor: pointer;\n`;\n\nconst GoogleAccountInfo: React.FC = () => {\n  const { isAuthenticated, user, loading, login, logout } = useGoogleAuth();\n\n  // 组件挂载时记录认证状态\n  useEffect(() => {\n    console.log('GoogleAccountInfo mounted - Auth State:', { isAuthenticated, user, loading });\n  }, []);\n\n  // 监控认证状态变化\n  useEffect(() => {\n    console.log('GoogleAccountInfo - Auth State changed:', { isAuthenticated, user, loading });\n  }, [isAuthenticated, user, loading]);\n\n  const handleLogin = async () => {\n    try {\n      console.log('Attempting to login...');\n      const success = await login();\n      console.log('Login result:', success);\n      \n      if (success) {\n        message.success('Successfully logged in to Google');\n      } else {\n        message.error('Failed to login to Google');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      message.error('Error during login process');\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      console.log('Logging out...');\n      await logout();\n      message.success('Successfully logged out');\n    } catch (error) {\n      console.error('Logout error:', error);\n      message.error('Error during logout process');\n    }\n  };\n\n  if (loading) {\n    return (\n      <AccountContainer>\n        <Space>\n          <Spin size=\"small\" />\n          <Text>Loading account info...</Text>\n        </Space>\n      </AccountContainer>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return (\n      <AccountContainer>\n        <Button \n          type=\"primary\" \n          icon={<GoogleOutlined />} \n          onClick={handleLogin}\n          size=\"middle\"\n          style={{ width: '100%' }}\n        >\n          Login with Google\n        </Button>\n      </AccountContainer>\n    );\n  }\n\n  const items: MenuProps['items'] = [\n    {\n      key: 'email',\n      label: user.email,\n      disabled: true,\n    },\n    {\n      key: 'divider',\n      type: 'divider',\n    },\n    {\n      key: 'logout',\n      label: (\n        <Space>\n          <LogoutOutlined />\n          Sign out\n        </Space>\n      ),\n      onClick: handleLogout,\n    },\n  ];\n\n  return (\n    <AccountContainer>\n      <Dropdown menu={{ items }} placement=\"bottomRight\" arrow trigger={['click']}>\n        <UserInfo>\n          <StyledAvatar src={user.picture} size=\"small\">\n            {!user.picture && user.name.charAt(0).toUpperCase()}\n          </StyledAvatar>\n          <Text strong style={{ flex: 1 }}>{user.name}</Text>\n        </UserInfo>\n      </Dropdown>\n    </AccountContainer>\n  );\n};\n\nexport default GoogleAccountInfo; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/RestoreSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/StyledComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/hooks/useBackupFolder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/hooks/useBackupSync.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/hooks/useConflictResolution.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'driveService' is assigned a value but never used.","line":15,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'resetConflictState'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [resetConflictState]","fix":{"range":[815,817],"text":"[resetConflictState]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\nimport { GoogleDriveService } from '~utils/google-drive';\nimport type { ConflictData } from '../types';\nimport type { ConflictResolutionResult } from '../ConflictModal';\n\n/**\n * 处理冲突解决逻辑\n */\nexport const useConflictResolution = () => {\n  const [conflictModalVisible, setConflictModalVisible] = useState(false);\n  const [currentConflict, setCurrentConflict] = useState<ConflictData | null>(null);\n  const [alwaysOverwrite, setAlwaysOverwrite] = useState(false);\n  const [alwaysSkip, setAlwaysSkip] = useState(false);\n  const [resolveConflict, setResolveConflict] = useState<((result: ConflictResolutionResult) => void) | null>(null);\n  const driveService = GoogleDriveService.getInstance();\n\n  // 组件挂载时重置状态\n  useEffect(() => {\n    resetConflictState();\n  }, []);\n\n  // 添加调试日志，监控状态变化\n  useEffect(() => {\n    console.log('冲突解决状态变化:', { \n      conflictModalVisible, \n      currentConflict, \n      alwaysOverwrite, \n      alwaysSkip \n    });\n  }, [conflictModalVisible, currentConflict, alwaysOverwrite, alwaysSkip]);\n\n  /**\n   * 重置冲突解决状态\n   */\n  const resetConflictState = useCallback(() => {\n    console.log('重置冲突解决状态');\n    setAlwaysOverwrite(false);\n    setAlwaysSkip(false);\n    setConflictModalVisible(false);\n    setCurrentConflict(null);\n    setResolveConflict(null);\n  }, []);\n\n  /**\n   * 处理冲突解决\n   */\n  const handleConflictResolution = useCallback(async (result: ConflictResolutionResult) => {\n    console.log('处理冲突解决:', result);\n    setConflictModalVisible(false);\n\n    // 更新全局状态\n    if (result.alwaysOverwrite) {\n      console.log('设置始终覆盖');\n      setAlwaysOverwrite(true);\n    }\n    if (result.alwaysSkip) {\n      console.log('设置始终跳过');\n      setAlwaysSkip(true);\n    }\n\n    // 调用回调函数\n    if (resolveConflict) {\n      console.log('调用回调函数');\n      resolveConflict(result);\n      setResolveConflict(null);\n    }\n  }, [resolveConflict]);\n\n  /**\n   * 显示冲突解决对话框\n   */\n  const showConflictModal = useCallback((\n    conflict: ConflictData,\n    onResolve: (result: ConflictResolutionResult) => void\n  ) => {\n    console.log('显示冲突解决对话框:', conflict);\n    setCurrentConflict(conflict);\n    setConflictModalVisible(true);\n    setResolveConflict(() => onResolve);\n  }, []);\n\n  return {\n    conflictModalVisible,\n    currentConflict,\n    alwaysOverwrite,\n    alwaysSkip,\n    handleConflictResolution,\n    showConflictModal,\n    resetConflictState\n  };\n};\n\nexport default useConflictResolution;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/hooks/useFileOperations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Space' is defined but never used.","line":2,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used.","line":2,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'backupFolder' is assigned a value but never used.","line":49,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Typography, Button, Space, Divider, Spin } from 'antd';\nimport { GoogleOutlined } from '@ant-design/icons';\nimport BackupSection from './BackupSection';\nimport RestoreSection from './RestoreSection';\nimport ConflictModal from './ConflictModal';\nimport useBackupFolder from './hooks/useBackupFolder';\nimport useConflictResolution from './hooks/useConflictResolution';\nimport useBackupSync from './hooks/useBackupSync';\nimport useFileOperations from './hooks/useFileOperations';\nimport StyledTitle from '~components/common/StyledTitle';\nimport GoogleAccountInfo from './GoogleAccountInfo';\nimport { useGoogleAuth } from '~contexts/GoogleAuthContext';\nimport styled from 'styled-components';\nimport useI18n from \"~utils/i18n\"\n\nconst { Text, Title } = Typography;\n\nconst LoginSection = styled.div`\n  margin: 40px 0;\n  padding: 30px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 60px 0;\n  padding: 40px;\n`;\n\n/**\n * Google Drive集成主组件\n */\nconst GoogleDriveIntegration: React.FC = () => {\n  const { t } = useI18n();\n  // 获取Google认证状态\n  const { isAuthenticated, user, loading, login } = useGoogleAuth();\n\n  // 添加登录状态管理\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [loginSuccess, setLoginSuccess] = useState(false);\n\n  // 使用hooks\n  const {\n    backupFiles,\n    backupFolder,\n    loading: folderLoading,\n    loadBackupFolder,\n    updateFileList\n  } = useBackupFolder();\n\n  const {\n    conflictModalVisible,\n    currentConflict,\n    alwaysOverwrite,\n    alwaysSkip,\n    handleConflictResolution,\n    showConflictModal,\n    resetConflictState\n  } = useConflictResolution();\n\n  // 添加调试日志，监控认证状态\n  useEffect(() => {\n    console.log('GoogleDriveIntegration - 认证状态:', {\n      isAuthenticated,\n      user,\n      loading\n    });\n\n    // 当认证状态变为已认证且不在加载中时，设置登录成功\n    if (isAuthenticated && !loading && isLoggingIn) {\n      setLoginSuccess(true);\n      setIsLoggingIn(false);\n    }\n  }, [isAuthenticated, user, loading, isLoggingIn]);\n\n  // 添加调试日志，监控冲突解决状态\n  useEffect(() => {\n    console.log('GoogleDriveIntegration - 冲突解决状态:', {\n      conflictModalVisible,\n      currentConflict\n    });\n  }, [conflictModalVisible, currentConflict]);\n\n  const {\n    syncing,\n    handleSync\n  } = useBackupSync(\n    showConflictModal,\n    alwaysOverwrite,\n    alwaysSkip,\n    loadBackupFolder,\n    resetConflictState\n  );\n\n  const {\n    loadingFileId,\n    deletingFileId,\n    restoring,\n    handleRestore,\n    handleDeleteFile,\n    handleRestoreAll,\n    handleUpload\n  } = useFileOperations(updateFileList);\n\n  // 删除文件的处理函数（传递当前文件列表）\n  const onDeleteFile = (fileId: string) => {\n    handleDeleteFile(fileId, backupFiles);\n  };\n\n  // 恢复所有文件的处理函数\n  const onRestoreAll = () => {\n    handleRestoreAll(backupFiles);\n  };\n\n  // 处理登录\n  const handleLogin = async () => {\n    console.log('Attempting to login from main component...');\n    setIsLoggingIn(true);\n    setLoginSuccess(false);\n    const success = await login();\n\n    if (!success) {\n      setIsLoggingIn(false);\n    }\n  };\n\n  // 渲染内容\n  const renderContent = () => {\n    // 如果正在登录中，显示加载状态\n    if (isLoggingIn || (loading && isAuthenticated)) {\n      return (\n        <LoadingContainer>\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            marginBottom: '20px'\n          }}>\n            <div style={{\n              fontSize: '36px',\n              marginRight: '15px',\n              width: '60px',\n              height: '60px',\n              background: '#4285f415',\n              borderRadius: '50%',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}>\n              <Spin size=\"large\" />\n            </div>\n            <div>\n              <Title level={4} style={{ margin: 0, fontWeight: 600, color: '#333' }}>\n                Authenticating with Google...\n              </Title>\n              <Text type=\"secondary\" style={{ fontSize: '15px' }}>\n                Please wait while we securely connect to your Google account\n              </Text>\n            </div>\n          </div>\n        </LoadingContainer>\n      );\n    }\n\n    // 如果已认证且登录成功，显示备份和恢复功能\n    if (isAuthenticated && (loginSuccess || user)) {\n      return (\n        <>\n          <Row gutter={[24, 24]}>\n            <Col xs={24} lg={10}>\n              <BackupSection\n                onBackup={handleSync}\n                loading={syncing}\n              />\n            </Col>\n\n            <Col xs={24} lg={14}>\n              <RestoreSection\n                files={backupFiles}\n                loading={folderLoading}\n                restoring={restoring}\n                loadingFileId={loadingFileId}\n                deletingFileId={deletingFileId}\n                onRestoreAll={onRestoreAll}\n                onRestore={handleRestore}\n                onDelete={onDeleteFile}\n                onRefresh={loadBackupFolder}\n                onUpload={handleUpload}\n              />\n            </Col>\n          </Row>\n\n          <ConflictModal\n            visible={conflictModalVisible}\n            conflict={currentConflict}\n            onResolve={handleConflictResolution}\n          />\n        </>\n      );\n    }\n\n    // 如果未认证，显示登录界面\n    return (\n      <LoginSection>\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          marginBottom: '20px'\n        }}>\n          <div style={{\n            fontSize: '36px',\n            marginRight: '15px',\n            width: '60px',\n            height: '60px',\n            background: '#4285f415',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            <GoogleOutlined style={{ fontSize: \"32px\", color: '#4285f4' }} />\n          </div>\n          <div>\n            <Title level={4} style={{ margin: 0, fontWeight: 600, color: '#333' }}>\n              {t('google_drive_access_required')}\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '15px' }}>\n              {t('google_drive_connect_desc')}\n            </Text>\n          </div>\n        </div>\n\n        <div style={{ maxWidth: \"300px\" }}>\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            icon={<GoogleOutlined />}\n            onClick={handleLogin}\n            loading={isLoggingIn}\n            style={{\n              width: \"100%\",\n              height: \"48px\",\n              borderRadius: \"8px\",\n              fontSize: \"16px\",\n              fontWeight: \"500\"\n            }}\n          >\n            {isLoggingIn ? 'Logging in...' : 'Login with Google'}\n          </Button>\n        </div>\n      </LoginSection>\n    );\n  };\n\n  return (\n    <div>\n      <StyledTitle subtitle={t('google_drive_integration_desc')}>{t('google_drive_integration')}</StyledTitle>\n\n      <div style={{ padding: \"0 20px\" }}>\n        {/* Google账号信息 */}\n        <GoogleAccountInfo />\n\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default GoogleDriveIntegration;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/services/BackupService.ts","messages":[{"ruleId":"@typescript-eslint/no-namespace","severity":1,"message":"ES2015 module syntax is preferred over namespaces.","line":10,"column":1,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":18,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[733,736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[733,736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1398,1401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1398,1401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1712,1715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1712,1715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1941,1944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1941,1944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'records' is assigned a value but never used.","line":89,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4233,4236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4233,4236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { message } from 'antd';\nimport dayjs from 'dayjs';\nimport { GoogleDriveService } from \"~utils/google-drive\";\nimport { StorageFactory } from \"~background/data-persistence/storage-factory\";\nimport type { SyncSummary, RestoreResult, ConflictData } from '../types';\nimport type { IGoogleDriveFileContent, IGoogleDriveService } from \"~utils/types/google-drive.types\"\nimport { createJsonFile } from '../../../utils/file-utils';\n\n// 添加gapi类型声明\ndeclare namespace gapi.client.drive {\n  interface File {\n    id?: string;\n    name?: string;\n    mimeType?: string;\n    modifiedTime?: string;\n    size?: string;\n  }\n}\n\n/**\n * 备份服务，封装备份相关的方法\n */\nexport class BackupService {\n  private driveService: IGoogleDriveService;\n  private storage: any;\n\n  constructor() {\n    this.driveService = GoogleDriveService.getInstance();\n    this.storage = StorageFactory.getInstance().getProvider();\n  }\n\n  /**\n   * 确保备份文件夹已加载\n   */\n  private async ensureBackupFolder(): Promise<void> {\n    await this.driveService.getBackupFolder();\n  }\n\n  /**\n   * 获取所有有消息的日期\n   */\n  private async getDatesWithMessages(): Promise<string[]> {\n    return await this.storage.getDaysWithMessages();\n  }\n\n  /**\n   * 获取备份文件列表\n   */\n  private async listBackupFiles(): Promise<gapi.client.drive.File[]> {\n    return await this.driveService.listBackupFiles();\n  }\n\n  /**\n   * 获取本地内容\n   */\n  private async getLocalContent(date: string): Promise<any[]> {\n    return await this.storage.getRecords(dayjs(date));\n  }\n\n  /**\n   * 获取远程内容\n   */\n  private async getRemoteContent(fileId: string): Promise<IGoogleDriveFileContent> {\n    return await this.driveService.downloadFile(fileId);\n  }\n\n  /**\n   * 更新文件\n   */\n  private async updateFile(fileId: string, content: any[], fileName: string): Promise<void> {\n    const file = createJsonFile(content, fileName);\n    await this.driveService.uploadFile(file, fileId);\n  }\n\n  /**\n   * 创建文件\n   */\n  private async createFile(fileName: string, content: any[]): Promise<void> {\n    const file = createJsonFile(content, fileName);\n    await this.driveService.uploadFile(file);\n  }\n\n  /**\n   * 上传文件到Google Drive\n   */\n  async uploadFile(file: File): Promise<boolean> {\n    try {\n      const content = await file.text();\n      const records = JSON.parse(content);\n      const dateMatch = file.name.match(/(\\d{4}-\\d{2}-\\d{2})\\.json/);\n\n      if (!dateMatch) {\n        message.error('Invalid file name format. Expected: YYYY-MM-DD.json');\n        return false;\n      }\n\n      await this.driveService.uploadFile(file);\n      message.success('File uploaded successfully');\n      return true;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      message.error('Failed to upload file. Please ensure it is a valid JSON file.');\n      return false;\n    }\n  }\n\n  /**\n   * 删除Google Drive中的文件\n   */\n  async deleteFile(fileId: string): Promise<boolean> {\n    try {\n      const success = await this.driveService.deleteFile(fileId);\n      if (success) {\n        message.success('File deleted successfully');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 恢复单个文件的记录\n   */\n  async restoreFile(fileId: string, fileName: string): Promise<RestoreResult> {\n    try {\n      const dateMatch = fileName.match(/(\\d{4}-\\d{2}-\\d{2})\\.json/);\n      if (!dateMatch) {\n        message.error('Invalid backup file name format. Expected YYYY-MM-DD.json');\n        return { success: false, date: '', message: 'Invalid file name format' };\n      }\n\n      const dateStr = dateMatch[1];\n      const date = dayjs(dateStr);\n      const fileContent = await this.driveService.downloadFile(fileId);\n\n      await this.storage.restoreRecords(fileContent, date);\n      message.success('Records restored successfully');\n\n      // 通知后台更新数据\n      chrome.runtime.sendMessage({\n        action: 'get-days-with-messages'\n      });\n\n      return { success: true, date: dateStr };\n    } catch (error) {\n      console.error('Error restoring file:', error);\n      message.error('Failed to restore records');\n      return { success: false, date: '', message: 'Failed to restore records' };\n    }\n  }\n\n  /**\n   * 恢复所有文件的记录\n   */\n  async restoreAllFiles(files: any[]): Promise<{ restoredCount: number, failedFiles: string[] }> {\n    let restoredCount = 0;\n    const failedFiles: string[] = [];\n\n    console.log(`Attempting to restore ${files.length} files...`);\n\n    for (const file of files) {\n      try {\n        const dateMatch = file.name.match(/(\\d{4}-\\d{2}-\\d{2})\\.json/);\n        if (!dateMatch) {\n          console.log(`File ${file.name} does not match date pattern, skipping...`);\n          failedFiles.push(file.name);\n          continue;\n        }\n\n        const dateStr = dateMatch[1];\n        console.log(`Restoring file for date: ${dateStr}...`);\n        const date = dayjs(dateStr);\n        const fileContent = await this.driveService.downloadFile(file.id);\n\n        if (!fileContent || (Array.isArray(fileContent) && fileContent.length === 0)) {\n          console.log(`File ${file.name} has no valid content, skipping...`);\n          failedFiles.push(file.name);\n          continue;\n        }\n\n        await this.storage.restoreRecords(fileContent, date);\n        restoredCount++;\n        console.log(`Successfully restored file: ${file.name}`);\n      } catch (error) {\n        console.error(`Failed to restore ${file.name}:`, error);\n        failedFiles.push(file.name);\n      }\n    }\n\n    console.log(`Restore complete. Restored: ${restoredCount}, Failed: ${failedFiles.length}`);\n\n    // 通知后台更新数据\n    chrome.runtime.sendMessage({\n      action: 'get-days-with-messages'\n    });\n\n    return { restoredCount, failedFiles };\n  }\n\n  /**\n   * 将本地数据同步到Google Drive\n   * @param initialAlwaysOverwrite 是否始终覆盖\n   * @param initialAlwaysSkip 是否始终跳过\n   * @param onConflict 冲突处理回调\n   * @returns 同步摘要\n   */\n  async syncToGoogleDrive(\n    initialAlwaysOverwrite: boolean,\n    initialAlwaysSkip: boolean,\n    onConflict: (conflict: ConflictData) => Promise<boolean>\n  ): Promise<SyncSummary> {\n    console.log('开始同步，初始状态:', { initialAlwaysOverwrite, initialAlwaysSkip });\n\n    const summary: SyncSummary = {\n      uploaded: [],\n      skipped: [],\n      totalMessages: 0\n    };\n\n    // 确保已加载备份文件夹\n    await this.ensureBackupFolder();\n\n    // 获取所有有消息的日期\n    const datesWithMessages = await this.getDatesWithMessages();\n    console.log('有消息的日期:', datesWithMessages);\n\n    if (!datesWithMessages || datesWithMessages.length === 0) {\n      console.log('没有需要同步的日期');\n      return summary;\n    }\n\n    // 获取Google Drive中已存在的文件\n    const existingFiles = await this.listBackupFiles();\n    console.log('Google Drive中的文件:', existingFiles);\n\n    const existingFilesMap = new Map<string, gapi.client.drive.File>();\n    existingFiles.forEach(file => {\n      if (file.name) {\n        existingFilesMap.set(file.name, file);\n      }\n    });\n\n    // 处理每个日期的数据\n    for (const date of datesWithMessages) {\n      const fileName = `${date}.json`;\n      const fileExists = existingFilesMap.has(fileName);\n      console.log(`处理日期 ${date}, 文件${fileExists ? '存在' : '不存在'}`);\n\n      // 如果文件已存在\n      if (fileExists) {\n        const existingFile = existingFilesMap.get(fileName)!;\n\n        // 获取本地内容\n        const localContent = await this.getLocalContent(date);\n        if (!Array.isArray(localContent) || localContent.length === 0) {\n          console.log(`日期 ${date} 没有有效内容，跳过`);\n          continue;\n        }\n\n        // 计算本地文件大小\n        const localJson = JSON.stringify(localContent);\n        const localSize = localJson.length;\n        const remoteSize = parseInt(existingFile.size || '0');\n\n        console.log(`日期 ${date} 的文件大小比较:`, {\n          localSize,\n          remoteSize,\n          fileName\n        });\n\n        // 如果文件大小差异在1KB以内，认为是相同的\n        const sizeDiff = Math.abs(localSize - remoteSize);\n        const isSizeEqual = sizeDiff <= 1024; // 1KB = 1024 bytes\n\n        if (isSizeEqual) {\n          console.log(`日期 ${date} 的文件大小差异在1KB以内，视为相同，跳过`);\n          summary.skipped.push(date);\n          continue;\n        }\n\n        // 如果文件大小不同，且不是始终覆盖或始终跳过，则需要处理冲突\n        if (!initialAlwaysOverwrite && !initialAlwaysSkip) {\n          console.log(`日期 ${date} 的文件大小不同，显示冲突解决对话框`);\n          const shouldOverwrite = await onConflict({\n            fileName,\n            localDate: date,\n            localSize,\n            remoteSize,\n            localCount: localContent.length,\n            remoteCount: 0, // 由于我们不再下载远程内容，这里设为0\n            contentEqual: false\n          });\n\n          console.log(`用户选择${shouldOverwrite ? '覆盖' : '跳过'}`);\n          if (!shouldOverwrite) {\n            summary.skipped.push(date);\n            continue;\n          }\n        } else if (initialAlwaysSkip) {\n          console.log(`日期 ${date} 的文件存在且用户选择始终跳过`);\n          summary.skipped.push(date);\n          continue;\n        } else if (initialAlwaysOverwrite) {\n          console.log(`日期 ${date} 的文件存在且用户选择始终覆盖`);\n        }\n\n        // 更新现有文件\n        console.log(`更新日期 ${date} 的文件`);\n        await this.updateFile(existingFile.id!, localContent, fileName);\n        summary.uploaded.push(date);\n        summary.totalMessages += localContent.length;\n      } else {\n        // 文件不存在，创建新文件\n        const content = await this.getLocalContent(date);\n        if (!Array.isArray(content) || content.length === 0) {\n          console.log(`日期 ${date} 没有有效内容，跳过`);\n          continue;\n        }\n\n        console.log(`创建日期 ${date} 的文件`);\n        await this.createFile(fileName, content);\n        summary.uploaded.push(date);\n        summary.totalMessages += content.length;\n      }\n    }\n\n    console.log('同步完成，摘要:', summary);\n    return summary;\n  }\n}\n\n// 导出单例实例\nexport default new BackupService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/google-drive/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/Calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SearchOutlined' is defined but never used.","line":5,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Title' is assigned a value but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Panel' is assigned a value but never used.","line":12,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarContainer' is assigned a value but never used.","line":15,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messageCountCache' is assigned a value but never used.","line":140,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mutations' is defined but never used.","line":331,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'scrollToHighlightedRecord' is assigned a value but never used.","line":383,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSearch' is assigned a value but never used.","line":409,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":409,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { Typography, Button, Modal, Spin, List, message, Card, Collapse, Badge, Empty, Divider, Statistic, Input, Space, Tag } from 'antd';\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\nimport { CalendarOutlined, MessageOutlined, SearchOutlined, LoadingOutlined, HighlightOutlined } from '@ant-design/icons';\nimport { StorageFactory } from '~background/data-persistence/storage-factory';\nimport type { Transcript } from '~hooks/useTranscripts';\nimport StyledTitle from '~components/common/StyledTitle';\nimport { useI18n } from '~utils/i18n';\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Panel } = Collapse;\nconst { Search } = Input;\n\nconst CalendarContainer = styled.div`\n  background: #fff;\n  padding: 24px;\n  min-height: 100vh;\n`;\n\nconst MonthCard = styled(Card)`\n  margin-bottom: 24px;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n  \n  .ant-card-head {\n    background: #f7f7f7;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n  }\n`;\n\nconst DateItem = styled(List.Item)`\n  cursor: pointer;\n  transition: all 0.3s;\n  border-radius: 6px;\n  \n  &:hover {\n    background-color: #f5f5f5;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .ant-badge-count {\n    background-color: #1a73e8;\n    box-shadow: 0 0 0 1px #fff;\n  }\n`;\n\nconst MonthStatistic = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 16px;\n  \n  .ant-statistic {\n    margin-bottom: 0;\n  }\n  \n  .ant-statistic-content {\n    font-size: 14px;\n    color: #1a73e8;\n  }\n`;\n\nconst SearchContainer = styled.div`\n  margin-bottom: 24px;\n  max-width: 600px;\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 48px 0;\n  \n  .loading-text {\n    margin-top: 16px;\n    color: #1a73e8;\n  }\n`;\n\nconst PreviewContainer = styled.div`\n  margin-top: 8px;\n  margin-left: 40px;\n  padding: 8px 12px;\n  background-color: #f9f9f9;\n  border-left: 3px solid #1a73e8;\n  border-radius: 0 4px 4px 0;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #f0f8ff;\n  }\n`;\n\nconst HighlightedText = styled.span`\n  background-color: #ffd54f;\n  padding: 0 2px;\n  border-radius: 2px;\n  font-weight: 500;\n  scroll-margin: 100px;\n  display: inline-block;\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 2;\n`;\n\ninterface ChatDay {\n  date: string; // YYYY-MM-DD\n  formattedDate: string; // 显示用的日期格式\n  dayOfWeek: string; // 星期几\n  messageCount: number; // 消息数量\n  matchedRecords?: MatchedRecord[]; // 匹配的记录\n}\n\ninterface MonthData {\n  month: string; // YYYY-MM\n  formattedMonth: string; // 显示用的月份格式\n  days: ChatDay[];\n  totalMessages: number; // 该月总消息数量\n}\n\ninterface MatchedRecord {\n  transcript: Transcript;\n  matchIndex: number; // 匹配的位置\n  previewText: string; // 预览文本\n}\n\nconst Calendar = () => {\n  const { t } = useI18n();\n  const [monthsData, setMonthsData] = useState<MonthData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [chatRecords, setChatRecords] = useState<Transcript[]>([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [searchText, setSearchText] = useState('');\n  const [contentSearchText, setContentSearchText] = useState('');\n  const [messageCountCache, setMessageCountCache] = useState<Map<string, number>>(new Map());\n  const [allRecordsCache, setAllRecordsCache] = useState<Map<string, Transcript[]>>(new Map());\n  const [isSearchingContent, setIsSearchingContent] = useState(false);\n  const [searchingContentLoading, setSearchingContentLoading] = useState(false);\n  const [highlightedRecordIndex, setHighlightedRecordIndex] = useState<number | null>(null);\n\n  const listItemRefs = useRef<Map<string, HTMLDivElement>>(new Map());\n  const modalContentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    loadChatDays();\n  }, []);\n\n  // 使用 useMemo 来过滤月份数据，提高性能\n  const filteredMonthsData = useMemo(() => {\n    if (!searchText && !contentSearchText) return monthsData;\n\n    return monthsData\n      .map(month => {\n        // 过滤符合搜索条件的日期\n        const filteredDays = month.days.filter(day => {\n          // 如果是按内容搜索，只保留有匹配记录的日期\n          if (contentSearchText) {\n            return day.matchedRecords && day.matchedRecords.length > 0;\n          }\n\n          // 否则按日期或星期几搜索\n          return day.date.includes(searchText) ||\n                 day.dayOfWeek.toLowerCase().includes(searchText.toLowerCase());\n        });\n\n        if (filteredDays.length === 0) return null;\n\n        // 计算过滤后的总消息数\n        const totalMessages = filteredDays.reduce((sum, day) => sum + day.messageCount, 0);\n\n        return {\n          ...month,\n          days: filteredDays,\n          totalMessages\n        };\n      })\n      .filter(Boolean) as MonthData[];\n  }, [monthsData, searchText, contentSearchText]);\n\n  const loadChatDays = async () => {\n    try {\n      setLoading(true);\n      const storage = StorageFactory.getInstance().getProvider();\n      const datesWithMessages = await storage.getDaysWithMessages();\n\n      if (datesWithMessages.length === 0) {\n        setLoading(false);\n        return;\n      }\n\n      // 按月份分组\n      const monthsMap = new Map<string, ChatDay[]>();\n      const messageCountMap = new Map<string, number>();\n      const recordsCache = new Map<string, Transcript[]>();\n\n      // 对日期进行排序（从新到旧）\n      const sortedDates = [...datesWithMessages].sort((a, b) =>\n        dayjs(b).valueOf() - dayjs(a).valueOf()\n      );\n\n      // 获取每个日期的消息数量和记录（使用 Promise.all 并行加载提高性能）\n      const messageCountPromises = sortedDates.map(async (dateStr) => {\n        const records = await storage.getRecords(dayjs(dateStr));\n        recordsCache.set(dateStr, records);\n        return { dateStr, count: records.length };\n      });\n\n      const messageCountResults = await Promise.all(messageCountPromises);\n\n      // 将结果存入 Map\n      messageCountResults.forEach(({ dateStr, count }) => {\n        messageCountMap.set(dateStr, count);\n      });\n\n      // 缓存消息数量和记录，以便后续使用\n      setMessageCountCache(messageCountMap);\n      setAllRecordsCache(recordsCache);\n\n      // 为每个日期创建数据结构并按月份分组\n      for (const dateStr of sortedDates) {\n        const date = dayjs(dateStr);\n        const monthKey = date.format('YYYY-MM');\n\n        const chatDay: ChatDay = {\n          date: dateStr,\n          formattedDate: date.format('DD'),\n          dayOfWeek: date.format('dddd'),\n          messageCount: messageCountMap.get(dateStr) || 0\n        };\n\n        if (!monthsMap.has(monthKey)) {\n          monthsMap.set(monthKey, []);\n        }\n\n        monthsMap.get(monthKey)!.push(chatDay);\n      }\n\n      // 转换为组件所需的数据结构\n      const monthsData: MonthData[] = [];\n\n      for (const [monthKey, days] of monthsMap.entries()) {\n        const monthDate = dayjs(monthKey + '-01');\n        const totalMessages = days.reduce((sum, day) => sum + day.messageCount, 0);\n\n        monthsData.push({\n          month: monthKey,\n          formattedMonth: monthDate.format('MMMM YYYY'),\n          days,\n          totalMessages\n        });\n      }\n\n      setMonthsData(monthsData);\n    } catch (error) {\n      console.error('Failed to load chat days:', error);\n      message.error('Failed to load chat history');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDateClick = async (date: string) => {\n    try {\n      setSelectedDate(date);\n      setModalVisible(true);\n      setModalLoading(true);\n      setHighlightedRecordIndex(null);\n\n      // 清除内容搜索文本\n      setContentSearchText('');\n\n      // 如果缓存中有记录，直接使用缓存\n      if (allRecordsCache.has(date)) {\n        setChatRecords(allRecordsCache.get(date) || []);\n        setModalLoading(false);\n        return;\n      }\n\n      const storage = StorageFactory.getInstance().getProvider();\n      const records = await storage.getRecords(dayjs(date));\n\n      setChatRecords(records);\n    } catch (error) {\n      console.error('Failed to load chat records:', error);\n      message.error('Failed to load chat records');\n    } finally {\n      setModalLoading(false);\n    }\n  };\n\n  const handlePreviewClick = async (date: string, recordIndex: number, searchTerm?: string) => {\n    try {\n      setSelectedDate(date);\n      setModalVisible(true);\n      setModalLoading(true);\n      setHighlightedRecordIndex(recordIndex);\n\n      // 如果有搜索词，设置内容搜索文本\n      if (searchTerm) {\n        setContentSearchText(searchTerm);\n      }\n\n      // 如果缓存中有记录，直接使用缓存\n      if (allRecordsCache.has(date)) {\n        setChatRecords(allRecordsCache.get(date) || []);\n        setModalLoading(false);\n        return;\n      }\n\n      const storage = StorageFactory.getInstance().getProvider();\n      const records = await storage.getRecords(dayjs(date));\n\n      setChatRecords(records);\n    } catch (error) {\n      console.error('Failed to load chat records:', error);\n      message.error('Failed to load chat records');\n    } finally {\n      setModalLoading(false);\n    }\n  };\n\n  // 在模态框打开后，确保滚动到高亮文本\n  useEffect(() => {\n    if (modalVisible && contentSearchText && !modalLoading) {\n      // 创建一个MutationObserver来监听DOM变化\n      const observer = new MutationObserver((mutations) => {\n        const highlightElements = document.querySelectorAll('.highlighted-text');\n        if (highlightElements && highlightElements.length > 0) {\n          // 找到高亮元素后，滚动到它\n          highlightElements[0].scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          // 完成后断开观察器\n          observer.disconnect();\n        }\n      });\n\n      // 开始观察模态框内容的变化\n      if (modalContentRef.current) {\n        observer.observe(modalContentRef.current, {\n          childList: true,\n          subtree: true\n        });\n      }\n\n      // 同时使用定时器作为备份方案\n      const scrollToHighlight = () => {\n        try {\n          const highlightElements = document.querySelectorAll('.highlighted-text');\n          if (highlightElements && highlightElements.length > 0) {\n            highlightElements[0].scrollIntoView({\n              behavior: 'smooth',\n              block: 'center'\n            });\n          }\n        } catch (error) {\n          console.error('Error scrolling to highlight:', error);\n        }\n      };\n\n      // 多次尝试滚动，确保DOM已完全渲染\n      const timers = [\n        setTimeout(scrollToHighlight, 300),\n        setTimeout(scrollToHighlight, 600),\n        setTimeout(scrollToHighlight, 1000)\n      ];\n\n      // 清理函数\n      return () => {\n        observer.disconnect();\n        timers.forEach(timer => clearTimeout(timer));\n      };\n    }\n  }, [modalVisible, contentSearchText, modalLoading]);\n\n  // 滚动到高亮记录\n  const scrollToHighlightedRecord = () => {\n    if (highlightedRecordIndex !== null) {\n      const highlightedElement = listItemRefs.current.get(`record-${highlightedRecordIndex}`);\n      if (highlightedElement && modalContentRef.current) {\n        // 滚动到列表项\n        highlightedElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    }\n\n    // 如果有搜索文本，尝试滚动到高亮文本\n    if (contentSearchText) {\n      setTimeout(() => {\n        const highlightElements = document.querySelectorAll('.highlighted-text');\n        if (highlightElements && highlightElements.length > 0) {\n          highlightElements[0].scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n        }\n      }, 300);\n    }\n  };\n\n  const handleSearch = (value: string) => {\n    setSearchText(value);\n    // 如果内容搜索已激活，则清除内容搜索\n    if (isSearchingContent) {\n      setContentSearchText('');\n      setIsSearchingContent(false);\n    }\n  };\n\n  const handleContentSearch = async (value: string) => {\n    if (!value.trim()) {\n      setContentSearchText('');\n      setIsSearchingContent(false);\n      return;\n    }\n\n    setContentSearchText(value);\n    setIsSearchingContent(true);\n    setSearchText('');\n    setSearchingContentLoading(true);\n\n    try {\n      // 搜索所有日期的聊天记录\n      const updatedMonthsData = [...monthsData];\n\n      // 遍历所有月份和日期\n      for (const month of updatedMonthsData) {\n        for (const day of month.days) {\n          // 获取该日期的聊天记录\n          const records = allRecordsCache.get(day.date) || [];\n\n          // 搜索匹配的记录\n          const matchedRecords: MatchedRecord[] = [];\n\n          for (let i = 0; i < records.length; i++) {\n            const record = records[i];\n            const content = record.talkContent || '';\n            const matchIndex = content.toLowerCase().indexOf(value.toLowerCase());\n\n            if (matchIndex !== -1) {\n              // 创建预览文本，显示匹配关键词前后的一些文本\n              const previewStart = Math.max(0, matchIndex - 20);\n              const previewEnd = Math.min(content.length, matchIndex + value.length + 20);\n              let previewText = content.substring(previewStart, previewEnd);\n\n              // 如果预览不是从头开始，添加省略号\n              if (previewStart > 0) {\n                previewText = '...' + previewText;\n              }\n\n              // 如果预览不是到末尾结束，添加省略号\n              if (previewEnd < content.length) {\n                previewText = previewText + '...';\n              }\n\n              matchedRecords.push({\n                transcript: record,\n                matchIndex,\n                previewText\n              });\n\n              // 只保留最多3条匹配记录\n              if (matchedRecords.length >= 3) break;\n            }\n          }\n\n          // 更新日期的匹配记录\n          day.matchedRecords = matchedRecords;\n        }\n      }\n\n      setMonthsData(updatedMonthsData);\n    } catch (error) {\n      console.error('Failed to search content:', error);\n      message.error('Failed to search chat content');\n    } finally {\n      setSearchingContentLoading(false);\n    }\n  };\n\n  const highlightText = (text: string, searchTerm: string) => {\n    if (!searchTerm) return text;\n\n    try {\n      // 使用不区分大小写的正则表达式\n      const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n      const parts = text.split(regex);\n\n      return (\n        <>\n          {parts.map((part, index) => {\n            if (part.toLowerCase() === searchTerm.toLowerCase()) {\n              return (\n                <HighlightedText\n                  className=\"highlighted-text\"\n                  key={index}\n                  id={`highlight-${index}`}\n                >\n                  {part}\n                </HighlightedText>\n              );\n            }\n            return part;\n          })}\n        </>\n      );\n    } catch (error) {\n      console.error('Error highlighting text:', error);\n      return text;\n    }\n  };\n\n  const renderMonthCollapse = () => {\n    if (filteredMonthsData.length === 0) {\n      return (\n        <Empty\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n          description={\n            contentSearchText\n              ? t('no_matching_content')\n              : searchText\n                ? t('no_matching_history')\n                : t('no_chat_history')\n          }\n        />\n      );\n    }\n\n    return (\n      <div>\n        {filteredMonthsData.map((month) => (\n          <MonthCard\n            key={month.month}\n            title={\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <CalendarOutlined style={{ marginRight: 8 }} />\n                <span>{month.formattedMonth}</span>\n                <MonthStatistic>\n                  <Statistic\n                    value={month.totalMessages}\n                    suffix={month.totalMessages === 1 ? \"message\" : \"messages\"}\n                    valueStyle={{ fontSize: '14px', color: '#1a73e8' }}\n                  />\n                </MonthStatistic>\n              </div>\n            }\n          >\n            <List\n              dataSource={month.days}\n              renderItem={(day) => (\n                <>\n                  <DateItem onClick={() => handleDateClick(day.date)}>\n                    <List.Item.Meta\n                      avatar={\n                        <div style={{\n                          width: 40,\n                          height: 40,\n                          borderRadius: 20,\n                          background: '#f0f5ff',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          fontWeight: 'bold',\n                          color: '#1a73e8'\n                        }}>\n                          {day.formattedDate}\n                        </div>\n                      }\n                      title={day.dayOfWeek}\n                      description={\n                        <div>\n                          <MessageOutlined style={{ marginRight: 4 }} />\n                          <span>{day.messageCount} {day.messageCount === 1 ? 'message' : 'messages'}</span>\n                        </div>\n                      }\n                    />\n                    <StyledBadge count={day.messageCount} />\n                  </DateItem>\n\n                  {/* 显示匹配的记录预览 */}\n                  {contentSearchText && day.matchedRecords && day.matchedRecords.length > 0 && (\n                    <div>\n                      {day.matchedRecords.map((match, index) => (\n                        <PreviewContainer\n                          key={index}\n                          onClick={() => handlePreviewClick(day.date, day.matchedRecords!.findIndex(m => m === match), contentSearchText)}\n                        >\n                          <Space direction=\"vertical\" size={0} style={{ width: '100%' }}>\n                            <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                              {match.transcript.activeSpeaker} - {dayjs(match.transcript.timestamp).format('HH:mm:ss')}\n                            </Text>\n                            <Paragraph ellipsis={{ rows: 2 }} style={{ marginBottom: 0 }}>\n                              {highlightText(match.previewText, contentSearchText)}\n                            </Paragraph>\n                          </Space>\n                        </PreviewContainer>\n                      ))}\n                    </div>\n                  )}\n                </>\n              )}\n            />\n          </MonthCard>\n        ))}\n      </div>\n    );\n  };\n\n  const renderLoading = () => (\n    <LoadingContainer>\n      <Spin indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />} />\n      <div className=\"loading-text\">\n        {searchingContentLoading ? t('searching_content') : t('loading_history')}\n      </div>\n    </LoadingContainer>\n  );\n\n  return (\n    <div>\n      <StyledTitle subtitle={t('chat_history_desc')}>{t('chat_history')}</StyledTitle>\n\n      <div style={{ padding: \"0 20px\" }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <SearchContainer>\n            <Search\n              placeholder={t('search_content')}\n              allowClear\n              enterButton={<Button type=\"primary\" icon={<HighlightOutlined />}>{t('search_button')}</Button>}\n              onSearch={handleContentSearch}\n              onChange={(e) => !e.target.value && handleContentSearch('')}\n              loading={searchingContentLoading}\n            />\n            {contentSearchText && (\n              <div style={{ marginTop: 8 }}>\n                <Tag color=\"blue\">{t('search_for', { term: contentSearchText })}</Tag>\n                <Button\n                  type=\"link\"\n                  size=\"small\"\n                  onClick={() => handleContentSearch('')}\n                  disabled={searchingContentLoading}\n                >\n                  {t('clear')}\n                </Button>\n              </div>\n            )}\n          </SearchContainer>\n        </Space>\n\n        <Divider />\n\n        {loading || searchingContentLoading ? renderLoading() : renderMonthCollapse()}\n\n        <Modal\n          title={selectedDate ? t('chat_records', { date: dayjs(selectedDate).format('YYYY-MM-DD') }) : ''}\n          open={modalVisible}\n          onCancel={() => setModalVisible(false)}\n          footer={null}\n          width={800}\n          bodyStyle={{ maxHeight: '70vh', overflow: 'auto' }}\n        >\n          {modalLoading ? (\n            <div style={{ padding: '40px 0' }}>\n              <Spin indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} />\n              <div style={{ marginTop: 16 }}>{t('loading')}</div>\n            </div>\n          ) : chatRecords.length === 0 ? (\n            <Empty description={t('no_records_for_date')} />\n          ) : (\n            <div ref={modalContentRef}>\n              <Spin spinning={modalLoading}>\n                <List\n                  dataSource={chatRecords}\n                  renderItem={(record, index) => {\n                    // 只有在内容搜索模式下且是高亮记录时才应用背景色\n                    const isHighlighted = highlightedRecordIndex === index && contentSearchText;\n\n                    return (\n                      <List.Item\n                        ref={(el) => {\n                          if (el) {\n                            listItemRefs.current.set(`record-${index}`, el);\n                          }\n                        }}\n                        style={{\n                          backgroundColor: isHighlighted ? '#e6f3ff' : 'transparent',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <List.Item.Meta\n                          title={record.activeSpeaker}\n                          description={\n                            contentSearchText ?\n                              highlightText(record.talkContent, contentSearchText) :\n                              record.talkContent\n                          }\n                        />\n                        <Text type=\"secondary\">\n                          {dayjs(record.timestamp).format('HH:mm:ss')}\n                        </Text>\n                      </List.Item>\n                    );\n                  }}\n                />\n              </Spin>\n            </div>\n          )}\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ClearCaptionsSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Space' is defined but never used.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Title' is assigned a value but never used.","line":8,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is assigned a value but never used.","line":8,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'token' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Typography, Card, Space, theme, Button, Modal, Alert } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport useI18n from '~utils/i18n';\nimport StyledTitle from '~components/common/StyledTitle';\nimport '~styles/clear-captions-settings.scss';\n\nconst { Title, Text } = Typography;\nconst { useToken } = theme;\n\nconst ClearCaptionsSettings: React.FC = () => {\n  const { token } = useToken();\n  const { t } = useI18n();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [clearSuccess, setClearSuccess] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleClear = () => {\n    // 清除全部字幕数据\n    chrome.storage.local.set({ recordedContents: [] }, () => {\n      chrome.runtime.sendMessage({ action: \"clear\" });\n      setClearSuccess(true);\n      setTimeout(() => {\n        setClearSuccess(false);\n        setIsModalVisible(false);\n      }, 2000);\n    });\n  };\n\n  return (\n    <div>\n      <StyledTitle subtitle={t('clear_captions_desc')}>{t('clear_captions')}</StyledTitle>\n\n      <div className=\"clear-captions-settings-section\">\n        {/* Clear Captions Section */}\n        <div className=\"clear-captions-main-section\">\n\n          <Alert\n            message={t('warning')}\n            description={t('clear_captions_warning')}\n            type=\"warning\"\n            showIcon\n            className=\"clear-captions-alert\"\n          />\n\n          <div className=\"clear-captions-button-wrapper\">\n            <Button\n              type=\"primary\"\n              danger\n              size=\"large\"\n              icon={<DeleteOutlined />}\n              onClick={showModal}\n              className=\"clear-captions-button\"\n            >\n              {t('clear_all_data')}\n            </Button>\n          </div>\n        </div>\n\n        <Modal\n          title={t('confirm_clear_captions')}\n          open={isModalVisible}\n          onOk={handleClear}\n          onCancel={handleCancel}\n          okText={t('yes_clear_data')}\n          cancelText={t('cancel')}\n          okButtonProps={{ danger: true }}\n        >\n          <p>{t('clear_confirm')}</p>\n          {clearSuccess && (\n            <Alert\n              className=\"clear-captions-modal-alert\"\n              message={t('data_cleared_success')}\n              type=\"success\"\n              showIcon\n            />\n          )}\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default ClearCaptionsSettings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ExtensionSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is assigned a value but never used.","line":8,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography } from 'antd';\nimport StyledTitle from '~components/common/StyledTitle';\nimport Extension from '~components/extension';\nimport { useI18n } from '~utils/i18n';\nimport '~styles/extension-settings.scss';\n\nconst { Text } = Typography;\n\nconst ExtensionSettings: React.FC = () => {\n  const { t } = useI18n();\n\n  return (\n    <div>\n      <StyledTitle subtitle={t('extension_settings_desc')}>{t('extension_settings')}</StyledTitle>\n\n      <div className=\"extension-settings-special\" style={{ padding: \"0 20px\" }}>\n        <Extension />\n      </div>\n    </div>\n  );\n};\n\nexport default ExtensionSettings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/GoogleDriveIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserOutlined' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseOutlined' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'KeyOutlined' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'KEY_TO_ROUTE' is assigned a value but never used.","line":31,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  ApiOutlined,\n  UserOutlined,\n  CloudSyncOutlined,\n  DatabaseOutlined,\n  KeyOutlined,\n  CalendarOutlined,\n  SettingOutlined,\n  TranslationOutlined,\n  GlobalOutlined,\n  DeleteOutlined,\n  RollbackOutlined\n} from '@ant-design/icons';\nimport '~styles/sidebar.scss';\nimport useI18n from '~utils/i18n';\n\ninterface SidebarProps {\n  activeKey: string;\n  onChange: (key: string) => void;\n}\n\ninterface MenuItem {\n  key: string;\n  icon: React.ReactNode;\n  label: string;\n  route: string;\n}\n\n// 路由映射表（与options.tsx中保持一致）\nconst KEY_TO_ROUTE = {\n  '1': 'ai-settings',\n  '2': 'google-drive',\n  '3': 'calendar',\n  '4': 'translation',\n  '5': 'ui-language',\n  '6': 'extension',\n  '7': 'clear-captions'\n};\n\nconst Sidebar: React.FC<SidebarProps> = ({ activeKey, onChange }) => {\n  const { t } = useI18n();\n\n  const menuItems: MenuItem[] = [\n    {\n      key: '1',\n      icon: <ApiOutlined />,\n      label: t('ai_settings'),\n      route: 'ai-settings'\n    },\n    {\n      key: '2',\n      icon: <CloudSyncOutlined />,\n      label: t('google_drive_integration'),\n      route: 'google-drive'\n    },\n    {\n      key: '3',\n      icon: <CalendarOutlined />,\n      label: t('calendar_view'),\n      route: 'calendar'\n    },\n    {\n      key: '4',\n      icon: <TranslationOutlined />,\n      label: t('translation_language'),\n      route: 'translation'\n    },\n    {\n      key: '5',\n      icon: <GlobalOutlined />,\n      label: t('ui_language'),\n      route: 'ui-language'\n    },\n    {\n      key: '6',\n      icon: <RollbackOutlined />,\n      label: t('extension'),\n      route: 'extension'\n    },\n    {\n      key: '7',\n      icon: <DeleteOutlined />,\n      label: t('clear_captions'),\n      route: 'clear-captions'\n    }\n  ];\n\n  // 处理菜单项点击\n  const handleMenuItemClick = (key: string, route: string) => {\n    onChange(key);\n    // 更新URL哈希（可以由父组件处理，但这里为了兼容性也添加）\n    window.location.hash = route;\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar-header\">\n        <div className=\"app-logo\">\n          <div className=\"logo-icon\">\n            <SettingOutlined style={{ fontSize: '24px', color: '#fff' }} />\n          </div>\n          <h1>Google Meet Caption Pro</h1>\n        </div>\n        <div className=\"sidebar-description\">\n          {t('configure_assistant')}\n        </div>\n      </div>\n      <div className=\"sidebar-menu\">\n        {menuItems.map(item => (\n          <a\n            key={item.key}\n            className={`menu-item ${activeKey === item.key ? 'active' : ''}`}\n            onClick={() => handleMenuItemClick(item.key, item.route)}\n            href={`#${item.route}`}\n          >\n            <span className=\"icon\">{item.icon}</span>\n            <span className=\"label\">{item.label}</span>\n          </a>\n        ))}\n      </div>\n      <div className=\"sidebar-footer\">\n        <div className=\"version\">Version 1.0.0</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/TranslationSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslationOutlined' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Title' is assigned a value but never used.","line":13,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography, Card, Space, theme, Switch, Divider, Select, Slider } from 'antd';\nimport { TranslationOutlined } from '@ant-design/icons';\nimport LanguageSelector from '~components/LanguageSelector';\nimport useI18n from '~utils/i18n';\nimport StyledTitle from '~components/common/StyledTitle';\nimport { useAutoTranslate } from '~hooks/useAutoTranslate';\nimport { useTranslationProvider, getProviderDisplayName, type TranslationProvider } from '~hooks/useTranslationProvider';\nimport { useTranslationFrequency } from '~hooks/useTranslationFrequency';\nimport messageManager from '~utils/message-manager';\nimport '~styles/translation-settings.scss';\n\nconst { Title, Text } = Typography;\nconst { useToken } = theme;\nconst { Option } = Select;\n\nconst TranslationSettings: React.FC = () => {\n  const { token } = useToken();\n  const { t } = useI18n();\n  const [autoTranslateEnabled, setAutoTranslateEnabled] = useAutoTranslate();\n  const [translationProvider, setTranslationProvider] = useTranslationProvider();\n  const [translationFrequency, setTranslationFrequency] = useTranslationFrequency();\n\n  const handleAutoTranslateChange = (checked: boolean) => {\n    setAutoTranslateEnabled(checked);\n    messageManager.success(\n      checked ? t('auto_translate_enabled') : t('auto_translate_disabled')\n    );\n  };\n\n  const handleProviderChange = (value: TranslationProvider) => {\n    console.log(`[TranslationSettings] User selected provider: ${value}`);\n\n    // 在设置之前先检查当前存储的值\n    chrome.storage.sync.get(['translationProvider'], (result) => {\n      console.log(`[TranslationSettings] Before setting - Storage contains:`, result);\n\n      // 设置新的翻译提供商\n      setTranslationProvider(value);\n\n      // 延迟验证设置是否成功\n      setTimeout(() => {\n        chrome.storage.sync.get(['translationProvider'], (newResult) => {\n          console.log(`[TranslationSettings] After setting - Storage contains:`, newResult);\n\n          // 再次测试获取函数\n          import('~hooks/useTranslationProvider').then(({ getCurrentTranslationProvider }) => {\n            getCurrentTranslationProvider().then(provider => {\n              console.log(`[TranslationSettings] getCurrentTranslationProvider returned: ${provider}`);\n            });\n          });\n        });\n      }, 500);\n    });\n\n    const providerName = getProviderDisplayName(value);\n    messageManager.success(\n      t('translation_provider_set', { provider: providerName })\n    );\n  };\n\n  const handleFrequencyChange = (value: number) => {\n    setTranslationFrequency(value);\n    messageManager.success(\n      t('translation_frequency_set', { frequency: value.toString() })\n    );\n  };\n\n  return (\n    <div>\n      <StyledTitle subtitle={t('translation_language_desc')}>{t('translation_language')}</StyledTitle>\n\n      <div style={{ padding: \"0 20px\" }}>\n        {/* Language Selector Section */}\n        <div className=\"translation-settings-language-selector-section\">\n\n          <div className=\"translation-settings-language-selector-wrapper\">\n            <LanguageSelector />\n          </div>\n        </div>\n\n        {/* Auto Translate Section */}\n        <Card className=\"translation-settings-card\">\n          <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n            <div className=\"translation-settings-switch-container\">\n              <div>\n                <Text strong className=\"translation-settings-section-title\">\n                  {t('auto_translate')}\n                </Text>\n                <Text type=\"secondary\" className=\"translation-settings-section-description\">\n                  {t('auto_translate_desc')}\n                </Text>\n              </div>\n              <Switch\n                checked={autoTranslateEnabled}\n                onChange={handleAutoTranslateChange}\n                style={{\n                  backgroundColor: autoTranslateEnabled ? token.colorSuccess : undefined\n                }}\n              />\n            </div>\n\n            {autoTranslateEnabled && (\n              <>\n                <Divider />\n\n                <div className=\"translation-settings-provider-section\">\n                  <div className=\"translation-settings-provider-description-wrapper\">\n                    <Text strong className=\"translation-settings-section-title\">\n                      {t('translation_provider')}\n                    </Text>\n                    <Text type=\"secondary\" className=\"translation-settings-section-description\">\n                      {t('translation_provider_desc')}\n                    </Text>\n                  </div>\n                  <Select\n                    value={translationProvider}\n                    onChange={handleProviderChange}\n                    className=\"translation-settings-provider-select\"\n                    size=\"middle\"\n                  >\n                    <Option value=\"google\">\n                      {t('provider_google')}\n                    </Option>\n                    <Option value=\"microsoft\">\n                      {t('provider_microsoft')}\n                    </Option>\n                    <Option value=\"ai\">\n                      {t('provider_ai')}\n                    </Option>\n                  </Select>\n                </div>\n\n                <Divider />\n\n                <div className=\"translation-settings-slider-container\">\n                  <div className=\"translation-settings-frequency-description-wrapper\">\n                    <Text strong className=\"translation-settings-section-title\">\n                      {t('translation_frequency')}\n                    </Text>\n                    <Text type=\"secondary\" className=\"translation-settings-section-description\">\n                      {t('translation_frequency_desc')}\n                    </Text>\n                  </div>\n                  <div className=\"translation-settings-frequency-slider-wrapper\">\n                    <Slider\n                      min={1}\n                      max={10}\n                      step={0.5}\n                      value={translationFrequency}\n                      onChange={handleFrequencyChange}\n                      tooltip={{\n                        formatter: (value) => t('translation_frequency_label', { frequency: value?.toString() || '2.5' })\n                      }}\n                      marks={{\n                        1: '1s',\n                        2.5: '2.5s',\n                        5: '5s',\n                        10: '10s'\n                      }}\n                      className=\"translation-settings-frequency-slider\"\n                    />\n                    <div\n                      className=\"translation-settings-frequency-label\"\n                      style={{\n                        color: token.colorPrimary,\n                      }}\n                    >\n                      {t('translation_frequency_label', { frequency: translationFrequency.toString() })}\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n          </Space>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default TranslationSettings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/UILanguageSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GlobalOutlined' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Title' is assigned a value but never used.","line":9,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is assigned a value but never used.","line":9,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'token' is assigned a value but never used.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography, theme } from 'antd';\nimport { GlobalOutlined } from '@ant-design/icons';\nimport UILanguageSelector from '~components/UILanguageSelector';\nimport useI18n from '~utils/i18n';\nimport StyledTitle from '~components/common/StyledTitle';\nimport '~styles/ui-language-settings.scss';\n\nconst { Title, Text } = Typography;\nconst { useToken } = theme;\n\nconst UILanguageSettings: React.FC = () => {\n  const { token } = useToken();\n  const { t } = useI18n();\n\n  return (\n    <div>\n      <StyledTitle subtitle={t('ui_language_desc')}>{t('ui_language')}</StyledTitle>\n\n      <div className=\"ui-language-settings-section\">\n        {/* UI Language Selector Section */}\n        <div className=\"ui-language-settings-selector-section\">\n\n\n          <div className=\"ui-language-settings-selector-wrapper\">\n            <UILanguageSelector />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UILanguageSettings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/AISettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[697,700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[697,700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'models' is assigned a value but never used.","line":19,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":19,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":19,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { ServiceList } from '~/components/options/ai-settings/components/ServiceList';\nimport { ServiceConfigPanel } from '~/components/options/ai-settings/components/ServiceConfigPanel';\nimport { useFetchModels } from '~/components/options/ai-settings/hooks';\nimport { type AIServiceType } from '~/components/options/ai-settings/utils/constants';\nimport messageManager from '~/utils/message-manager';\n\nimport StyledTitle from '~/components/common/StyledTitle';\nimport useI18n from '~/utils/i18n';\n\nconst AISettings: React.FC = () => {\n    const { t } = useI18n();\n    const [configuredServices, setConfiguredServices] = useState<Record<string, any>>({});\n    const [activeService, setActiveService] = useState<string>('gemini');\n    const [currentEditService, setCurrentEditService] = useState<string>('gemini');\n    const [apiKey, setApiKey] = useState<string>('');\n    const [modelName, setModelName] = useState<string>('');\n\n    const { models, loading, error } = useFetchModels(currentEditService as AIServiceType, apiKey);\n\n    useEffect(() => {\n        import('~/utils/getAPIkey').then(({ getAllAIServiceConfigs }) => {\n            getAllAIServiceConfigs().then(({ aiServices, activeAIService }) => {\n                setConfiguredServices(aiServices);\n                setActiveService(activeAIService);\n\n                if (activeAIService && aiServices[activeAIService]) {\n                    const service = activeAIService;\n                    setCurrentEditService(service);\n                    setApiKey(aiServices[service].apiKey || '');\n                    setModelName(aiServices[service].modelName || '');\n                }\n            });\n        });\n    }, []);\n\n    const handleServiceChange = (service: AIServiceType) => {\n        setCurrentEditService(service);\n\n        if (configuredServices[service]) {\n            setApiKey(configuredServices[service].apiKey || '');\n            setModelName(configuredServices[service].modelName || '');\n        } else {\n            setApiKey('');\n            setModelName('');\n        }\n    };\n\n    const handleSaveService = () => {\n        import('~/utils/getAPIkey').then(({ saveAIServiceConfig }) => {\n            const isActivating = currentEditService === activeService;\n\n            saveAIServiceConfig(\n                currentEditService, \n                apiKey, \n                isActivating,\n                { modelName }\n            ).then(() => {\n                messageManager.success(t('configuration_saved'));\n\n                setConfiguredServices(prev => ({\n                    ...prev,\n                    [currentEditService]: {\n                        apiKey,\n                        modelName\n                    }\n                }));\n\n                const hadNoConfiguredServices = Object.values(configuredServices)\n                    .every(svc => !svc?.apiKey);\n\n                if (hadNoConfiguredServices) {\n                    setActiveService(currentEditService);\n                }\n\n                \n                chrome.runtime.sendMessage({\n                    type: 'apiKeyUpdated',\n                });\n            });\n        });\n    };\n\n    const handleSetAsDefault = () => {\n        if (configuredServices[currentEditService]?.apiKey) {\n            import('~/utils/getAPIkey').then(({ saveAIServiceConfig }) => {\n                saveAIServiceConfig(\n                    currentEditService, \n                    apiKey, \n                    true,\n                    { modelName }\n                ).then(() => {\n                    messageManager.success(t('active_service_changed'));\n                    setActiveService(currentEditService);\n                    \n                    chrome.runtime.sendMessage({\n                        type: 'apiKeyUpdated',\n                    });\n                });\n            });\n        } else {\n            messageManager.info(t('please_configure_api_key_first'));\n        }\n    };\n\n    return (\n        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n            <div style={{ padding: \"20px 30px\", borderBottom: \"1px solid #f0f0f0\" }}>\n                <StyledTitle>\n                    {t('active_ai_service')}\n                </StyledTitle>\n            </div>\n            <div style={{ \n                display: 'flex', \n                flexDirection: 'row', \n                height: \"calc(100% - 100px)\", \n                overflow: \"hidden\"\n            }}>\n                <ServiceList\n                    configuredServices={configuredServices}\n                    activeService={activeService}\n                    currentEditService={currentEditService}\n                    onServiceChange={handleServiceChange}\n                    t={t}\n                />\n                <ServiceConfigPanel\n                    service={currentEditService as AIServiceType}\n                    configuredServices={configuredServices}\n                    activeService={activeService}\n                    apiKey={apiKey}\n                    modelName={modelName}\n                    onApiKeyChange={setApiKey}\n                    onModelNameChange={setModelName}\n                    onSaveService={handleSaveService}\n                    onSetAsDefault={handleSetAsDefault}\n                    t={t}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AISettings;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/components/ApiKeyConfig.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[594,597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[594,597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Alert, Typography, Input, Button } from 'antd';\nimport { getApiKeySourceUrl } from '~/components/options/ai-settings/utils/service-helpers';\nimport { testAPIKey } from '~/components/options/ai-settings/utils/api-test-service';\nimport messageManager from '~/utils/message-manager';\nimport { type AIServiceType } from '~/components/options/ai-settings/utils/constants';\n\nconst { Text } = Typography;\n\ninterface ApiKeyConfigProps {\n  service: AIServiceType;\n  apiKey: string;\n  onApiKeyChange: (value: string) => void;\n  t: (key: string, params?: any) => string;\n}\n\nexport const ApiKeyConfig: React.FC<ApiKeyConfigProps> = ({\n  service,\n  apiKey,\n  onApiKeyChange,\n  t\n}) => {\n  const [testingApiKey, setTestingApiKey] = useState(false);\n\n  const handleTestApiKey = async () => {\n    setTestingApiKey(true);\n    \n    try {\n      const result = await testAPIKey(service, apiKey);\n      \n      if (result.isValid) {\n        if (result.isWarning) {\n          messageManager.warning(t(result.errorMessage || 'api_key_format_valid_but_not_tested'));\n        } else {\n          messageManager.success(t('api_key_valid'));\n        }\n      } else {\n        messageManager.error(t(result.errorMessage || 'api_key_invalid'));\n      }\n    } finally {\n      setTestingApiKey(false);\n    }\n  };\n\n  return (\n    <div>\n      <Alert\n        style={{ marginBottom: \"25px\", borderRadius: \"10px\" }}\n        message={t('api_key_info')}\n        description={\n          <Text type=\"secondary\">\n            {t('api_key_source')}{' '}\n            <a href={getApiKeySourceUrl(service)} target=\"_blank\" rel=\"noopener noreferrer\">\n              {getApiKeySourceUrl(service)}\n            </a>\n          </Text>\n        }\n        type=\"info\"\n        showIcon\n      />\n\n      <div style={{ display: 'flex', marginBottom: \"25px\" }}>\n        <Input.Password\n          size=\"large\"\n          value={apiKey}\n          onChange={(e) => onApiKeyChange(e.target.value)}\n          placeholder={t('enter_api_key')}\n          style={{ \n            height: '50px',\n            borderRadius: '8px',\n            flex: 1\n          }}\n        />\n        <Button\n          size=\"large\"\n          type=\"default\"\n          onClick={handleTestApiKey}\n          loading={testingApiKey}\n          disabled={!apiKey}\n          style={{ \n            marginLeft: '10px',\n            height: '50px',\n            borderRadius: '8px'\n          }}\n        >\n          {t('test_api_key')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/components/ModelSelector.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchModels'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [service, apiKey, fetchModels]","fix":{"range":[1307,1324],"text":"[service, apiKey, fetchModels]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Alert, Typography, Button, Spin, Select, Input } from 'antd';\nimport { getDefaultModelName } from '~/components/options/ai-settings/utils/service-helpers';\nimport { fetchAvailableModels } from '~/components/options/ai-settings/utils/model-service';\nimport { type AIServiceType } from '~/components/options/ai-settings/utils/constants';\n\nconst { Text } = Typography;\n\ninterface ModelSelectorProps {\n  service: AIServiceType;\n  apiKey: string;\n  modelName: string;\n  onModelNameChange: (value: string) => void;\n  t: (key: string) => string;\n}\n\nexport const ModelSelector: React.FC<ModelSelectorProps> = ({\n  service,\n  apiKey,\n  modelName,\n  onModelNameChange,\n  t\n}) => {\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n  const [loadingModels, setLoadingModels] = useState(false);\n  const [modelLoadError, setModelLoadError] = useState('');\n\n  const fetchModels = async () => {\n    setLoadingModels(true);\n    setModelLoadError('');\n    \n    try {\n      const { models, error } = await fetchAvailableModels(service, apiKey);\n      setAvailableModels(models);\n      if (error) {\n        setModelLoadError(error);\n      }\n    } finally {\n      setLoadingModels(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchModels();\n  }, [service, apiKey]);\n\n  return (\n    <div style={{ marginBottom: \"25px\" }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>\n        <label style={{ fontWeight: 500 }}>{t('model_name')}:</label>\n        {loadingModels && (\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Spin size=\"small\" style={{ marginRight: '8px' }} />\n            <Text type=\"secondary\" style={{ fontSize: '13px' }}>{t('loading_models')}</Text>\n          </div>\n        )}\n        {!loadingModels && apiKey && (\n          <Button \n            type=\"link\" \n            size=\"small\" \n            onClick={fetchModels}\n            style={{ padding: '0', height: 'auto' }}\n          >\n            {t('refresh_models')}\n          </Button>\n        )}\n      </div>\n      \n      {modelLoadError && (\n        <Alert\n          message={modelLoadError}\n          type=\"warning\"\n          showIcon\n          style={{ \n            marginBottom: '15px',\n            borderRadius: '8px',\n            display: 'flex',\n            alignItems: 'center'\n          }}\n          description={t('using_default_model_list')}\n          action={\n            <Button size=\"small\" onClick={fetchModels} type=\"primary\" ghost>\n              {t('retry')}\n            </Button>\n          }\n        />\n      )}\n      \n      {/* 显示模型选择下拉框 */}\n      {availableModels.length > 0 ? (\n        <div>\n          <Select\n            id=\"model-selector\"\n            data-testid=\"model-selector\"\n            size=\"large\"\n            value={modelName || undefined}\n            onChange={(value) => {\n              console.log('Model selected:', value);\n              onModelNameChange(value);\n            }}\n            placeholder={getDefaultModelName(service)}\n            style={{ \n              width: '100%',\n              height: '50px',\n              borderRadius: '8px'\n            }}\n            allowClear\n            showSearch\n            optionFilterProp=\"children\"\n            loading={loadingModels}\n            notFoundContent={loadingModels ? <Spin size=\"small\" /> : t('no_models_found')}\n            suffixIcon={loadingModels ? <Spin size=\"small\" /> : <span style={{ fontSize: '16px' }}>⌄</span>}\n          >\n            {availableModels.map(model => (\n              <Select.Option key={model} value={model}>\n                {model}\n              </Select.Option>\n            ))}\n          </Select>\n          <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block', marginTop: '5px' }}>\n            {availableModels.length} {t('models_available')}\n          </Text>\n        </div>\n      ) : (\n        <Input\n          size=\"large\"\n          value={modelName}\n          onChange={(e) => onModelNameChange(e.target.value)}\n          placeholder={getDefaultModelName(service)}\n          style={{ \n            height: '50px',\n            borderRadius: '8px'\n          }}\n          disabled={loadingModels}\n        />\n      )}\n      \n      <Text type=\"secondary\" style={{ fontSize: '13px', display: 'block', marginTop: '8px' }}>\n        {t('leave_empty_for_default')}\n      </Text>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/components/ServiceConfigPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[748,751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[748,751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography, theme } from 'antd';\nimport { ActiveServiceBadge, ConfigButton, DefaultServiceButton } from '~/components/options/ai-settings/components/StyledComponents';\nimport { getServiceDisplayName, getServiceIcon } from '~/components/options/ai-settings/utils/service-helpers';\nimport { ApiKeyConfig } from '~/components/options/ai-settings/components/ApiKeyConfig';\nimport { ModelSelector } from '~/components/options/ai-settings/components/ModelSelector';\nimport { type AIServiceType } from '~/components/options/ai-settings/utils/constants';\n\nconst { Title, Text } = Typography;\nconst { useToken } = theme;\n\ninterface ServiceConfigPanelProps {\n  service: AIServiceType;\n  configuredServices: Record<string, any>;\n  activeService: string;\n  apiKey: string;\n  modelName: string;\n  onApiKeyChange: (value: string) => void;\n  onModelNameChange: (value: string) => void;\n  onSaveService: () => void;\n  onSetAsDefault: () => void;\n  t: (key: string, params?: any) => string;\n}\n\nexport const ServiceConfigPanel: React.FC<ServiceConfigPanelProps> = ({\n  service,\n  configuredServices,\n  activeService,\n  apiKey,\n  modelName,\n  onApiKeyChange,\n  onModelNameChange,\n  onSaveService,\n  onSetAsDefault,\n  t\n}) => {\n  const { token } = useToken();\n\n  return (\n    <div style={{ \n      flex: 1, \n      padding: '30px 40px', \n      overflowY: 'auto',\n      height: \"100%\"\n    }}>\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center',\n        marginBottom: '30px'\n      }}>\n        <div style={{ \n          fontSize: '36px', \n          marginRight: '15px',\n          width: '60px',\n          height: '60px',\n          background: `${token.colorPrimary}10`,\n          borderRadius: '50%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          {getServiceIcon(service)}\n        </div>\n        <div>\n          <Title level={4} style={{ margin: 0, fontWeight: 600, color: '#333' }}>\n            {t('configure_service', { service: getServiceDisplayName(service) })}\n          </Title>\n          <Text type=\"secondary\" style={{ fontSize: '15px' }}>\n            {!!configuredServices[service]?.apiKey \n              ? t('service_configured_and_ready') \n              : t('service_needs_configuration')}\n          </Text>\n        </div>\n        {!!configuredServices[service]?.apiKey && activeService === service && (\n          <ActiveServiceBadge>\n            <span style={{ marginRight: '5px' }}>★</span>\n            {t('currently_default_service')}\n          </ActiveServiceBadge>\n        )}\n      </div>\n\n      {/* 服务配置区域 */}\n      <div style={{ maxWidth: \"680px\" }}>\n        <ApiKeyConfig\n          service={service}\n          apiKey={apiKey}\n          onApiKeyChange={onApiKeyChange}\n          t={t}\n        />\n\n        <ModelSelector\n          service={service}\n          apiKey={apiKey}\n          modelName={modelName}\n          onModelNameChange={onModelNameChange}\n          t={t}\n        />\n\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          marginBottom: '25px',\n          padding: '12px 16px',\n          background: '#f9f9f9',\n          borderRadius: '8px'\n        }}>\n          <input \n            type=\"checkbox\" \n            id=\"setAsDefault\"\n            checked={activeService === service}\n            onChange={(e) => {\n              if (e.target.checked && apiKey) {\n                onSetAsDefault();\n              }\n            }}\n            style={{ \n              marginRight: '10px',\n              width: '18px',\n              height: '18px'\n            }}\n            disabled={!apiKey}\n          />\n          <label \n            htmlFor=\"setAsDefault\" \n            style={{ \n              cursor: apiKey ? 'pointer' : 'not-allowed',\n              opacity: apiKey ? 1 : 0.6\n            }}\n          >\n            {t('set_as_default_service')}\n          </label>\n        </div>\n\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '30px' }}>\n          <ConfigButton\n            type=\"primary\"\n            onClick={onSaveService}\n            disabled={!apiKey}\n          >\n            {t('save_service_config')}\n          </ConfigButton>\n        </div>\n\n        {!!configuredServices[service]?.apiKey && activeService !== service && (\n          <div style={{ textAlign: 'center', marginTop: '15px' }}>\n            <DefaultServiceButton\n              type=\"default\"\n              onClick={onSetAsDefault}\n            >\n              {t('set_as_default_service')}\n            </DefaultServiceButton>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/components/ServiceList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography, theme } from 'antd';\nimport { ServiceListItem, StatusBadge, ServiceIcon } from '~/components/options/ai-settings/components/StyledComponents';\nimport { getServiceDisplayName, getServiceIcon } from '~/components/options/ai-settings/utils/service-helpers';\nimport { SUPPORTED_SERVICES, type AIServiceType } from '~/components/options/ai-settings/utils/constants';\n\nconst { Text } = Typography;\nconst { useToken } = theme;\n\ninterface ServiceListProps {\n  configuredServices: Record<string, any>;\n  activeService: string;\n  currentEditService: string;\n  onServiceChange: (service: AIServiceType) => void;\n  t: (key: string) => string;\n}\n\nexport const ServiceList: React.FC<ServiceListProps> = ({\n  configuredServices,\n  activeService,\n  currentEditService,\n  onServiceChange,\n  t\n}) => {\n  const { token } = useToken();\n\n  return (\n    <div style={{ \n      width: '250px', \n      borderRight: '1px solid #f0f0f0', \n      padding: '20px', \n      overflowY: 'auto',\n      height: \"100%\"\n    }}>\n      <Text strong style={{ marginBottom: '15px', display: 'block', fontSize: '16px' }}>\n        {t('service_list')}\n      </Text>\n      \n      {SUPPORTED_SERVICES.map(service => {\n        const isConfigured = !!configuredServices[service]?.apiKey;\n        const isActive = activeService === service;\n        \n        return (\n          <ServiceListItem \n            key={service}\n            active={isActive}\n            configured={isConfigured}\n            selected={currentEditService === service}\n            onClick={() => onServiceChange(service)}\n            className=\"service-list-item\"\n          >\n            <ServiceIcon configured={isConfigured}>\n              {getServiceIcon(service)}\n            </ServiceIcon>\n            <div style={{ flex: 1 }}>\n              <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>\n                {getServiceDisplayName(service)}\n              </div>\n              <StatusBadge isSuccess={isConfigured}>\n                {isConfigured ? t('configured') : t('not_configured')}\n              </StatusBadge>\n            </div>\n            {isActive && (\n              <div style={{ \n                marginLeft: '5px', \n                color: token.colorPrimary,\n                fontSize: '18px'\n              }}>\n                ★\n              </div>\n            )}\n          </ServiceListItem>\n        );\n      })}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/components/StyledComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/utils/api-test-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/utils/model-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1200,1203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1200,1203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type AIServiceType } from '~/components/options/ai-settings/utils/constants';\nimport { getPredefinedModels } from '~/components/options/ai-settings/utils/service-helpers';\n\nexport interface ModelFetchResult {\n  models: string[];\n  error?: string;\n}\n\n// 获取OpenAI模型列表\nexport const fetchOpenAIModels = async (apiKey: string): Promise<ModelFetchResult> => {\n  try {\n    console.log('Fetching OpenAI models via API...');\n    const response = await fetch('https://api.openai.com/v1/models', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new Error('Invalid API key');\n      } else {\n        const errorData = await response.json().catch(() => null);\n        const errorMessage = errorData?.error?.message || `Failed to fetch models: ${response.status}`;\n        throw new Error(errorMessage);\n      }\n    }\n    \n    const data = await response.json();\n    // 过滤出仅支持聊天的模型\n    const models = data.data\n      .filter((model: any) => \n        model.id.includes('gpt') && !model.id.includes('deprecated'))\n      .map((model: any) => model.id)\n      .sort();\n    \n    console.log('OpenAI models fetched:', models);\n    return { models };\n  } catch (error) {\n    console.error('Error fetching OpenAI models:', error);\n    // 返回预定义模型作为后备\n    const fallbackModels = getPredefinedModels('openai');\n    console.log('Using predefined OpenAI models due to error:', fallbackModels);\n    return { \n      models: fallbackModels, \n      error: error.message || 'Failed to fetch models'\n    };\n  }\n};\n\n// 获取模型列表的统一入口\nexport const fetchAvailableModels = async (\n  service: AIServiceType, \n  apiKey?: string\n): Promise<ModelFetchResult> => {\n  // 如果没有API密钥，返回预定义模型\n  if (!apiKey) {\n    return { models: getPredefinedModels(service) };\n  }\n\n  console.log(`Fetching models for ${service}...`);\n  \n  try {\n    let result: ModelFetchResult;\n    \n    switch (service) {\n      case 'openai':\n        result = await fetchOpenAIModels(apiKey);\n        break;\n      case 'gemini':\n      case 'xai':\n        // 这些服务没有提供模型列表API，使用预设的模型列表\n        console.log(`Using predefined ${service} models:`, getPredefinedModels(service));\n        result = { models: getPredefinedModels(service) };\n        break;\n      default:\n        result = { models: [], error: 'Unsupported service' };\n    }\n    \n    // 确保只显示当前服务对应的模型\n    const filteredModels = result.models.filter(model => {\n      if (service === 'openai') return model.includes('gpt');\n      if (service === 'gemini') return model.includes('gemini');\n      if (service === 'xai') return model.includes('grok');\n      return true;\n    });\n    \n    console.log(`Setting filtered models for ${service}:`, filteredModels);\n    return { ...result, models: filteredModels };\n    \n  } catch (error) {\n    console.error('Error fetching models:', error);\n    // 即使有错误，也设置一个默认的模型列表\n    const fallbackModels = getPredefinedModels(service);\n    console.log(`Setting ${service} models (after error):`, fallbackModels);\n    return { \n      models: fallbackModels, \n      error: error.message || 'Failed to fetch models' \n    };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/options/ai-settings/utils/service-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/summary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/summary/MarkdownRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/summary/QuestionInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/summary/SummaryCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/summary/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used.","line":13,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contextHolder' is assigned a value but never used.","line":15,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":22,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":22,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect } from 'react';\nimport { Empty } from 'antd';\nimport { useI18n } from '../../utils/i18n';\nimport SummaryCard from './SummaryCard';\nimport QuestionInput from './QuestionInput';\nimport { useSummary } from './useSummary';\nimport '../../styles/summary.scss';\n\ninterface SummaryProps {\n  show?: boolean;\n}\n\nconst Summary: React.FC<SummaryProps> = (props) => {\n  const { t } = useI18n();\n  const { cardData, requesting, handleQuestion, contextHolder } = useSummary();\n  const container = useRef<HTMLDivElement>(null);\n\n  // 滚动到最新的卡片\n  useEffect(() => {\n    if (container.current) {\n      const lastItem = container.current.querySelector('.ant-spin-nested-loading:last-child');\n      lastItem && lastItem.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [cardData]);\n\n  return (\n    <div className=\"summary-wrapper\">\n      <div className={`summaryContainer ${!cardData.length && 'no-data'}`} ref={container}>\n\n        {cardData.map((item, index) => (\n          <SummaryCard\n            key={index}\n            item={item}\n            loading={requesting}\n            index={index}\n          />\n        ))}\n\n        {!cardData.length && (\n          <Empty\n            description={t('summary_question')}\n            className={'summary-no-meeting-data'}\n          />\n        )}\n      </div>\n\n      <QuestionInput\n        onSubmit={handleQuestion}\n        loading={requesting}\n      />\n    </div>\n  );\n};\n\nexport default Summary;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/summary/useSummary.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'messageApi' and 't'. Either include them or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [messageApi, selectedDate, t]","fix":{"range":[1684,1698],"text":"[messageApi, selectedDate, t]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'messageApi'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [cardData, messageApi]","fix":{"range":[2866,2876],"text":"[cardData, messageApi]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { useI18n } from '../../utils/i18n';\nimport getAiSummary from '../../utils/get-ai-summary';\nimport aiServiceManager from '../../utils/ai';\nimport { Actions } from '~components/captions/types';\nimport { useDateContext } from '../../contexts/DateContext';\nimport type { CardItemType } from './SummaryCard';\n\nexport const useSummary = () => {\n  const { t } = useI18n();\n  const [requesting, setRequesting] = useState(false);\n  const [cardData, setCardData] = useState<CardItemType[]>([]);\n  const { selectedDate } = useDateContext();\n  const [messageApi, contextHolder] = message.useMessage();\n\n  // 处理日期变化\n  useEffect(() => {\n    try {\n      console.log('[useSummary] Clearing AI conversation due to date change');\n      \n      // 获取当前 AI 服务\n      const currentService = aiServiceManager.getCurrentService();\n      if (currentService) {\n        console.log(`[useSummary] Using service: ${aiServiceManager.getCurrentServiceType()}`);\n        \n        // 如果服务支持清除对话，则清除对话\n        if (typeof currentService.clearConversation === 'function') {\n          currentService.clearConversation(Actions.ASK);\n        } else {\n          console.log('[useSummary] Current service does not support clearConversation');\n        }\n      } else {\n        console.warn('[useSummary] No active AI service found');\n      }\n      \n      // 清空当前显示的卡片数据\n      setCardData([]);\n    } catch (error) {\n      console.error('[useSummary] Error clearing AI conversation:', error);\n      messageApi.error({\n        content: t('error_clearing_conversation') || 'Error clearing conversation',\n        duration: 3,\n      });\n    }\n  }, [selectedDate]);\n\n  // 处理数据请求\n  useEffect(() => {\n    cardData.forEach((item, index) => {\n      if (item.fetchComplete) {\n        return;\n      }\n      \n      const newCardData = [...cardData];\n      setRequesting(true);\n      \n      getAiSummary(item.question)\n        .then((res) => {\n          newCardData[index].answer = res;\n          newCardData[index].fetchComplete = true;\n          newCardData[index].error = undefined;\n        })\n        .catch((err) => {\n          console.warn('err', err);\n          newCardData[index].fetchComplete = true;\n          \n          // getAiSummary内部使用askAI，AI服务错误已经在askAI中处理\n          // 这里只处理其他类型的错误\n          const errorMessage = typeof err === 'string' ? err : (err?.message || 'Unknown error occurred');\n          newCardData[index].error = errorMessage;\n          \n          // 只有非AI服务错误才显示错误消息（AI服务错误已经在askAI中处理）\n          if (!errorMessage.toLowerCase().includes('ai service')) {\n            messageApi.open({\n              type: 'error',\n              content: errorMessage,\n            });\n          }\n        })\n        .finally(() => {\n          setRequesting(false);\n          setCardData(newCardData);\n        });\n    });\n  }, [cardData]);\n\n  // 添加新问题\n  const handleQuestion = async (question = t('summary_question')) => {\n    const newCardData = [...cardData, {\n      question, \n      answer: '', \n      fetchComplete: false,\n      createdAt: Date.now()\n    }];\n    setCardData(newCardData);\n  };\n\n  return {\n    cardData,\n    requesting,\n    handleQuestion,\n    contextHolder\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/words.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DeleteOutlined' is defined but never used.","line":6,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'success' is assigned a value but never used.","line":46,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":140,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Typography, Button, Empty, Modal } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport '../styles/words.scss'\nimport { getTranslatedWords } from \"~utils/translate\";\nimport { \n    DeleteOutlined,\n    ExclamationCircleOutlined,\n    HistoryOutlined\n} from '@ant-design/icons';\nimport { translateWord } from \"~utils/unified-translation\";\nimport { useI18n } from '../utils/i18n';\nimport messageManager from '../utils/message-manager';\nimport WordCard from './words/WordCard';\nimport WordDetailModal from './words/WordDetailModal';\n\nconst { Title, Text } = Typography;\nconst { confirm } = Modal;\n\ninterface WordTranslation {\n  word: string;\n  translation?: string;\n  loading?: boolean;\n}\n\nconst Words = (props: {currentTab: string}) => {\n    const { t } = useI18n();\n    const [data, setData] = useState<string[]>([]);\n    const [wordTranslations, setWordTranslations] = useState<Map<string, WordTranslation>>(new Map());\n    const [detailModalVisible, setDetailModalVisible] = useState(false);\n    const [selectedWord, setSelectedWord] = useState<string>('');\n\n    useEffect(() => {\n        console.log('Words component: Tab changed to', props.currentTab);\n        getTranslatedWords().then((res) => {\n            console.log('Words component: Got', res.length, 'words');\n            setData(res);\n            // 初始化翻译状态\n            const translationMap = new Map<string, WordTranslation>();\n            res.forEach(word => {\n                translationMap.set(word, { word, translation: undefined, loading: false });\n            });\n            setWordTranslations(translationMap);\n        });\n    }, [props.currentTab]);\n\n    const success = (res: string) => {\n        messageManager.success(res, 5);\n    };\n\n    const error = (res: string) => {\n        messageManager.error(res, 5);\n    };\n\n    const handleTranslate = async (word: string) => {\n        // 更新加载状态\n        setWordTranslations(prev => {\n            const newMap = new Map(prev);\n            newMap.set(word, { word, translation: prev.get(word)?.translation, loading: true });\n            return newMap;\n        });\n\n        try {\n            const translatedText = await translateWord(word);\n            // 更新翻译状态\n            setWordTranslations(prev => {\n                const newMap = new Map(prev);\n                newMap.set(word, { word, translation: translatedText, loading: false });\n                return newMap;\n            });\n        } catch (err) {\n            console.error('Translation error:', err);\n            const errorMessage = typeof err === 'string' ? err : \n                               err?.message || 'Translation failed';\n            error(errorMessage);\n            // 更新翻译状态为错误\n            setWordTranslations(prev => {\n                const newMap = new Map(prev);\n                newMap.set(word, { word, translation: 'Translation failed', loading: false });\n                return newMap;\n            });\n        }\n    };\n\n    const handleShowDetail = (word: string) => {\n        setSelectedWord(word);\n        setDetailModalVisible(true);\n    };\n\n    const handleCloseDetail = () => {\n        setDetailModalVisible(false);\n        setSelectedWord('');\n    };\n\n\n\n    const showConfirm = () => {\n        confirm({\n            title: t('clear_history_confirm'),\n            icon: <ExclamationCircleOutlined />,\n            content: t('clear_history_desc'),\n            okText: t('yes_clear_all'),\n            okType: 'danger',\n            cancelText: t('no_keep_it'),\n            onOk() {\n                handleReset();\n            },\n        });\n    };\n\n    const handleReset = () => {\n        chrome.storage.local.remove('translatedWords', () => {\n            setData([]);\n            setWordTranslations(new Map());\n            messageManager.success(t('history_cleared'));\n        });\n    };\n\n    return (\n        <div className={'words-container'}>\n            <div className=\"words-header\">\n                <div className=\"header-content\">\n                    <div className=\"title-section\">\n                        <HistoryOutlined className=\"header-icon\" />\n                        <Title level={4}>{t('translation_history')}</Title>\n                    </div>\n                    <Button \n                        type=\"text\"\n                        size=\"small\"\n                        className=\"reset-btn\"\n                        onClick={showConfirm}\n                    >\n                        {t('reset')}\n                    </Button>\n                </div>\n                <Text type=\"secondary\">{t('click_to_translate')}</Text>\n            </div>\n\n            {data.length > 0 ? (\n                <div className=\"words-grid\">\n                    {data.map((word, index) => {\n                        const wordData = wordTranslations.get(word);\n                        return (\n                            <WordCard\n                                key={word}\n                                word={word}\n                                translation={wordData?.translation}\n                                onTranslate={handleTranslate}\n                                onShowDetail={handleShowDetail}\n                            />\n                        );\n                    })}\n                </div>\n            ) : (\n                <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={\n                        <Text type=\"secondary\">\n                            {t('no_history')}\n                        </Text>\n                    }\n                />\n            )}\n\n            <WordDetailModal\n                visible={detailModalVisible}\n                word={selectedWord}\n                onClose={handleCloseDetail}\n            />\n        </div>\n    )\n}\n\nexport default Words\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/words/WordCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/components/words/WordDetailModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWordDetail'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [fetchWordDetail, visible, word]","fix":{"range":[1547,1562],"text":"[fetchWordDetail, visible, word]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3300,3303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3300,3303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3422,3425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3422,3425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'targetLangCode' is defined but never used.","line":130,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":81},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4552,4555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4552,4555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4674,4677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4674,4677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":199,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6260,6261],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6260,6261],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6260,6261],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6260,6261],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":199,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6274,6275],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6274,6275],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6274,6275],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6274,6275],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Modal, Typography, Divider, Button, Spin, Alert, Card, Tag } from 'antd';\nimport { SoundOutlined, BookOutlined, GlobalOutlined, FileTextOutlined } from '@ant-design/icons';\nimport { useI18n } from '../../utils/i18n';\nimport { getCurrentLanguage } from '../../hooks/useTranslationLanguage';\nimport './WordDetailModal.scss';\n\nconst { Title, Text, Paragraph } = Typography;\n\n// 支持的词典API语言映射（基于dictionaryapi.dev实际支持的语言）\nconst DICTIONARY_API_LANGUAGES = {\n  'en': 'en',\n  'es': 'es',\n  'fr': 'fr',\n  'de': 'de',\n  'it': 'it',\n  'pt': 'pt',\n  'ru': 'ru',\n  'hi': 'hi'\n};\n\n// 检查语言是否支持词典API\nconst isLanguageSupportedByDictionary = (langCode: string): boolean => {\n  return langCode in DICTIONARY_API_LANGUAGES;\n};\n\ninterface WordDetail {\n  word: string;\n  pronunciation?: string;\n  phonetic?: string;\n  meanings: Array<{\n    partOfSpeech: string;\n    definitions: Array<{\n      definition: string;\n      example?: string;\n      synonyms?: string[];\n    }>;\n  }>;\n  origin?: string;\n  etymology?: string;\n}\n\ninterface WordDetailModalProps {\n  visible: boolean;\n  word: string;\n  onClose: () => void;\n}\n\nconst WordDetailModal: React.FC<WordDetailModalProps> = ({\n  visible,\n  word,\n  onClose\n}) => {\n  const { t } = useI18n();\n  const [loading, setLoading] = useState(false);\n  const [wordDetail, setWordDetail] = useState<WordDetail | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (visible && word) {\n      fetchWordDetail(word);\n    }\n  }, [visible, word]);\n\n  const fetchWordDetail = async (searchWord: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 获取当前翻译目标语言\n      const currentLanguage = await getCurrentLanguage();\n      const targetLangCode = currentLanguage.code;\n      \n      console.log(`[WordDetailModal] Target language: ${targetLangCode} (${currentLanguage.name})`);\n      \n      // 检查目标语言是否支持词典API\n      if (isLanguageSupportedByDictionary(targetLangCode)) {\n        console.log(`[WordDetailModal] Using dictionary API for ${targetLangCode}`);\n        await fetchFromDictionaryAPI(searchWord, targetLangCode);\n      } else {\n        console.log(`[WordDetailModal] Dictionary API not supported for ${targetLangCode}, using translation fallback`);\n        await fetchWithTranslationFallback(searchWord, targetLangCode);\n      }\n      \n    } catch (err) {\n      console.error('Error fetching word detail:', err);\n      setError(t('loading_word_details_failed') || 'Failed to fetch word details. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 使用词典API获取详情\n  const fetchFromDictionaryAPI = async (searchWord: string, langCode: string) => {\n    try {\n      const apiLang = DICTIONARY_API_LANGUAGES[langCode];\n      const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/${apiLang}/${searchWord}`);\n      \n      if (!response.ok) {\n        throw new Error('Word not found in dictionary API');\n      }\n      \n      const data = await response.json();\n      const entry = data[0];\n      \n      const detail: WordDetail = {\n        word: entry.word,\n        pronunciation: entry.phonetics?.[0]?.audio || '',\n        phonetic: entry.phonetics?.[0]?.text || '',\n        meanings: entry.meanings.map((meaning: any) => ({\n          partOfSpeech: meaning.partOfSpeech,\n          definitions: meaning.definitions.slice(0, 3).map((def: any) => ({\n            definition: def.definition,\n            example: def.example,\n            synonyms: def.synonyms?.slice(0, 3) || []\n          }))\n        })),\n        origin: entry.origin,\n        etymology: entry.etymology\n      };\n      \n      setWordDetail(detail);\n    } catch (err) {\n      console.warn(`Dictionary API failed for ${langCode}, falling back to translation`);\n      await fetchWithTranslationFallback(searchWord, langCode);\n    }\n  };\n\n  // 使用英文词典作为后备方案（不进行翻译）\n  const fetchWithTranslationFallback = async (searchWord: string, targetLangCode: string) => {\n    try {\n      // 尝试从英文词典API获取信息\n      const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${searchWord}`);\n      \n      if (!response.ok) {\n        throw new Error('Word not found in English dictionary API');\n      }\n      \n      const data = await response.json();\n      const entry = data[0];\n      \n      const detail: WordDetail = {\n        word: entry.word,\n        pronunciation: entry.phonetics?.[0]?.audio || '',\n        phonetic: entry.phonetics?.[0]?.text || '',\n        meanings: entry.meanings.map((meaning: any) => ({\n          partOfSpeech: meaning.partOfSpeech,\n          definitions: meaning.definitions.slice(0, 3).map((def: any) => ({\n            definition: def.definition,\n            example: def.example,\n            synonyms: def.synonyms?.slice(0, 3) || []\n          }))\n        })),\n        origin: entry.origin,\n        etymology: entry.etymology\n      };\n      \n      setWordDetail(detail);\n    } catch (err) {\n      console.error('English dictionary fallback failed:', err);\n      throw err;\n    }\n  };\n\n  const handlePronunciation = () => {\n    if (wordDetail?.pronunciation) {\n      // 播放音频\n      const audio = new Audio(wordDetail.pronunciation);\n      audio.play().catch(console.error);\n    } else {\n      // 使用浏览器TTS\n      if ('speechSynthesis' in window) {\n        const utterance = new SpeechSynthesisUtterance(word);\n        utterance.lang = 'en-US';\n        speechSynthesis.speak(utterance);\n      }\n    }\n  };\n\n  const renderMeanings = () => {\n    if (!wordDetail?.meanings) return null;\n\n    return wordDetail.meanings.map((meaning, index) => (\n      <Card key={index} className=\"meaning-card\" size=\"small\">\n        <div className=\"part-of-speech\">\n          <Tag color=\"blue\">{meaning.partOfSpeech}</Tag>\n        </div>\n        \n        {meaning.definitions.map((def, defIndex) => (\n          <div key={defIndex} className=\"definition-item\">\n            <div className=\"definition\">\n              <Text strong>{defIndex + 1}. </Text>\n              <Text>{def.definition}</Text>\n            </div>\n            \n            {def.example && (\n              <div className=\"example\">\n                <FileTextOutlined className=\"example-icon\" />\n                <Text italic type=\"secondary\">\"{def.example}\"</Text>\n              </div>\n            )}\n            \n            {def.synonyms && def.synonyms.length > 0 && (\n              <div className=\"synonyms\">\n                <Text type=\"secondary\">Synonyms: </Text>\n                {def.synonyms.map((synonym, synIndex) => (\n                  <Tag key={synIndex} className=\"synonym-tag\">{synonym}</Tag>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </Card>\n    ));\n  };\n\n  return (\n    <Modal\n      title={\n        <div className=\"modal-title\">\n          <BookOutlined className=\"title-icon\" />\n          <span>{t('word_details')}</span>\n        </div>\n      }\n      open={visible}\n      onCancel={onClose}\n      footer={null}\n      width={480}\n      className=\"word-detail-modal\"\n    >\n      {loading ? (\n        <div className=\"loading-container\">\n          <Spin size=\"large\" />\n          <Text type=\"secondary\">{t('loading_word_details')}</Text>\n        </div>\n      ) : error ? (\n        <Alert\n          message={t('error')}\n          description={error}\n          type=\"error\"\n          showIcon\n          action={\n            <Button size=\"small\" onClick={() => fetchWordDetail(word)}>\n              {t('retry')}\n            </Button>\n          }\n        />\n      ) : wordDetail ? (\n        <div className=\"word-detail-content\">\n          {/* 单词标题和发音 */}\n          <div className=\"word-header\">\n            <Title level={2} className=\"word-title\">{wordDetail.word}</Title>\n            <div className=\"pronunciation-section\">\n              {wordDetail.phonetic && (\n                <Text className=\"phonetic\">/{wordDetail.phonetic}/</Text>\n              )}\n              <Button\n                type=\"text\"\n                icon={<SoundOutlined />}\n                onClick={handlePronunciation}\n                className=\"pronunciation-btn\"\n                title={t('pronunciation')}\n              />\n            </div>\n          </div>\n\n          <Divider />\n\n          {/* 词义列表 */}\n          <div className=\"meanings-section\">\n            <Title level={4}>\n              <GlobalOutlined className=\"section-icon\" />\n              {t('meanings')}\n            </Title>\n            {renderMeanings()}\n          </div>\n\n          {/* 词源 */}\n          {wordDetail.origin && (\n            <>\n              <Divider />\n              <div className=\"origin-section\">\n                <Title level={4}>\n                  <BookOutlined className=\"section-icon\" />\n                  {t('origin')}\n                </Title>\n                <Paragraph className=\"origin-text\">\n                  {wordDetail.origin}\n                </Paragraph>\n              </div>\n            </>\n          )}\n        </div>\n      ) : null}\n    </Modal>\n  );\n};\n\nexport default WordDetailModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/constant.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'detectedLangName' is assigned a value but never used.","line":92,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const googleMeetCaptionsClassName = '.uYs2ee';\n\n// 翻译提示模板，根据目标语言生成提示\nexport const getTranslationPrompt = (targetLanguage: string): string => {\n  const languageMap = {\n    'zh': '请帮忙把后面的文字翻译成中文,不需要返回任何的解释性文字，直接回答:',\n    'en': 'Please translate the following text into English. No explanatory text needed, just the translation:',\n    'es': 'Por favor, traduce el siguiente texto al español. No es necesario incluir explicaciones, solo la traducción:',\n    'fr': 'Veuillez traduire le texte suivant en français. Pas besoin d\\'explications, juste la traduction:',\n    'de': 'Bitte übersetzen Sie den folgenden Text ins Deutsche. Keine Erklärungen nötig, nur die Übersetzung:',\n    'ja': '以下のテキストを日本語に翻訳してください。説明は不要です、翻訳だけをお願いします:',\n    'ko': '다음 텍스트를 한국어로 번역해 주세요. 설명은 필요 없고 번역만 해주세요:',\n    'ru': 'Пожалуйста, переведите следующий текст на русский язык. Пояснения не нужны, только перевод:',\n    'pt': 'Por favor, traduza o seguinte texto para português. Não é necessário incluir explicações, apenas a tradução:',\n    'it': 'Per favore, traduci il seguente testo in italiano. Non sono necessarie spiegazioni, solo la traduzione:',\n    'ar': 'يرجى ترجمة النص التالي إلى اللغة العربية. لا حاجة لنص توضيحي، فقط الترجمة:',\n    'hi': 'कृपया निम्नलिखित पाठ को हिंदी में अनुवाद करें। व्याख्यात्मक पाठ की आवश्यकता नहीं है, केवल अनुवाद:',\n    'th': 'โปรดแปลข้อความต่อไปนี้เป็นภาษาไทย ไม่จำเป็นต้องมีข้อความอธิบาย เพียงแค่คำแปล:',\n    'vi': 'Vui lòng dịch văn bản sau sang tiếng Việt. Không cần văn bản giải thích, chỉ cần bản dịch:',\n    'fa': 'لطفاً متن زیر را به فارسی ترجمه کنید. نیازی به متن توضیحی نیست، فقط ترجمه:'\n  };\n\n  return languageMap[targetLanguage] || languageMap['zh']; // 默认使用中文\n};\n\n// 摘要提示模板，根据目标语言生成提示\nexport const getSummaryPrompt = (targetLanguage: string): string => {\n  const languageMap = {\n    'zh': '后面是一份会议内容的数据，请帮忙用中文总结一下这个会议说了什么:',\n    'en': 'The following is meeting content data. Please summarize what was discussed in this meeting in English:',\n    'es': 'A continuación hay datos de contenido de una reunión. Por favor, resume en español lo que se dijo en esta reunión:',\n    'fr': 'Voici les données du contenu d\\'une réunion. Veuillez résumer en français ce qui a été dit lors de cette réunion:',\n    'de': 'Im Folgenden finden Sie Daten zum Inhalt eines Meetings. Bitte fassen Sie auf Deutsch zusammen, was in diesem Meeting besprochen wurde:',\n    'ja': '以下は会議の内容データです。この会議で話されたことを日本語で要約してください:',\n    'ko': '다음은 회의 내용 데이터입니다. 이 회의에서 무엇을 논의했는지 한국어로 요약해 주세요:',\n    'ru': 'Ниже приведены данные содержания встречи. Пожалуйста, подведите итог на русском языке о том, что обсуждалось на этой встрече:',\n    'pt': 'A seguir estão os dados do conteúdo de uma reunião. Por favor, resuma em português o que foi dito nesta reunião:',\n    'it': 'Di seguito sono riportati i dati del contenuto di una riunione. Si prega di riassumere in italiano ciò che è stato detto in questa riunione:',\n    'ar': 'فيما يلي بيانات محتوى الاجتماع. يرجى تلخيص ما تم مناقشته في هذا الاجتماع باللغة العربية:',\n    'hi': 'निम्नलिखित एक बैठक सामग्री डेटा है। कृपया इस बैठक में क्या कहा गया था, इसका सारांश हिंदी में दें:',\n    'th': 'ต่อไปนี้เป็นข้อมูลเนื้อหาการประชุม โปรดสรุปสิ่งที่พูดในการประชุมนี้เป็นภาษาไทย:',\n    'vi': 'Sau đây là dữ liệu nội dung cuộc họp. Vui lòng tóm tắt những gì đã được thảo luận trong cuộc họp này bằng tiếng Việt:',\n    'fa': 'در ادامه داده‌های محتوای جلسه آمده است. لطفاً آنچه در این جلسه مورد بحث قرار گرفته است را به فارسی خلاصه کنید:'\n  };\n\n  return languageMap[targetLanguage] || languageMap['zh']; // 默认使用中文\n};\n\n// Polish提示模板，根据检测到的语言生成提示\nexport const getPolishPrompt = (detectedLanguage: string): string => {\n  const languageMap = {\n    'zh': '请帮忙把后面的中文优化成通俗易懂的语句,不需要返回任何的解释性文字，直接回答:',\n    'en': 'Please help polish the following English text to make it more clear and understandable. No explanatory text needed, just the polished version:',\n    'es': 'Por favor, ayuda a pulir el siguiente texto en español para hacerlo más claro y comprensible. No es necesario incluir explicaciones, solo la versión pulida:',\n    'fr': 'Veuillez aider à polir le texte français suivant pour le rendre plus clair et compréhensible. Pas besoin d\\'explications, juste la version polie:',\n    'de': 'Bitte helfen Sie dabei, den folgenden deutschen Text zu polieren, um ihn klarer und verständlicher zu machen. Keine Erklärungen nötig, nur die polierte Version:',\n    'ja': '以下の日本語テキストをより明確で理解しやすくするために磨いてください。説明は不要です、磨かれたバージョンだけをお願いします:',\n    'ko': '다음 한국어 텍스트를 더 명확하고 이해하기 쉽게 다듬어 주세요. 설명은 필요 없고 다듬어진 버전만 해주세요:',\n    'ru': 'Пожалуйста, помогите отполировать следующий русский текст, чтобы сделать его более ясным и понятным. Пояснения не нужны, только отполированная версия:',\n    'pt': 'Por favor, ajude a polir o seguinte texto em português para torná-lo mais claro e compreensível. Não é necessário incluir explicações, apenas a versão polida:',\n    'it': 'Per favore, aiuta a rifinire il seguente testo italiano per renderlo più chiaro e comprensibile. Non sono necessarie spiegazioni, solo la versione rifinita:',\n    'ar': 'يرجى المساعدة في تحسين النص العربي التالي لجعله أكثر وضوحاً وفهماً. لا حاجة لنص توضيحي، فقط النسخة المحسّنة:',\n    'hi': 'कृपया निम्नलिखित हिंदी पाठ को अधिक स्पष्ट और समझने योग्य बनाने के लिए इसे परिष्कृत करने में सहायता करें। व्याख्यात्मक पाठ की आवश्यकता नहीं है, केवल परिष्कृत संस्करण:',\n    'th': 'โปรดช่วยปรับปรุงข้อความภาษาไทยต่อไปนี้ให้ชัดเจนและเข้าใจง่ายขึ้น ไม่จำเป็นต้องมีข้อความอธิบาย เพียงแค่เวอร์ชันที่ปรับปรุงแล้ว:',\n    'vi': 'Vui lòng giúp cải thiện văn bản tiếng Việt sau đây để làm cho nó rõ ràng và dễ hiểu hơn. Không cần văn bản giải thích, chỉ cần phiên bản được cải thiện:',\n    'fa': 'لطفاً در بهبود متن فارسی زیر کمک کنید تا آن را واضح‌تر و قابل فهم‌تر کنید. نیازی به متن توضیحی نیست، فقط نسخه بهبود یافته:'\n  };\n\n  return languageMap[detectedLanguage] || languageMap['en']; // 默认使用英文\n};\n\n// Analysis提示模板，根据检测到的语言和翻译语言生成提示\nexport const getAnalysisPrompt = (detectedLanguage: string, translationLanguage: string): string => {\n  const languageNames = {\n    'zh': '中文',\n    'en': 'English',\n    'es': 'Español',\n    'fr': 'Français',\n    'de': 'Deutsch',\n    'ja': '日本語',\n    'ko': '한국어',\n    'ru': 'Русский',\n    'pt': 'Português',\n    'it': 'Italiano',\n    'ar': 'العربية',\n    'hi': 'हिन्दी',\n    'th': 'ไทย',\n    'vi': 'Tiếng Việt',\n    'fa': 'فارسی'\n  };\n\n  const detectedLangName = languageNames[detectedLanguage] || 'English';\n  const translationLangName = languageNames[translationLanguage] || '中文';\n  \n  const analysisPrompts = {\n    'zh': `检测后面文字的语言，并用${translationLangName}精炼地分析语法要点。如果发现语法错误，请着重指出并给出正确形式，保持简洁:`,\n    'en': `Detect the language of the following text and provide a concise grammar analysis in ${translationLangName}. If there are grammar errors, emphasize them and provide correct forms, keep it brief:`,\n    'es': `Detecta el idioma del siguiente texto y proporciona un análisis gramatical conciso en ${translationLangName}. Si hay errores gramaticales, enfatízalos y proporciona las formas correctas, mantén la brevedad:`,\n    'fr': `Détectez la langue du texte suivant et fournissez une analyse grammaticale concise en ${translationLangName}. S'il y a des erreurs grammaticales, mettez-les en évidence et fournissez les formes correctes, restez bref:`,\n    'de': `Erkennen Sie die Sprache des folgenden Textes und geben Sie eine prägnante grammatische Analyse in ${translationLangName}. Bei grammatischen Fehlern betonen Sie diese und geben Sie korrekte Formen an, bleiben Sie kurz:`,\n    'ja': `以下のテキストの言語を検出し、${translationLangName}で簡潔な文法分析を提供してください。文法エラーがある場合は、それを強調し、正しい形を提供してください、簡潔に:`,\n    'ko': `다음 텍스트의 언어를 감지하고 ${translationLangName}로 간결한 문법 분석을 제공해 주세요. 문법 오류가 있다면 강조하고 올바른 형태를 제공해 주세요, 간단히:`,\n    'ru': `Определите язык следующего текста и предоставьте краткий грамматический анализ на ${translationLangName}. При наличии грамматических ошибок подчеркните их и предоставьте правильные формы, будьте лаконичны:`,\n    'pt': `Detecte o idioma do seguinte texto e forneça uma análise gramatical concisa em ${translationLangName}. Se houver erros gramaticais, enfatize-os e forneça as formas corretas, seja breve:`,\n    'it': `Rileva la lingua del seguente testo e fornisci un'analisi grammaticale concisa in ${translationLangName}. Se ci sono errori grammaticali, enfatizzali e fornisci le forme corrette, sii breve:`,\n    'ar': `اكتشف لغة النص التالي وقدم تحليلاً نحوياً موجزاً باللغة ${translationLangName}. إذا كانت هناك أخطاء نحوية، أكد عليها وقدم الأشكال الصحيحة، كن مختصراً:`,\n    'hi': `निम्नलिखित पाठ की भाषा का पता लगाएं और ${translationLangName} में संक्षिप्त व्याकरण विश्लेषण प्रदान करें। यदि व्याकरण त्रुटियां हैं, तो उन्हें जोर दें और सही रूप प्रदान करें, संक्षिप्त रखें:`,\n    'th': `ตรวจจับภาษาของข้อความต่อไปนี้และให้การวิเคราะห์ไวยากรณ์ที่กระชับเป็น${translationLangName}. หากมีข้อผิดพลาดทางไวยากรณ์ ให้เน้นและให้รูปแบบที่ถูกต้อง, ให้สั้นๆ:`,\n    'vi': `Phát hiện ngôn ngữ của văn bản sau và cung cấp phân tích ngữ pháp ngắn gọn bằng ${translationLangName}. Nếu có lỗi ngữ pháp, hãy nhấn mạnh và cung cấp dạng đúng, giữ ngắn gọn:`,\n    'fa': `زبان متن زیر را تشخیص دهید و تحلیل دستوری مختصر به ${translationLangName} ارائه دهید. اگر اشتباهات دستوری وجود دارد، آنها را تأکید کنید و اشکال صحیح را ارائه دهید، مختصر باشید:`\n  };\n\n  return analysisPrompts[translationLanguage] || analysisPrompts['zh']; // 默认使用中文\n};\n\nexport const PROMPT = {\n  TRANSLATE: getTranslationPrompt('zh'), // 默认中文，将在运行时更新\n  POLISH: '请帮忙把后面的英文优化成通俗易懂的语句,不需要返回任何的解释性文字，直接回答:', // 默认值，将在运行时更新\n  ANALYSIS: '请检查后面的英文是否有语法或者单词使用上不正确的地方,请简单解释下，字数不要太长:', // 默认值，将在运行时更新\n  ASK: '{option} :',\n  EXPLAIN: '在{option}领域里面，请简洁的解释一下这个名词:',\n  DEFAULT: '',\n};\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/contents/enable-side-panel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/contents/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_sender' is defined but never used.","line":32,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_sendResponse' is defined but never used.","line":32,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import getCaptions from 'google-meeting-captions-resolver';\nimport type { PlasmoCSConfig } from \"plasmo\"\nimport type {Captions} from \"~node_modules/google-meeting-captions-resolver\";\nimport getIsExtensionDisabled from '../utils/get-is-extension-disabled';\n\nlet isExtensionEnabled = true;\n\n\nconst addOrUpdateRecords = (incomingData: Captions) => {\n    if (!isExtensionEnabled) {return}\n    // 从content script发送消息\n    console.log('context.js', 'addOrUpdateRecords', incomingData)\n    chrome.runtime.sendMessage({\n        data: {...incomingData, timestamp: new Date().getTime(), meetingName: document.title},\n        action: 'addOrUpdateRecords'\n    });\n};\n\nconst start = () => {\n    getIsExtensionDisabled().then((disabled: boolean) => {\n        isExtensionEnabled = !disabled;\n        if (!disabled) {\n            getCaptions(undefined, (v) => {\n                console.log('captions', v);\n                addOrUpdateRecords(v)\n            })\n        }\n    });\n}\n\nconsole.log('content.ts', 'loaded')\nchrome.runtime.onMessage.addListener((message, _sender, _sendResponse) => {\n    if (message.action === 'toggleSwitch') {\n        start()\n    }\n});\nstart();\n\nexport const config: PlasmoCSConfig = {\n    matches: [\"https://meet.google.com/*\"],\n    all_frames: true\n}\n\n// @ts-expect-error - Adding debug property to window\nwindow.huhai = addOrUpdateRecords\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/contents/translate-tips.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/contexts/DateContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/contexts/GoogleAuthContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAuthStatus'. Either include it or remove the dependency array.","line":244,"column":6,"nodeType":"ArrayExpression","endLine":244,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuthStatus]","fix":{"range":[7691,7693],"text":"[checkAuthStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { GoogleDriveService } from '~utils/google-drive';\nimport { message } from 'antd';\n\n// 添加调试信息\nconsole.log('GoogleAuthContext loaded, chrome.identity available:', !!window.chrome?.identity);\n\ninterface GoogleUser {\n  email: string;\n  name: string;\n  picture: string;\n}\n\ninterface GoogleAuthContextType {\n  isAuthenticated: boolean;\n  user: GoogleUser | null;\n  loading: boolean;\n  login: () => Promise<boolean>;\n  logout: () => Promise<void>;\n}\n\nconst GoogleAuthContext = createContext<GoogleAuthContextType>({\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  login: async () => false,\n  logout: async () => {}\n});\n\nexport const useGoogleAuth = () => useContext(GoogleAuthContext);\n\ninterface GoogleAuthProviderProps {\n  children: ReactNode;\n}\n\nexport const GoogleAuthProvider: React.FC<GoogleAuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState<GoogleUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const driveService = GoogleDriveService.getInstance();\n\n  // 获取用户信息\n  const fetchUserInfo = async (token: string) => {\n    console.log('Fetching user info with token:', token.substring(0, 5) + '...');\n    try {\n      // 添加更多调试信息\n      console.log('Making request to Google userinfo API...');\n      console.log('Request URL: https://www.googleapis.com/oauth2/v1/userinfo?alt=json');\n      console.log('Authorization header: Bearer ' + token.substring(0, 5) + '...');\n      \n      const response = await fetch('https://www.googleapis.com/oauth2/v1/userinfo?alt=json', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      console.log('User info response status:', response.status);\n      console.log('User info response headers:', JSON.stringify([...response.headers.entries()]));\n      \n      if (response.ok) {\n        const userData = await response.json();\n        console.log('User info fetched successfully:', userData);\n        setUser({\n          email: userData.email,\n          name: userData.name,\n          picture: userData.picture\n        });\n        return true;\n      }\n      \n      const errorText = await response.text();\n      console.error('Failed to fetch user info:', response.status, response.statusText);\n      console.error('Error details:', errorText);\n      \n      // 显示更具体的错误信息\n      if (response.status === 401) {\n        message.error('Authentication failed: Token is invalid or expired. Please try logging in again.');\n        // 尝试清除缓存的token\n        chrome.identity.removeCachedAuthToken({ token }, () => {\n          console.log('Removed cached auth token due to 401 error');\n        });\n      } else {\n        message.error(`Failed to fetch user info: ${response.status} ${response.statusText}`);\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Error fetching user info:', error);\n      message.error('Error fetching user info: ' + (error.message || 'Unknown error'));\n      return false;\n    }\n  };\n\n  // 检查认证状态\n  const checkAuthStatus = async () => {\n    console.log('Checking auth status...');\n    setLoading(true);\n    \n    if (!window.chrome?.identity) {\n      console.error('Chrome identity API not available');\n      message.error('Chrome identity API not available');\n      setLoading(false);\n      return;\n    }\n    \n    try {\n      // 获取当前token\n      const token = await new Promise<string | null>((resolve) => {\n        chrome.identity.getAuthToken({ interactive: false }, (token) => {\n          if (chrome.runtime.lastError) {\n            console.log('No active session:', chrome.runtime.lastError);\n            resolve(null);\n          } else {\n            console.log('Got auth token:', token?.substring(0, 5) + '...');\n            resolve(token);\n          }\n        });\n      });\n\n      if (token) {\n        const userInfoSuccess = await fetchUserInfo(token);\n        console.log('User info fetch success:', userInfoSuccess);\n        setIsAuthenticated(userInfoSuccess);\n      } else {\n        console.log('No token available, user is not authenticated');\n        setIsAuthenticated(false);\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 登录\n  const login = async (): Promise<boolean> => {\n    console.log('Attempting to login...');\n    setLoading(true);\n    \n    if (!window.chrome?.identity) {\n      console.error('Chrome identity API not available');\n      message.error('Chrome identity API not available');\n      setLoading(false);\n      return false;\n    }\n    \n    try {\n      // 先清除可能存在的缓存token\n      await new Promise<void>((resolve) => {\n        chrome.identity.getAuthToken({ interactive: false }, (token) => {\n          if (token) {\n            console.log('Removing existing cached token before login...');\n            chrome.identity.removeCachedAuthToken({ token }, () => {\n              console.log('Existing token removed');\n              resolve();\n            });\n          } else {\n            console.log('No existing token to remove');\n            resolve();\n          }\n        });\n      });\n      \n      console.log('Calling driveService.authenticate()...');\n      const success = await driveService.authenticate();\n      console.log('Authentication result:', success);\n      \n      if (success) {\n        console.log('Authentication successful, checking auth status...');\n        await checkAuthStatus();\n        return true;\n      } else {\n        console.log('Authentication failed');\n        message.error('Failed to authenticate with Google. Please try again.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      message.error('Login error: ' + (error.message || 'Unknown error'));\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 退出\n  const logout = async (): Promise<void> => {\n    console.log('Logging out...');\n    setLoading(true);\n    \n    if (!window.chrome?.identity) {\n      console.error('Chrome identity API not available');\n      message.error('Chrome identity API not available');\n      setLoading(false);\n      return;\n    }\n    \n    try {\n      // 获取当前token\n      chrome.identity.getAuthToken({ interactive: false }, (token) => {\n        if (token) {\n          console.log('Removing cached auth token...');\n          // 撤销token\n          chrome.identity.removeCachedAuthToken({ token }, () => {\n            console.log('Token removed, revoking access...');\n            // 撤销Google的授权\n            fetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`)\n              .then(() => {\n                setIsAuthenticated(false);\n                setUser(null);\n                console.log('Logged out successfully');\n              })\n              .catch(error => {\n                console.error('Error revoking token:', error);\n              })\n              .finally(() => {\n                setLoading(false);\n              });\n          });\n        } else {\n          console.log('No token to revoke');\n          setLoading(false);\n        }\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n      setLoading(false);\n    }\n  };\n\n  // 初始化时检查认证状态\n  useEffect(() => {\n    console.log('GoogleAuthProvider mounted, checking auth status...');\n    // 延迟一点检查认证状态，确保Chrome API已加载\n    const timer = setTimeout(() => {\n      checkAuthStatus();\n    }, 500);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  // 监控认证状态变化\n  useEffect(() => {\n    console.log('Auth state updated:', { isAuthenticated, user, loading });\n  }, [isAuthenticated, user, loading]);\n\n  return (\n    <GoogleAuthContext.Provider value={{ isAuthenticated, user, loading, login, logout }}>\n      {children}\n    </GoogleAuthContext.Provider>\n  );\n};\n\nexport default GoogleAuthContext; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useAutoTranslate.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3314,3317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3314,3317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { getCurrentTranslationProvider } from './useTranslationProvider';\nimport { translateByGoogle, translateByMicrosoft, translateByAI } from '../utils/translators';\nimport { getTranslationFrequency, frequencyToMs } from './useTranslationFrequency';\nimport useI18n from \"../utils/i18n\";\n\n// 存储在Chrome存储中的键名\nconst STORAGE_KEY = 'autoTranslateEnabled';\n\n/**\n * 管理自动翻译开关的Hook\n * @returns [enabled, setEnabled] - 当前状态和设置状态的函数\n */\nexport const useAutoTranslate = (): [boolean, (enabled: boolean) => void] => {\n  const [enabled, setEnabledState] = useState<boolean>(false);\n\n  // 初始化时从Chrome存储中加载设置\n  useEffect(() => {\n    chrome.storage.sync.get([STORAGE_KEY], (result) => {\n      const autoTranslateEnabled = result[STORAGE_KEY] ?? false;\n      setEnabledState(autoTranslateEnabled);\n    });\n  }, []);\n\n  // 设置状态并保存到Chrome存储\n  const setEnabled = (newEnabled: boolean) => {\n    setEnabledState(newEnabled);\n    chrome.storage.sync.set({ [STORAGE_KEY]: newEnabled }, () => {\n      console.log(`Auto translate ${newEnabled ? 'enabled' : 'disabled'}`);\n    });\n  };\n\n  return [enabled, setEnabled];\n};\n\n/**\n * 获取当前自动翻译状态\n * @returns Promise<boolean> - 当前状态\n */\nexport const getAutoTranslateEnabled = async (): Promise<boolean> => {\n  return new Promise((resolve) => {\n    chrome.storage.sync.get([STORAGE_KEY], (result) => {\n      resolve(result[STORAGE_KEY] ?? false);\n    });\n  });\n};\n\n/**\n * 自动翻译内容的Hook\n * @param content - 需要翻译的内容\n * @param timestamp - 内容产生的时间戳\n * @returns 翻译相关的状态和方法\n */\nexport const useAutoTranslateContent = (content: string, timestamp: number) => {\n  const { t } = useI18n();\n  const [autoTranslatedContent, setAutoTranslatedContent] = useState<string>('');\n  const [isAutoTranslating, setIsAutoTranslating] = useState(false);\n  \n  // 用于管理翻译逻辑的refs\n  const autoTranslateTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const lastTranslatedContentRef = useRef<string>('');\n  const pendingTextRef = useRef<string>('');\n\n  // 检查内容是否在2分钟内产生\n  const isContentRecent = useCallback((contentTimestamp: number): boolean => {\n    const now = Date.now();\n    const twoMinutesAgo = now - (2 * 60 * 1000); // 2分钟 = 2 * 60 * 1000毫秒\n    return contentTimestamp > twoMinutesAgo;\n  }, []);\n\n  // 执行翻译的核心函数\n  const executeTranslation = useCallback(async (textToTranslate: string) => {\n    try {\n      setIsAutoTranslating(true);\n      lastTranslatedContentRef.current = textToTranslate;\n      \n      // 获取当前选择的翻译服务提供商 - 添加双重验证\n      let provider = await getCurrentTranslationProvider();\n      console.log(`[executeTranslation] Current translation provider: ${provider}`);\n      \n      // 双重验证：直接从存储中再次获取\n      const verificationResult = await new Promise<string>((resolve) => {\n        chrome.storage.sync.get(['translationProvider'], (result) => {\n          const storedProvider = result['translationProvider'] || 'microsoft';\n          console.log(`[executeTranslation] Direct storage verification: ${storedProvider}`);\n          resolve(storedProvider);\n        });\n      });\n      \n      // 如果两次获取的结果不一致，使用存储中的值\n      if (provider !== verificationResult) {\n        console.warn(`[executeTranslation] Provider mismatch! Function: ${provider}, Storage: ${verificationResult}. Using storage value.`);\n        provider = verificationResult as any;\n      }\n      \n      let translatedText: string;\n      \n      // 根据不同的提供商调用相应的翻译函数\n      switch (provider) {\n        case 'google':\n          console.log('[executeTranslation] Using Google Translate');\n          translatedText = await translateByGoogle(textToTranslate);\n          break;\n        case 'microsoft':\n          console.log('[executeTranslation] Using Microsoft Translator');\n          translatedText = await translateByMicrosoft(textToTranslate);\n          break;\n        case 'ai':\n        default:\n          console.log('[executeTranslation] Using AI Translation');\n          translatedText = await translateByAI(textToTranslate);\n          break;\n      }\n      \n      console.log(`[executeTranslation] Translation completed with ${provider}: ${translatedText.substring(0, 100)}...`);\n      \n      // 检查是否是错误消息\n      const isErrorMessage = translatedText.includes(t('translation_failed')) || \n                            translatedText.includes(t('translation_service_not_configured')) ||\n                            translatedText.includes(t('translation_network_error')) ||\n                            translatedText.includes(t('translation_service_unavailable'));\n      \n      if (!isErrorMessage) {\n        setAutoTranslatedContent(translatedText);\n      }\n    } catch (error) {\n      console.error('Auto translation error:', error);\n    } finally {\n      // 获取用户配置的翻译频率并转换为毫秒\n      const frequency = await getTranslationFrequency();\n      const delayMs = frequencyToMs(frequency);\n      \n      setTimeout(() => {\n        setIsAutoTranslating(false);\n        if (pendingTextRef.current) {\n          const pendingText = pendingTextRef.current;\n          pendingTextRef.current = ''; // 清空pending\n          executeTranslation(pendingText);\n        }\n      }, delayMs);      \n      // 翻译完成后检查是否有pending的文本需要处理\n    }\n  }, [t]);\n\n  // 自动翻译函数 - 带pending机制\n  const performAutoTranslation = useCallback(async (textToTranslate: string) => {\n    if (!textToTranslate || textToTranslate === lastTranslatedContentRef.current) {\n      return;\n    }\n\n    // 如果当前正在翻译，将新请求存储到pending\n    if (isAutoTranslating) {\n      pendingTextRef.current = textToTranslate;\n      return;\n    }\n\n    // 如果没有正在进行的翻译，立即执行\n    await executeTranslation(textToTranslate);\n  }, [isAutoTranslating, executeTranslation]);\n\n  // 监听内容变化，执行自动翻译\n  useEffect(() => {\n    const checkAutoTranslate = async () => {\n      const autoTranslateEnabled = await getAutoTranslateEnabled();\n      \n      // 检查内容是否已经被翻译过\n      if (content && content === lastTranslatedContentRef.current) {\n        return;\n      }\n      \n      // 检查是否启用自动翻译、有内容、且内容是最近2分钟内产生的\n      if (autoTranslateEnabled && content && isContentRecent(timestamp)) {\n        console.log('Content is recent, performing auto translation');\n        performAutoTranslation(content);\n      } else {\n        // 如果自动翻译被禁用或内容过旧，清除翻译内容和pending\n        if (!autoTranslateEnabled) {\n          console.log('Auto translate disabled, clearing content');\n        } else if (!isContentRecent(timestamp)) {\n          console.log('Content is too old (>2 minutes), skipping translation');\n        }\n        setAutoTranslatedContent('');\n        lastTranslatedContentRef.current = '';\n        pendingTextRef.current = '';\n      }\n    };\n\n    checkAutoTranslate();\n\n    // 清理函数\n    return () => {\n       \n    };\n  }, [content, timestamp, performAutoTranslation, isContentRecent]);\n\n  // 测试翻译提供商获取功能\n  useEffect(() => {\n    const testTranslationProvider = async () => {\n      try {\n        const provider = await getCurrentTranslationProvider();\n        console.log(`[useAutoTranslateContent] Test - Current provider: ${provider}`);\n        \n        // 验证存储中的实际值\n        chrome.storage.sync.get(['translationProvider'], (result) => {\n          console.log(`[useAutoTranslateContent] Test - Storage contains:`, result);\n        });\n      } catch (error) {\n        console.error('[useAutoTranslateContent] Test - Error getting provider:', error);\n      }\n    };\n\n    testTranslationProvider();\n  }, []); // 只在组件挂载时执行一次\n\n  // 清理函数 - 当组件卸载时清理所有状态\n  const cleanup = useCallback(() => {\n    if (autoTranslateTimeoutRef.current) {\n      clearTimeout(autoTranslateTimeoutRef.current);\n    }\n    setAutoTranslatedContent('');\n    lastTranslatedContentRef.current = '';\n    pendingTextRef.current = '';\n  }, []);\n\n  return {\n    autoTranslatedContent,\n    isAutoTranslating,\n    cleanup\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useDomain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useHighLightWords.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useLoading.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useScroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useTranscripts.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[904,907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[904,907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_sender' is defined but never used.","line":23,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_sendResponse' is defined but never used.","line":23,"column":74,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":87},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[938,941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[938,941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState, useCallback} from \"react\";\nimport type {Captions} from \"~node_modules/google-meeting-captions-resolver\";\nimport { useDateContext } from '../contexts/DateContext';\n\nexport type Transcript = Captions & {timestamp: number, meetingName: string};\n\nconst useTranscripts = () : [Transcript[], React.Dispatch<React.SetStateAction<Transcript[]>>] => {\n    const [currentDayTranscripts, setCurrentDayTranscripts] = useState<Transcript[]>([]);\n    const { selectedDate } = useDateContext();\n\n    const loadContent = useCallback(() => {\n        console.log('useTranscripts.js', 'loadContent', selectedDate?.toString())\n        chrome.runtime.sendMessage({\n            action: 'get-transcripts',\n            date: selectedDate,\n        });\n    }, [selectedDate]);\n\n    useEffect(() => {\n        loadContent();\n    }, [loadContent]);\n\n    const handleChromeMessage = useCallback((message: any, _sender: any, _sendResponse: any) => {\n        if (message.action === 'refresh-transcripts') {\n            setCurrentDayTranscripts(prevTranscripts => {\n                if (message.data.length !== prevTranscripts.length) {\n                    return message.data;\n                }\n                \n                const isDifferent = message.data.some((item: Transcript, index: number) => {\n                    return item.session !== prevTranscripts[index].session ||\n                           item.timestamp !== prevTranscripts[index].timestamp;\n                });\n                \n                return isDifferent ? message.data : prevTranscripts;\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        chrome.runtime.onMessage.addListener(handleChromeMessage);\n        return () => {\n            chrome.runtime.onMessage.removeListener(handleChromeMessage);\n        };\n    }, [handleChromeMessage]);\n\n    return [currentDayTranscripts, setCurrentDayTranscripts];\n};\n\nexport default useTranscripts;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useTranslationFrequency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useTranslationLanguage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useTranslationProvider.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_reject' is defined but never used.","line":79,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\n// 存储在Chrome存储中的键名\nconst STORAGE_KEY = 'translationProvider';\n\n// 翻译服务提供商类型\nexport type TranslationProvider = 'google' | 'microsoft' | 'ai';\n\n// 默认翻译服务提供商\nconst defaultProvider: TranslationProvider = 'microsoft';\n\n/**\n * 管理翻译服务提供商的Hook\n * @returns [provider, setProvider] - 当前提供商和设置提供商的函数\n */\nexport const useTranslationProvider = (): [TranslationProvider, (provider: TranslationProvider) => void] => {\n  const [provider, setProviderState] = useState<TranslationProvider>(defaultProvider);\n\n  // 初始化时从Chrome存储中加载设置\n  useEffect(() => {\n    chrome.storage.sync.get([STORAGE_KEY], (result) => {\n      const translationProvider = result[STORAGE_KEY] || defaultProvider;\n      setProviderState(translationProvider);\n    });\n  }, []);\n\n  // 设置提供商并保存到Chrome存储\n  const setProvider = (newProvider: TranslationProvider) => {\n    console.log(`[setProvider] Setting translation provider to: ${newProvider}`);\n    \n    // 验证提供商值的有效性\n    if (!['google', 'microsoft', 'ai'].includes(newProvider)) {\n      console.error(`[setProvider] Invalid provider: ${newProvider}`);\n      return;\n    }\n    \n    // 立即更新本地状态\n    setProviderState(newProvider);\n    \n    // 保存到Chrome存储\n    chrome.storage.sync.set({ [STORAGE_KEY]: newProvider }, () => {\n      // 检查Chrome runtime错误\n      if (chrome.runtime.lastError) {\n        console.error(`[setProvider] Chrome runtime error:`, chrome.runtime.lastError);\n        // 如果保存失败，恢复到之前的状态\n        setProviderState(provider);\n        return;\n      }\n      \n      console.log(`[setProvider] Translation provider saved to storage: ${newProvider}`);\n      console.log(`Translation provider set to ${newProvider}`);\n      \n      // 验证保存是否成功\n      chrome.storage.sync.get([STORAGE_KEY], (result) => {\n        if (chrome.runtime.lastError) {\n          console.error(`[setProvider] Verification failed:`, chrome.runtime.lastError);\n          return;\n        }\n        \n        console.log(`[setProvider] Verification - Storage now contains:`, result);\n        \n        if (result[STORAGE_KEY] !== newProvider) {\n          console.error(`[setProvider] Storage verification failed! Expected: ${newProvider}, Got: ${result[STORAGE_KEY]}`);\n        } else {\n          console.log(`[setProvider] Storage verification successful!`);\n        }\n      });\n    });\n  };\n\n  return [provider, setProvider];\n};\n\n/**\n * 获取当前翻译服务提供商\n * @returns Promise<TranslationProvider> - 当前提供商\n */\nexport const getCurrentTranslationProvider = async (): Promise<TranslationProvider> => {\n  return new Promise((resolve, _reject) => {\n    // 添加超时机制\n    const timeout = setTimeout(() => {\n      console.warn('[getCurrentTranslationProvider] Timeout, using default provider');\n      resolve(defaultProvider);\n    }, 5000); // 5秒超时\n\n    try {\n      chrome.storage.sync.get([STORAGE_KEY], (result) => {\n        clearTimeout(timeout);\n        \n        // 检查Chrome runtime错误\n        if (chrome.runtime.lastError) {\n          console.error('[getCurrentTranslationProvider] Chrome runtime error:', chrome.runtime.lastError);\n          resolve(defaultProvider);\n          return;\n        }\n\n        const provider = result[STORAGE_KEY] || defaultProvider;\n        console.log(`[getCurrentTranslationProvider] Storage result:`, result);\n        console.log(`[getCurrentTranslationProvider] Selected provider: ${provider}`);\n        \n        // 验证提供商值的有效性\n        if (!['google', 'microsoft', 'ai'].includes(provider)) {\n          console.warn(`[getCurrentTranslationProvider] Invalid provider: ${provider}, using default`);\n          resolve(defaultProvider);\n          return;\n        }\n        \n        resolve(provider as TranslationProvider);\n      });\n    } catch (error) {\n      clearTimeout(timeout);\n      console.error('[getCurrentTranslationProvider] Error accessing storage:', error);\n      resolve(defaultProvider);\n    }\n  });\n};\n\n/**\n * 获取翻译服务提供商的显示名称\n * @param provider - 提供商类型\n * @returns 显示名称\n */\nexport const getProviderDisplayName = (provider: TranslationProvider): string => {\n  switch (provider) {\n    case 'google':\n      return 'Google Translate';\n    case 'microsoft':\n      return 'Microsoft Translator';\n    case 'ai':\n      return 'AI Translation';\n    default:\n      return 'Google Translate';\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/hooks/useUILanguage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/options.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":51,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messageApi' is assigned a value but never used.","line":52,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contextHolder' is assigned a value but never used.","line":52,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState, useEffect} from \"react\";\nimport './styles/options.scss';\nimport './styles/sidebar.scss';\nimport {message} from \"antd\";\nimport GoogleDriveIntegration from '~components/options/GoogleDriveIntegration';\nimport Calendar from '~components/options/Calendar';\nimport Sidebar from '~components/options/Sidebar';\nimport TranslationSettings from '~components/options/TranslationSettings';\nimport UILanguageSettings from '~components/options/UILanguageSettings';\nimport ClearCaptionsSettings from '~components/options/ClearCaptionsSettings';\nimport ExtensionSettings from '~components/options/ExtensionSettings';\nimport AISettings from '~components/options/ai-settings';\nimport Welcome from '~pages/welcome';\nimport useI18n from './utils/i18n';\nimport { GoogleAuthProvider } from './contexts/GoogleAuthContext';\n\n// 添加调试信息\nconsole.log('Options page loaded, GoogleAuthProvider imported:', !!GoogleAuthProvider);\n\n// 路由映射表 - 将路由路径映射到对应的标签页key\nconst ROUTE_MAPPING = {\n  'ai-settings': '1',\n  'google-drive': '2',\n  'calendar': '3',\n  'translation': '4',\n  'ui-language': '5',\n  'extension': '6',\n  'clear-captions': '7',\n  'welcome': 'welcome'\n};\n\n// 反向映射表 - 将标签页key映射到对应的路由路径\nconst KEY_TO_ROUTE = {\n  '1': 'ai-settings',\n  '2': 'google-drive',\n  '3': 'calendar',\n  '4': 'translation',\n  '5': 'ui-language',\n  '6': 'extension',\n  '7': 'clear-captions',\n  'welcome': 'welcome'\n};\n\nconst Options = () => {\n    // 默认使用URL哈希中的标签页key，如果没有则使用'1'\n    const [activeKey, setActiveKey] = useState(() => {\n      // 从URL哈希中获取路由路径\n      const hash = window.location.hash.substring(1); // 移除#号\n      return ROUTE_MAPPING[hash] || '1'; // 返回对应的key，如果没有则使用默认值'1'\n    });\n    const { t } = useI18n();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    // 处理标签切换\n    const handleTabChange = (key: string) => {\n      setActiveKey(key);\n      // 更新URL哈希\n      const route = KEY_TO_ROUTE[key] || 'ai-settings';\n      window.location.hash = route;\n    };\n\n    // 监听URL哈希变化\n    useEffect(() => {\n      const handleHashChange = () => {\n        const hash = window.location.hash.substring(1);\n        const newKey = ROUTE_MAPPING[hash] || '1';\n        if (newKey !== activeKey) {\n          setActiveKey(newKey);\n        }\n      };\n\n      window.addEventListener('hashchange', handleHashChange);\n      return () => {\n        window.removeEventListener('hashchange', handleHashChange);\n      };\n    }, [activeKey]);\n\n    // 初始加载时设置URL哈希（如果没有的话）\n    useEffect(() => {\n      if (!window.location.hash) {\n        window.location.hash = 'ai-settings';\n      }\n    }, []);\n\n    // 添加调试信息\n    useEffect(() => {\n        console.log('Options component mounted, GoogleAuthProvider will be used');\n    }, []);\n\n    const renderContent = () => {\n        switch (activeKey) {\n            case '1':\n                return <AISettings />;\n            case '2':\n                console.log('Rendering GoogleDriveIntegration');\n                return <GoogleDriveIntegration />;\n            case '3':\n                return <Calendar />;\n            case '4':\n                return <TranslationSettings />;\n            case '5':\n                return <UILanguageSettings />;\n            case '6':\n                return <ExtensionSettings />;\n            case '7':\n                return <ClearCaptionsSettings />;\n            case 'welcome':\n                return <Welcome />;\n            default:\n                return <AISettings />;\n        }\n    };\n\n    // 如果是welcome页面，直接返回Welcome组件，不显示侧边栏\n    if (activeKey === 'welcome') {\n        return (\n            <GoogleAuthProvider>\n                <Welcome />\n            </GoogleAuthProvider>\n        );\n    }\n\n    return (\n        <GoogleAuthProvider>\n            <div className=\"options-container\">\n                <Sidebar activeKey={activeKey} onChange={handleTabChange} />\n                <div className=\"content-area\">\n                    {renderContent()}\n                </div>\n            </div>\n        </GoogleAuthProvider>\n    );\n};\n\nexport default Options;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/pages/update.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/pages/welcome.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Steps' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlayCircleOutlined' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SettingOutlined' is defined but never used.","line":3,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslationOutlined' is defined but never used.","line":3,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileTextOutlined' is defined but never used.","line":3,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":84}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, Steps, Button, Typography, Space, Divider } from 'antd';\nimport { PlayCircleOutlined, SettingOutlined, TranslationOutlined, FileTextOutlined } from '@ant-design/icons';\nimport { useI18n } from '../utils/i18n';\nimport GuideAnimation from '../components/GuideAnimation';\nimport './welcome.scss';\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst Welcome: React.FC = () => {\n  const { t } = useI18n();\n  \n  const features = [\n    {\n      title: t('welcome_feature_realtime_translation'),\n      description: t('welcome_feature_realtime_translation_desc')\n    },\n    {\n      title: t('welcome_feature_smart_summary'),\n      description: t('welcome_feature_smart_summary_desc')\n    },\n    {\n      title: t('welcome_feature_caption_export'),\n      description: t('welcome_feature_caption_export_desc')\n    },\n    {\n      title: t('welcome_feature_multilang_support'),\n      description: t('welcome_feature_multilang_support_desc')\n    }\n  ];\n\n  const handleGetStarted = () => {\n    // 关闭当前页面\n    window.close();\n  };\n\n  const handleOpenSettings = () => {\n    // 路由到options页面的AI设置区域\n    window.location.hash = 'ai-settings';\n  };\n\n  return (\n    <div className=\"welcome-container\">\n      <Card className=\"welcome-card\">\n        <div className=\"welcome-header\">\n          <Title level={1} className=\"welcome-title\">\n            {t('welcome_title')}\n          </Title>\n          <Paragraph className=\"welcome-subtitle\">\n            {t('welcome_subtitle')}\n          </Paragraph>\n        </div>\n\n        <Divider orientation=\"left\">\n          <Text className=\"section-title\">{t('welcome_quick_start')}</Text>\n        </Divider>\n\n        {/* 引导动画组件 */}\n        <GuideAnimation />\n\n        <Divider orientation=\"left\">\n          <Text className=\"section-title\">{t('welcome_main_features')}</Text>\n        </Divider>\n\n        <div className=\"features-grid\">\n          {features.map((feature, index) => (\n            <Card \n              key={index}\n              size=\"small\" \n              className=\"feature-card\"\n            >\n              <Title level={5} className=\"feature-title\">\n                {feature.title}\n              </Title>\n              <Paragraph className=\"feature-description\">\n                {feature.description}\n              </Paragraph>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"action-buttons\">\n          <Space size=\"large\">\n            <Button \n              type=\"primary\" \n              size=\"large\" \n              onClick={handleGetStarted}\n              className=\"action-button primary\"\n            >\n              {t('welcome_get_started')}\n            </Button>\n            <Button \n              size=\"large\" \n              onClick={handleOpenSettings}\n              className=\"action-button\"\n            >\n              {t('welcome_open_settings')}\n            </Button>\n          </Space>\n        </div>\n\n        <div className=\"tip-section\">\n          <Text type=\"secondary\" className=\"tip-text\">\n            {t('welcome_tip')}\n          </Text>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default Welcome; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/popup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/sidepanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Dropdown' is defined but never used.","line":2,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Menu' is defined but never used.","line":2,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":2,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dayjs' is defined but never used.","line":7,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contextHolder' is assigned a value but never used.","line":33,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activeService' is assigned a value but never used.","line":37,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":113,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'messageApi'. Either include it or remove the dependency array.","line":122,"column":8,"nodeType":"ArrayExpression","endLine":122,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [messageApi]","fix":{"range":[4246,4248],"text":"[messageApi]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useState, useRef} from \"react\";\nimport {message, Tabs, Tooltip, Dropdown, Menu, Button} from \"antd\";\nimport {\n    FileDoneOutlined,\n    HistoryOutlined, SketchOutlined,\n} from '@ant-design/icons';\nimport dayjs from 'dayjs';\nimport useLoading from './hooks/useLoading';\nimport Captions from \"./components/captions/captions\";\nimport Words from \"./components/words\";\nimport { DateProvider } from './contexts/DateContext';\nimport GlobalDatePicker from './components/GlobalDatePicker';\nimport Loading from './components/Loading';\nimport useI18n from './utils/i18n';\nimport initAIService from './utils/initAIService';\nimport Summary from './components/summary';\nimport aiServiceManager from './utils/ai';\nimport { getAllAIServiceConfigs } from './utils/getAPIkey';\nimport googleAITools from './utils/google-AI';\n\nimport './styles/sidepanel.scss';\n\ninterface CustomErrorEvent extends Event {\n    detail: {\n        error: {\n            errorDetails?: Array<{message: string}>;\n            message?: string;\n        };\n    };\n}\n\nconst SidePanel = () => {\n    const [messageApi, contextHolder] = message.useMessage();\n    const [current, setCurrent] = useState('captions');\n    const [loading] = useLoading();\n    const { t } = useI18n();\n    const [activeService, setActiveService] = useState<string>('');\n\n    const onTabClick = (key: string) => {\n        setCurrent(key);\n    };\n\n    // 初始化和重新加载 AI 服务\n    const loadAIService = async () => {\n        try {\n            // 先获取当前活动的服务\n            const { activeAIService } = await getAllAIServiceConfigs();\n            console.log('Active AI service from storage:', activeAIService);\n            setActiveService(activeAIService || 'gemini');\n\n            // 初始化 AI 服务\n            await initAIService();\n\n            // 重新初始化 googleAITools\n            await googleAITools.reinit();\n\n            // 检查初始化后的当前服务类型是否与存储中的匹配\n            const currentServiceType = aiServiceManager.getCurrentServiceType();\n            console.log('Current AI service after initialization:', currentServiceType);\n\n            if (currentServiceType !== activeAIService) {\n                console.warn(`Service mismatch! Storage: ${activeAIService}, Current: ${currentServiceType}`);\n                if (activeAIService && aiServiceManager.isServiceInitialized(activeAIService)) {\n                    // 强制设置为存储中的活动服务\n                    aiServiceManager.setCurrentServiceType(activeAIService);\n                    console.log(`Forced service type to: ${activeAIService}`);\n                }\n            }\n        } catch (error) {\n            console.error('Failed to initialize AI service:', error);\n        }\n    };\n\n    useEffect(() => {\n        // 初始化AI服务\n        loadAIService();\n\n        const updateApiKey = (request) => {\n            if (request.type === 'apiKeyUpdated') {\n                console.log('Received apiKeyUpdated message, reloading AI service');\n                // 重新初始化AI服务\n                loadAIService();\n            }\n        }\n        chrome.runtime.onMessage.addListener(updateApiKey);\n        return () => {\n            chrome.runtime.onMessage.removeListener(updateApiKey);\n        }\n    },[]);\n\n    useEffect(() => {\n        const handleMessage = (message) => {\n            if (message.action === 'jump-to-date') {\n                console.log('SidePanel: Switching to captions tab');\n                setCurrent('captions');\n            }\n        };\n\n        chrome.runtime.onMessage.addListener(handleMessage);\n        return () => {\n            chrome.runtime.onMessage.removeListener(handleMessage);\n        };\n    }, [setCurrent]);\n\n    useEffect(() => {\n        window.addEventListener('ajax-error', (e: CustomErrorEvent) => {\n            const errorMsg = e.detail.error;\n            console.log('ajax-error', errorMsg);\n            // 直接显示原始错误信息\n            let message = '';\n            try {\n                message = errorMsg.errorDetails?.[1]?.message || errorMsg.message || 'Unknown error occurred';\n            } catch (e) {\n                console.log({errorMsg})\n                message = 'Unknown error occurred';\n            }\n            messageApi.open({\n                type: 'error',\n                content: message,\n            });\n        });\n    }, []);\n\n    const items = [\n        {\n            label: t('captions'),\n            key: 'captions',\n            icon: <FileDoneOutlined />,\n            children: (<Captions />),\n        },\n        {\n            label: t('sidepanel_summary'),\n            key: 'summary',\n            icon: <SketchOutlined />,\n            children: <Summary />,\n        },\n        {\n            label: t('translation_records'),\n            key: 'words',\n            icon: <HistoryOutlined />,\n            children: <Words currentTab={current} />,\n        },\n    ];\n\n\n    return (\n        <DateProvider>\n            <div className={'side-panel'}>\n                <Loading spinning={loading} />\n                <Tabs\n                    items={items}\n                    onChange={onTabClick}\n                    activeKey={current}\n                    tabBarExtraContent={<GlobalDatePicker />}\n                />\n            </div>\n        </DateProvider>\n    );\n};\n\nexport default SidePanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai-error-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[696,699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[696,699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2935,2938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2935,2938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Modal } from 'antd';\nimport { getTranslation } from './i18n';\nimport { getCurrentUILanguage } from '../hooks/useUILanguage';\n\n/**\n * AI错误处理器\n * 统一处理AI服务相关的错误，特别是\"AI service not ready\"错误\n */\nclass AIErrorHandler {\n    private static instance: AIErrorHandler;\n    private isModalShowing = false;\n\n    private constructor() {}\n\n    public static getInstance(): AIErrorHandler {\n        if (!AIErrorHandler.instance) {\n            AIErrorHandler.instance = new AIErrorHandler();\n        }\n        return AIErrorHandler.instance;\n    }\n\n    /**\n     * 处理AI错误\n     * @param error 错误信息\n     * @returns true if handled, false if should be handled by caller\n     */\n    public handleError(error: any): boolean {\n        const errorMessage = typeof error === 'string' ? error : error?.message || '';\n        \n        // 检查是否为AI服务未准备好的错误\n        if (this.isAIServiceNotReadyError(errorMessage)) {\n            this.showAIConfigModal();\n            return true; // 已处理\n        }\n        \n        return false; // 未处理，由调用者处理\n    }\n\n    /**\n     * 检查是否为AI服务未准备好的错误\n     */\n    private isAIServiceNotReadyError(errorMessage: string): boolean {\n        const aiServiceErrors = [\n            'AI service not ready',\n            'No active AI service available',\n            'Current AI service is not ready',\n            'Gemini AI service not ready',\n            'OpenAI service not ready',\n            'XAI service not ready'\n        ];\n        \n        return aiServiceErrors.some(pattern => \n            errorMessage.toLowerCase().includes(pattern.toLowerCase())\n        );\n    }\n\n    /**\n     * 显示AI配置模态框\n     */\n    private async showAIConfigModal(): Promise<void> {\n        // 防止重复显示\n        if (this.isModalShowing) {\n            return;\n        }\n\n        this.isModalShowing = true;\n\n        // 获取当前UI语言\n        const currentUILanguage = await getCurrentUILanguage();\n        const langCode = currentUILanguage.code;\n\n        // 获取本地化文本\n        const title = getTranslation('ai_service_configuration_required', langCode);\n        const content = getTranslation('ai_service_not_configured_message', langCode);\n        const okText = getTranslation('go_to_options', langCode);\n        const cancelText = getTranslation('cancel', langCode);\n\n        Modal.confirm({\n            title,\n            content,\n            okText,\n            cancelText,\n            onOk: () => {\n                // 打开Options页面\n                chrome.runtime.openOptionsPage();\n                this.isModalShowing = false;\n            },\n            onCancel: () => {\n                this.isModalShowing = false;\n            },\n            afterClose: () => {\n                this.isModalShowing = false;\n            }\n        });\n    }\n}\n\n// 导出单例实例\nexport const aiErrorHandler = AIErrorHandler.getInstance();\n\n/**\n * 便捷函数：处理AI错误\n * @param error 错误信息\n * @returns true if handled, false if should be handled by caller\n */\nexport const handleAIError = (error: any): boolean => {\n    return aiErrorHandler.handleError(error);\n};\n\nexport default aiErrorHandler;","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/AIServiceFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/AIServiceInterface.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[269,272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[269,272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[603,606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[603,606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI服务接口\n * 定义所有AI服务必须实现的方法\n */\nexport interface IAIService {\n  // 初始化AI服务\n  init(): void;\n  \n  // 检查AI服务是否已准备好\n  isReady(): boolean;\n  \n  // 初始化或重置特定模式的对话\n  initConversation(mode: string): Promise<void>;\n  \n  // 获取特定模式的对话\n  getConversation(mode: string): Promise<any>;\n  \n  // 清除特定模式的对话\n  clearConversation(mode: string): void;\n  \n  // 向AI发送提问并获取回答\n  generateResponse(prompt: string, mode?: string, useContext?: boolean): Promise<string>;\n  \n  // 获取服务名称\n  getServiceName(): string;\n}\n\n/**\n * AI服务配置接口\n */\nexport interface AIServiceConfig {\n  apiKey: string;\n  modelName?: string;\n  [key: string]: any; // 允许其他配置项\n}\n\n/**\n * AI服务工厂接口\n */\nexport interface IAIServiceFactory {\n  // 创建AI服务实例\n  createService(config: AIServiceConfig): IAIService;\n  \n  // 获取支持的服务类型\n  getSupportedServiceType(): string;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/AIServiceManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/BaseAIService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[270,273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[270,273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1229,1232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1229,1232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1334,1337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1334,1337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { IAIService, AIServiceConfig } from './AIServiceInterface';\nimport getMeetingCaptions from '../getCaptions';\n\n/**\n * 基础AI服务抽象类\n * 实现一些通用的功能，让子类继承和扩展\n */\nexport abstract class BaseAIService implements IAIService {\n  protected aiConversations: Record<string, any> = {};\n  protected config: AIServiceConfig;\n  protected isInitialized: boolean = false;\n\n  constructor(config: AIServiceConfig) {\n    this.config = config;\n  }\n\n  /**\n   * 初始化服务 - 由子类实现具体逻辑\n   */\n  abstract init(): void;\n\n  /**\n   * 检查服务是否准备好\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * 初始化或重置特定模式的对话 - 子类需要覆盖此方法的部分逻辑\n   */\n  async initConversation(mode: string): Promise<void> {\n    if (!this.isReady()) {\n      console.error('AI service not initialized');\n      return;\n    }\n    \n    try {\n      // 获取会议记录\n      const meetingContent = await getMeetingCaptions();\n      \n      // 子类需要实现的创建对话逻辑\n      await this.createConversation(mode, meetingContent);\n      \n      console.log(`AI conversation for ${mode} initialized`);\n    } catch (error) {\n      console.error(`Error initializing conversation: ${error}`);\n    }\n  }\n\n  /**\n   * 创建对话 - 由子类实现\n   */\n  protected abstract createConversation(mode: string, meetingContent: any): Promise<void>;\n\n  /**\n   * 获取特定模式的对话，如果不存在则创建\n   */\n  async getConversation(mode: string): Promise<any> {\n    if (!this.aiConversations || !this.aiConversations[mode]) {\n      await this.initConversation(mode);\n    }\n    return this.aiConversations[mode];\n  }\n\n  /**\n   * 清除特定模式的对话\n   */\n  clearConversation(mode: string): void {\n    if (this.aiConversations && this.aiConversations[mode]) {\n      delete this.aiConversations[mode];\n      console.log(`AI conversation for ${mode} cleared`);\n    }\n  }\n\n  /**\n   * 处理AI响应 - 由子类实现\n   */\n  protected abstract processResponse(result: any): string;\n\n  /**\n   * 生成响应 - 发送提示并获取回答\n   * 子类需要覆盖此方法\n   */\n  abstract generateResponse(prompt: string, mode?: string, useContext?: boolean): Promise<string>;\n\n  /**\n   * 获取服务名称\n   */\n  abstract getServiceName(): string;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/GeminiAIService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[380,383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[380,383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1153,1156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1153,1156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2274,2277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2274,2277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { AIServiceConfig } from './AIServiceInterface';\nimport { BaseAIService } from './BaseAIService';\nimport { getCurrentUILanguage } from '../../hooks/useUILanguage';\nimport { getTranslation } from '../i18n';\n\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n\n/**\n * Gemini AI服务实现\n */\nexport class GeminiAIService extends BaseAIService {\n  private model: any = null;\n\n  constructor(config: AIServiceConfig) {\n    super(config);\n  }\n\n  /**\n   * 初始化Gemini AI服务\n   */\n  init(): void {\n    try {\n      if (!this.config.apiKey) {\n        console.error('No Gemini API key provided');\n        return;\n      }\n\n      const genAI = new GoogleGenerativeAI(this.config.apiKey);\n      this.model = genAI.getGenerativeModel({ \n        model: this.config.modelName || \"gemini-2.0-flash\" \n      });\n      \n      // 初始化AI对话实例\n      this.aiConversations = {};\n      this.isInitialized = true;\n      \n      console.log('Gemini AI service initialized');\n    } catch (error) {\n      console.error('Failed to initialize Gemini AI service:', error);\n    }\n  }\n\n  /**\n   * 创建对话\n   */\n  protected async createConversation(mode: string, meetingContent: any): Promise<void> {\n    if (!this.model) {\n      console.error('Gemini model not initialized');\n      return;\n    }\n    \n    // 获取多语言消息\n    const currentUILanguage = await getCurrentUILanguage();\n    const langCode = currentUILanguage.code;\n    const messages = {\n      meetingContentIntro: getTranslation('ai_meeting_content_intro', langCode),\n      assistantReady: getTranslation('ai_meeting_assistant_ready', langCode),\n      systemPromptMeeting: getTranslation('ai_system_prompt_meeting', langCode)\n    };\n    \n    // 创建新对话并插入会议记录作为上下文\n    try {\n      const chat = this.model.startChat({\n        history: [\n          {\n            role: \"user\",\n            parts: [{ text: `${messages.meetingContentIntro}${JSON.stringify(meetingContent)}` }],\n          },\n          {\n            role: \"model\", \n            parts: [{ text: messages.assistantReady }],\n          }\n        ],\n      });\n      \n      this.aiConversations[mode] = chat;\n    } catch (error) {\n      console.error(`Error creating Gemini conversation: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * 处理AI响应\n   */\n  protected processResponse(result: any): string {\n    return result.response.text();\n  }\n\n  /**\n   * 生成响应\n   */\n  async generateResponse(prompt: string, mode?: string, useContext?: boolean): Promise<string> {\n    if (!this.isReady() || !this.model) {\n      throw new Error('Gemini AI service not ready');\n    }\n\n    let result;\n    \n    if (useContext && mode) {\n      // 获取或创建该模式的AI对话\n      const conversation = await this.getConversation(mode);\n      \n      // 使用已有对话发送消息，保持上下文连贯性\n      try {\n        result = await conversation.sendMessage(prompt);\n        console.log(`Used existing Gemini AI conversation for ${mode}`);\n      } catch (error) {\n        console.error(`Error with Gemini AI conversation: ${error.message}`);\n        // 如果对话出错，重新初始化并尝试\n        await this.initConversation(mode);\n        const newConversation = await this.getConversation(mode);\n        result = await newConversation.sendMessage(prompt);\n      }\n    } else {\n      // 普通模式，直接发送提示\n      result = await this.model.generateContent(prompt);\n    }\n    \n    return this.processResponse(result);\n  }\n\n  /**\n   * 获取服务名称\n   */\n  getServiceName(): string {\n    return 'Gemini';\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/OpenAIService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[368,371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[368,371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1481,1484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1481,1484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2412,2415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2412,2415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { AIServiceConfig } from './AIServiceInterface';\nimport { BaseAIService } from './BaseAIService';\nimport { getCurrentUILanguage } from '../../hooks/useUILanguage';\nimport { getTranslation } from '../i18n';\n// 使用require方式导入，避免类型问题\nconst OpenAI = require('openai');\n\n/**\n * OpenAI服务实现\n */\nexport class OpenAIService extends BaseAIService {\n  private client: any = null;\n\n  constructor(config: AIServiceConfig) {\n    super(config);\n  }\n\n  /**\n   * 初始化OpenAI服务\n   */\n  init(): void {\n    try {\n      if (!this.config.apiKey) {\n        console.error('No OpenAI API key provided');\n        return;\n      }\n\n      if (!OpenAI || !OpenAI.OpenAI) {\n        console.error('OpenAI library not properly loaded');\n        return;\n      }\n\n      try {\n        // 初始化OpenAI客户端\n        this.client = new OpenAI.OpenAI({\n          apiKey: this.config.apiKey,\n          dangerouslyAllowBrowser: true\n        });\n\n        // 初始化AI对话实例\n        this.aiConversations = {};\n        this.isInitialized = true;\n\n        console.log('OpenAI service initialized');\n      } catch (initError) {\n        console.error('Failed to initialize OpenAI client:', initError);\n        return;\n      }\n    } catch (error) {\n      console.error('Fatal error initializing OpenAI service:', error);\n    }\n  }\n\n  /**\n   * 检查服务是否准备就绪，增加客户端检查\n   */\n  isReady(): boolean {\n    return this.isInitialized && !!this.client;\n  }\n\n  /**\n   * 创建对话\n   */\n  protected async createConversation(mode: string, meetingContent: any): Promise<void> {\n    if (!this.client) {\n      console.error('OpenAI client not initialized');\n      return;\n    }\n\n    // 获取多语言消息\n    const currentUILanguage = await getCurrentUILanguage();\n    const langCode = currentUILanguage.code;\n    const messages = {\n      meetingContentIntro: getTranslation('ai_meeting_content_intro', langCode),\n      assistantReady: getTranslation('ai_meeting_assistant_ready', langCode),\n      systemPromptMeeting: getTranslation('ai_system_prompt_meeting', langCode)\n    };\n\n    // 为每个模式创建对话历史\n    this.aiConversations[mode] = [\n      {\n        role: \"system\",\n        content: messages.systemPromptMeeting\n      },\n      {\n        role: \"user\",\n        content: `${messages.meetingContentIntro}${JSON.stringify(meetingContent)}`\n      },\n      {\n        role: \"assistant\",\n        content: messages.assistantReady\n      }\n    ];\n  }\n\n  /**\n   * 处理AI响应\n   */\n  protected processResponse(result: any): string {\n    try {\n      if (result && result.choices && result.choices.length > 0 &&\n          result.choices[0].message && result.choices[0].message.content) {\n        return result.choices[0].message.content;\n      }\n      console.error('Unexpected OpenAI response format:', result);\n      return \"Error processing response from OpenAI.\";\n    } catch (error) {\n      console.error('Error processing OpenAI response:', error);\n      return \"Error processing response from OpenAI.\";\n    }\n  }\n\n  /**\n   * 生成响应\n   */\n  async generateResponse(prompt: string, mode?: string, useContext?: boolean): Promise<string> {\n    if (!this.isReady() || !this.client) {\n      throw new Error('OpenAI service not ready');\n    }\n\n    let result;\n\n    try {\n      if (useContext && mode) {\n        // 获取或创建该模式的对话历史\n        const conversation = await this.getConversation(mode);\n\n        // 将新的用户消息添加到对话历史\n        conversation.push({ role: \"user\", content: prompt });\n\n        try {\n          // 发送完整对话历史，保持上下文连贯性\n          result = await this.client.chat.completions.create({\n            model: this.config.modelName || \"gpt-3.5-turbo\",\n            messages: conversation,\n          });\n\n          // 将AI回复添加到对话历史\n          if (result && result.choices && result.choices.length > 0 && result.choices[0].message) {\n            conversation.push({\n              role: \"assistant\",\n              content: result.choices[0].message.content\n            });\n          }\n\n          console.log(`Used existing OpenAI conversation for ${mode}`);\n        } catch (error) {\n          console.error(`Error with OpenAI conversation: ${error.message}`);\n          // 如果对话出错，重新初始化并尝试\n          await this.initConversation(mode);\n          return this.generateResponse(prompt, mode, useContext);\n        }\n      } else {\n        // 普通模式，直接发送提示\n        result = await this.client.chat.completions.create({\n          model: this.config.modelName || \"gpt-3.5-turbo\",\n          messages: [\n            { role: \"system\", content: \"You are a helpful assistant.\" },\n            { role: \"user\", content: prompt }\n          ],\n        });\n      }\n\n      return this.processResponse(result);\n    } catch (error) {\n      console.error('Error generating response from OpenAI:', error);\n      throw new Error(`OpenAI Error: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 获取服务名称\n   */\n  getServiceName(): string {\n    return 'OpenAI';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/XAIService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[950,953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[950,953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3991,3994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3991,3994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5093,5096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5093,5096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { AIServiceConfig } from './AIServiceInterface';\nimport { BaseAIService } from './BaseAIService';\nimport { getCurrentUILanguage } from '../../hooks/useUILanguage';\nimport { getTranslation } from '../i18n';\n\n/**\n * XAI (xAI/Grok) 服务实现\n */\nexport class XAIService extends BaseAIService {\n  private client: any = null;\n  \n  constructor(config: AIServiceConfig) {\n    super(config);\n  }\n\n  /**\n   * 初始化XAI服务\n   */\n  init(): void {\n    try {\n      if (!this.config.apiKey) {\n        console.error('No xAI API key provided');\n        return;\n      }\n\n      // Initialize xAI client config\n      this.client = {\n        apiKey: this.config.apiKey,\n        model: this.config.modelName || 'grok-1',\n        /**\n         * Send a chat completion request to xAI API\n         * @param prompt User's question or prompt\n         * @param options Additional options for the request\n         */\n        createCompletion: async (prompt: string, options: any = {}) => {\n          const response = await fetch('https://api.x.ai/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${this.config.apiKey}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              model: this.config.modelName || 'grok-1',\n              messages: [\n                { role: 'user', content: prompt }\n              ],\n              ...options\n            })\n          });\n\n          if (!response.ok) {\n            let errorMsg = 'xAI API request failed';\n            try {\n              const error = await response.json();\n              errorMsg = error.error?.message || errorMsg;\n            } catch {}\n            throw new Error(errorMsg);\n          }\n\n          const data = await response.json();\n          return {\n            text: data.choices?.[0]?.message?.content || '',\n            finish_reason: data.choices?.[0]?.finish_reason || 'stop',\n          };\n        },\n        /**\n         * Create a conversation object for multi-turn chat\n         */\n        createConversation: () => {\n          return {\n            messages: [],\n            /**\n             * Add a message to the conversation\n             */\n            addMessage: function(message: { role: string, content: string }) {\n              this.messages.push(message);\n              return this;\n            },\n            /**\n             * Execute the conversation by sending all messages to xAI API\n             */\n            execute: async function() {\n              const response = await fetch('https://api.x.ai/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${this.apiKey}`,\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  model: this.model,\n                  messages: this.messages\n                })\n              });\n              if (!response.ok) {\n                let errorMsg = 'xAI API request failed';\n                try {\n                  const error = await response.json();\n                  errorMsg = error.error?.message || errorMsg;\n                } catch {}\n                throw new Error(errorMsg);\n              }\n              const data = await response.json();\n              return {\n                text: data.choices?.[0]?.message?.content || '',\n                finish_reason: data.choices?.[0]?.finish_reason || 'stop',\n              };\n            },\n            apiKey: this.config.apiKey,\n            model: this.config.modelName || 'grok-1',\n          };\n        }\n      };\n      // Initialize AI conversation instances\n      this.aiConversations = {};\n      this.isInitialized = true;\n      console.log('XAI service initialized');\n    } catch (error) {\n      console.error('Failed to initialize XAI service:', error);\n    }\n  }\n\n  /**\n   * 创建对话\n   */\n  protected async createConversation(mode: string, meetingContent: any): Promise<void> {\n    if (!this.client) {\n      console.error('XAI client not initialized');\n      return;\n    }\n    \n    // 获取多语言消息\n    const currentUILanguage = await getCurrentUILanguage();\n    const langCode = currentUILanguage.code;\n    const messages = {\n      meetingContentIntro: getTranslation('ai_meeting_content_intro', langCode),\n      assistantReady: getTranslation('ai_meeting_assistant_ready', langCode),\n      systemPromptMeeting: getTranslation('ai_system_prompt_meeting', langCode)\n    };\n    \n    // 创建对话并初始化\n    const conversation = this.client.createConversation();\n    \n    // 添加系统消息和会议内容\n    conversation.addMessage({\n      role: 'system',\n      content: messages.systemPromptMeeting\n    });\n    \n    conversation.addMessage({\n      role: 'user',\n      content: `${messages.meetingContentIntro}${JSON.stringify(meetingContent)}`\n    });\n    \n    conversation.addMessage({\n      role: 'assistant',\n      content: messages.assistantReady\n    });\n    \n    // 存储会话对象\n    this.aiConversations[mode] = conversation;\n  }\n\n  /**\n   * 处理AI响应\n   */\n  protected processResponse(result: any): string {\n    return result.text;\n  }\n\n  /**\n   * 生成响应\n   */\n  async generateResponse(prompt: string, mode?: string, useContext?: boolean): Promise<string> {\n    if (!this.isReady() || !this.client) {\n      throw new Error('XAI service not ready');\n    }\n\n    let result;\n    \n    if (useContext && mode) {\n      // 获取或创建对话\n      const conversation = await this.getConversation(mode);\n      \n      try {\n        // 添加用户问题\n        conversation.addMessage({\n          role: 'user',\n          content: prompt\n        });\n        \n        // 执行对话\n        result = await conversation.execute();\n        \n        // 添加AI回复到对话历史\n        conversation.addMessage({\n          role: 'assistant',\n          content: result.text\n        });\n        \n        console.log(`Used existing XAI conversation for ${mode}`);\n      } catch (error) {\n        console.error(`Error with XAI conversation: ${error.message}`);\n        // 如果对话出错，重新初始化并尝试\n        await this.initConversation(mode);\n        const newConversation = await this.getConversation(mode);\n        \n        newConversation.addMessage({\n          role: 'user',\n          content: prompt\n        });\n        \n        result = await newConversation.execute();\n      }\n    } else {\n      // 普通模式，直接发送提示\n      result = await this.client.createCompletion(prompt, {\n        modelId: this.client.model,\n      });\n    }\n    \n    return this.processResponse(result);\n  }\n\n  /**\n   * 获取服务名称\n   */\n  getServiceName(): string {\n    return 'xAI';\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/ai/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/askAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/debounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/file-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/format-time.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/get-ai-summary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/get-file-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[632,635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[632,635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[678,681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[678,681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type {UploadFile} from \"~node_modules/antd\";\r\n\r\nconst getFileData = (file: UploadFile) => {\r\n    return new Promise((resolve, reject) => {\r\n        // Try to get file data from different sources\r\n        let fileToRead: File | Blob | null = null;\r\n\r\n        // Method 1: originFileObj (most common)\r\n        if (file.originFileObj) {\r\n            const obj = file.originFileObj as any;\r\n            if (obj instanceof File || obj instanceof Blob) {\r\n                fileToRead = obj;\r\n            }\r\n        }\r\n        // Method 2: Check if file itself is a File object (direct file upload)\r\n        else if (typeof (file as any).stream === 'function' && typeof (file as any).arrayBuffer === 'function') {\r\n            fileToRead = file as unknown as File;\r\n        }\r\n        // Method 3: Check if file has url property and try to fetch it\r\n        else if (file.url) {\r\n            // Handle URL-based files (e.g., from server response)\r\n            fetch(file.url)\r\n                .then(response => response.text())\r\n                .then(text => resolve(text))\r\n                .catch(error => reject(new Error(`Failed to fetch file from URL: ${error.message}`)));\r\n            return;\r\n        }\r\n        // Method 4: Check if file has response property with file data\r\n        else if (file.response && typeof file.response === 'string') {\r\n            resolve(file.response);\r\n            return;\r\n        }\r\n\r\n        // If no valid file source found\r\n        if (!fileToRead) {\r\n            reject(new Error('No valid file source found. File must have originFileObj, be a File instance, have a url, or contain response data.'));\r\n            return;\r\n        }\r\n\r\n        // Read the file using FileReader\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => resolve(event.target.result as string);\r\n        reader.onerror = (error) => reject(new Error(`FileReader error: ${error}`));\r\n        reader.readAsText(fileToRead);\r\n    });\r\n}\r\n\r\nexport default getFileData\r\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/get-is-extension-disabled.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_reject' is defined but never used.","line":2,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const getIsExtensionDisabled = () => {\n    return new Promise((resolve, _reject) => {\n        chrome.storage.local.get(['isExtensionDisabled'], (result) => {\n        resolve(!!result.isExtensionDisabled);\n        });\n    });\n}\n\nexport default getIsExtensionDisabled; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/getAPIkey.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[699,702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[699,702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_reject' is defined but never used.","line":25,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1335,1338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1335,1338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_reject' is defined but never used.","line":48,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 获取特定AI服务的API密钥\n * @param {string} serviceType - AI服务类型 (gemini, openai, xai等)\n * @returns {Promise<string>} - 返回API密钥\n */\nconst getAPIkey = (serviceType: string = 'gemini') => {\n    const keyName = `${serviceType}ApiKey`;\n    \n    return new Promise((resolve, reject) => {\n        chrome.storage.sync.get([keyName], (result) => {\n            if (result[keyName]) {\n                resolve(result[keyName]);\n            } else {\n                reject(`${serviceType} API key not found`);\n            }\n        });\n    });\n};\n\n/**\n * 获取所有已保存的AI服务配置\n * @returns {Promise<Record<string, any>>} - 返回AI服务配置对象\n */\nexport const getAllAIServiceConfigs = () => {\n    return new Promise<Record<string, any>>((resolve, _reject) => {\n        chrome.storage.sync.get(['aiServices', 'activeAIService'], (result) => {\n            resolve({\n                aiServices: result.aiServices || {},\n                activeAIService: result.activeAIService || 'gemini'\n            });\n        });\n    });\n};\n\n/**\n * 保存AI服务配置\n * @param {string} serviceType - AI服务类型\n * @param {string} apiKey - API密钥\n * @param {boolean} isActive - 是否设为当前活动服务\n * @param {Record<string, any>} additionalConfig - 额外配置\n */\nexport const saveAIServiceConfig = (\n    serviceType: string,\n    apiKey: string,\n    isActive: boolean = false,\n    additionalConfig: Record<string, any> = {}\n) => {\n    return new Promise<void>((resolve, _reject) => {\n        // 先获取现有配置\n        chrome.storage.sync.get(['aiServices'], (result) => {\n            const aiServices = result.aiServices || {};\n            \n            // 更新特定服务的配置\n            aiServices[serviceType] = {\n                apiKey,\n                ...additionalConfig\n            };\n            \n            // 更新存储\n            const updateData: Record<string, any> = { aiServices };\n            \n            // 如果设为活动服务，则同时更新activeAIService\n            if (isActive) {\n                updateData.activeAIService = serviceType;\n            }\n            \n            chrome.storage.sync.set(updateData, () => {\n                resolve();\n            });\n        });\n    });\n};\n\nexport default getAPIkey;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/getCaptions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_reject' is defined but never used.","line":5,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type {Transcript} from \"~hooks/useTranscripts\";\nimport { Dayjs } from 'dayjs';\n\nconst getMeetingCaptions = (selectedDate?: Dayjs): Promise<Transcript[]> => {\n    return new Promise((resolve, _reject) => {\n        const handleMessage = (message) => {\n            if (message.action === 'refresh-transcripts') {\n                console.log('getCaptions.js', 'refresh-transcripts', message.data)\n                resolve(message.data as Transcript[]);\n                chrome.runtime.onMessage.removeListener(handleMessage);\n            }\n        }\n        chrome.runtime.sendMessage({\n            action: 'get-transcripts',\n            date: selectedDate\n        });\n        chrome.runtime.onMessage.addListener(handleMessage);\n    });\n}\n\nexport default getMeetingCaptions;\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/google-AI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/google-calendar.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[76,79],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[76,79],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dayjs from 'dayjs';\n\ndeclare global {\n  interface Window {\n    gapi: any;\n  }\n}\n\ninterface GoogleCalendarEvent {\n  id: string;\n  summary: string;\n  start: {\n    dateTime: string;\n    timeZone: string;\n  };\n  end: {\n    dateTime: string;\n    timeZone: string;\n  };\n}\n\nclass GoogleCalendarService {\n  private static instance: GoogleCalendarService;\n  private apiKey: string;\n  private clientId: string;\n\n  private constructor() {\n    // 从环境变量或配置中获取\n    this.apiKey = 'YOUR_API_KEY';\n    this.clientId = 'YOUR_CLIENT_ID';\n  }\n\n  public static getInstance(): GoogleCalendarService {\n    if (!GoogleCalendarService.instance) {\n      GoogleCalendarService.instance = new GoogleCalendarService();\n    }\n    return GoogleCalendarService.instance;\n  }\n\n  private async initializeGoogleApi(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (typeof window.gapi !== 'undefined') {\n        window.gapi.load('client:auth2', async () => {\n          try {\n            await window.gapi.client.init({\n              apiKey: this.apiKey,\n              clientId: this.clientId,\n              discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'],\n              scope: 'https://www.googleapis.com/auth/calendar.readonly'\n            });\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        });\n      } else {\n        reject(new Error('Google API not loaded'));\n      }\n    });\n  }\n\n  public async signIn(): Promise<void> {\n    await this.initializeGoogleApi();\n    const googleAuth = window.gapi.auth2.getAuthInstance();\n    if (!googleAuth.isSignedIn.get()) {\n      await googleAuth.signIn();\n    }\n  }\n\n  public async signOut(): Promise<void> {\n    const googleAuth = window.gapi.auth2.getAuthInstance();\n    await googleAuth.signOut();\n  }\n\n  public async getEvents(startDate: dayjs.Dayjs, endDate: dayjs.Dayjs): Promise<GoogleCalendarEvent[]> {\n    try {\n      await this.initializeGoogleApi();\n      \n      const response = await window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'timeMin': startDate.toISOString(),\n        'timeMax': endDate.toISOString(),\n        'showDeleted': false,\n        'singleEvents': true,\n        'orderBy': 'startTime'\n      });\n\n      return response.result.items;\n    } catch (error) {\n      console.error('Error fetching calendar events:', error);\n      throw error;\n    }\n  }\n}\n\nexport default GoogleCalendarService; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/google-drive.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/highlight.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/ar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/de.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/en.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/es.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/fa.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/fr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/hi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/it.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/ja.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/ko.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/pt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/ru.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/th.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/vi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/i18n/translations/zh.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/initAIService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[990,993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[990,993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import getAPIkey, { getAllAIServiceConfigs } from './getAPIkey';\nimport aiServiceManager from './ai';\n\n/**\n * 初始化AI服务\n * 会尝试加载储存的配置并初始化相应的AI服务\n */\nconst initAIService = async () => {\n  try {\n    // 获取所有AI服务配置\n    const { aiServices, activeAIService } = await getAllAIServiceConfigs();\n    \n    // 如果没有配置，尝试从旧配置中获取\n    if (Object.keys(aiServices).length === 0) {\n      try {\n        const geminiApiKey = await getAPIkey('gemini');\n        \n        // 初始化Gemini服务\n        await aiServiceManager.initService('gemini', { apiKey: geminiApiKey as string });\n        aiServiceManager.setCurrentServiceType('gemini');\n        \n        console.log('AI service initialized with legacy configuration');\n        return true;\n      } catch (error) {\n        console.warn('No legacy API key found:', error);\n        return false;\n      }\n    }\n    \n    // 初始化所有已配置的服务\n    const initPromises = Object.entries(aiServices).map(([type, config]) => {\n      return aiServiceManager.initService(type, config as any);\n    });\n    \n    await Promise.allSettled(initPromises);\n    \n    // 设置活动服务\n    if (activeAIService && aiServiceManager.isServiceInitialized(activeAIService)) {\n      aiServiceManager.setCurrentServiceType(activeAIService);\n      console.log(`Set active AI service to ${activeAIService}`);\n    } else {\n      // 如果当前没有活动服务或活动服务未初始化，尝试使用第一个可用的服务\n      const availableServices = aiServiceManager.getInitializedServices();\n      if (availableServices.length > 0) {\n        aiServiceManager.setCurrentServiceType(availableServices[0]);\n        console.log(`Fallback to available AI service: ${availableServices[0]}`);\n      } else {\n        console.error('No AI services were successfully initialized');\n        return false;\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to initialize AI services:', error);\n    return false;\n  }\n};\n\nexport default initAIService; ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/is-resetore-data-valid.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":17,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const isRestoreDataValid = (data: string) => {\r    return new Promise((resolve, reject) => {\r        try {\r            const jsons = JSON.parse(data);\r            if (!Array.isArray(jsons)) {\r                reject('the file is not json valid');\r            } else {\r                const isDataValided = jsons.every((item) => {\r                    return item.hasOwnProperty('activeSpeaker') && item.hasOwnProperty('session') && item.hasOwnProperty('talkContent') && item.hasOwnProperty('timestamp');\r                });\r                if (isDataValided) {\r                    resolve(jsons)\r                } else {\r                    reject('the file is not json valid');\r                }\r            }\r        } catch (_e) {\r            reject('the file is not json valid');\r        }\r    });\r}\r\rexport default isRestoreDataValid;\r","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/language-detector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/languages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/message-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/open-side-panel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/save.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/set-captions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/translate-signal-words.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/translate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_reject' is defined but never used.","line":3,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport const getTranslatedWords: () => Promise<string[]> = () => {\n    return new Promise((resolve, _reject) => {\n        chrome.storage.local.get('translatedWords', ({translatedWords}) => {\n            console.log({translatedWords})\n            resolve(translatedWords || []);\n        });\n    });\n}\n\nexport const setTranslatedWords = async (text: string) => {\n    const translatedWords = await getTranslatedWords() as string[];\n    chrome.storage.local.set({'translatedWords': [...new Set([...translatedWords, text])]});\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/translators/google-translator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/translators/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/translators/microsoft-translator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/types/google-drive.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[349,352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[349,352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Google Drive 文件夹接口\n */\nexport interface IGoogleDriveFolder {\n    id: string;\n    name: string;\n    mimeType: string;\n    modifiedTime: string;\n}\n\n/**\n * Google Drive 文件接口\n */\nexport interface IGoogleDriveFile extends IGoogleDriveFolder {\n    size?: string;\n}\n\n/**\n * 下载文件内容接口\n */\nexport interface IGoogleDriveFileContent {\n    [key: string]: any;\n}\n\n/**\n * Google Drive 服务接口\n * 定义了与 Google Drive 交互的方法\n */\nexport interface IGoogleDriveService {\n    /**\n     * 进行身份认证\n     * @param interactive 是否使用交互式认证，默认为 true\n     * @returns 认证是否成功\n     */\n    authenticate(interactive?: boolean): Promise<boolean>;\n    \n    /**\n     * 获取备份文件夹\n     * @returns 备份文件夹信息或 null\n     */\n    getBackupFolder(): Promise<IGoogleDriveFolder | null>;\n    \n    /**\n     * 获取备份文件列表\n     * @returns 文件列表数组\n     */\n    listBackupFiles(): Promise<IGoogleDriveFile[]>;\n    \n    /**\n     * 获取 Google Drive 中的所有文件\n     * @returns 文件列表数组\n     */\n    listFiles(): Promise<IGoogleDriveFile[]>;\n    \n    /**\n     * 上传文件\n     * @param file 要上传的文件\n     * @param existingFileId 可选的现有文件 ID，用于更新文件\n     * @returns 上传是否成功\n     */\n    uploadFile(file: File, existingFileId?: string): Promise<boolean>;\n    \n    /**\n     * 删除文件\n     * @param fileId 要删除的文件 ID\n     * @returns 删除是否成功\n     */\n    deleteFile(fileId: string): Promise<boolean>;\n    \n    /**\n     * 下载文件\n     * @param fileId 要下载的文件 ID\n     * @returns 文件内容\n     */\n    downloadFile(fileId: string): Promise<IGoogleDriveFileContent>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/unified-translation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/huhai/WebstormProjects/smart-meet/utils/version-check.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]