import { useRef, useEffect, useState, useCallback } from 'react';import type {Transcript} from "~hooks/useTranscripts";function useAutoScroll(scrollAreaRef: React.RefObject<HTMLDivElement>, data:Transcript[]) {    const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);    let lastScrollTop = scrollAreaRef.current?.scrollTop || 0;    const handleScroll = () => {        const scrollArea = scrollAreaRef.current;        const scrollTop = scrollArea.scrollTop;        const isAtBottom = scrollArea.scrollHeight - scrollArea.scrollTop - scrollArea.clientHeight < 15; // 阈值 5px        if (isAtBottom) {            setAutoScrollEnabled(true)        } else {            setAutoScrollEnabled(false)        }        lastScrollTop = scrollTop;    }    useEffect(() => {        if (autoScrollEnabled && scrollAreaRef.current) {            const scrollAreaNode = scrollAreaRef.current;            scrollAreaNode.scrollTop = scrollAreaNode.scrollHeight;        }    }, [autoScrollEnabled, data]);    useEffect(() => {        const scrollAreaNode = scrollAreaRef.current;        if (!scrollAreaNode) return;        scrollAreaNode.addEventListener('scroll', handleScroll);        return () => {            scrollAreaNode.removeEventListener('scroll', handleScroll);        };    }, [scrollAreaRef]);}export default useAutoScroll;